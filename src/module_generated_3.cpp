// generated by dasVulkan for GLFW 3.3.2 and Vulkan 1.2.162
#include "..\include\dasVulkan\module_generated.h.inc"

using namespace das;

//
// opaque structs
//

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkFence, VkFence)
IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDeviceMemory, VkDeviceMemory)

//
// structs
//


IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkClearValue, VkClearValue);

struct VkClearValueAnnotation
: public ManagedStructureAnnotation<VkClearValue,true,true> {
    VkClearValueAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkClearValue", ml) {
        addField<DAS_BIND_MANAGED_FIELD(color)>("color");
        addField<DAS_BIND_MANAGED_FIELD(depthStencil)>("depthStencil");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkClearAttachment, VkClearAttachment);

struct VkClearAttachmentAnnotation
: public ManagedStructureAnnotation<VkClearAttachment,true,true> {
    VkClearAttachmentAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkClearAttachment", ml) {
        addField<DAS_BIND_MANAGED_FIELD(aspectMask)>("aspectMask");
        addField<DAS_BIND_MANAGED_FIELD(colorAttachment)>("colorAttachment");
        addField<DAS_BIND_MANAGED_FIELD(clearValue)>("clearValue");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkClearRect, VkClearRect);

struct VkClearRectAnnotation
: public ManagedStructureAnnotation<VkClearRect,true,true> {
    VkClearRectAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkClearRect", ml) {
        addField<DAS_BIND_MANAGED_FIELD(rect)>("rect");
        addField<DAS_BIND_MANAGED_FIELD(baseArrayLayer)>("baseArrayLayer");
        addField<DAS_BIND_MANAGED_FIELD(layerCount)>("layerCount");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImageBlit, VkImageBlit);

struct VkImageBlitAnnotation
: public ManagedStructureAnnotation<VkImageBlit,true,true> {
    VkImageBlitAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageBlit", ml) {
        addField<DAS_BIND_MANAGED_FIELD(srcSubresource)>("srcSubresource");
        addField<DAS_BIND_MANAGED_FIELD(srcOffsets)>("srcOffsets");
        addField<DAS_BIND_MANAGED_FIELD(dstSubresource)>("dstSubresource");
        addField<DAS_BIND_MANAGED_FIELD(dstOffsets)>("dstOffsets");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImageCopy, VkImageCopy);

struct VkImageCopyAnnotation
: public ManagedStructureAnnotation<VkImageCopy,true,true> {
    VkImageCopyAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageCopy", ml) {
        addField<DAS_BIND_MANAGED_FIELD(srcSubresource)>("srcSubresource");
        addField<DAS_BIND_MANAGED_FIELD(srcOffset)>("srcOffset");
        addField<DAS_BIND_MANAGED_FIELD(dstSubresource)>("dstSubresource");
        addField<DAS_BIND_MANAGED_FIELD(dstOffset)>("dstOffset");
        addField<DAS_BIND_MANAGED_FIELD(extent)>("extent");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImageResolve, VkImageResolve);

struct VkImageResolveAnnotation
: public ManagedStructureAnnotation<VkImageResolve,true,true> {
    VkImageResolveAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageResolve", ml) {
        addField<DAS_BIND_MANAGED_FIELD(srcSubresource)>("srcSubresource");
        addField<DAS_BIND_MANAGED_FIELD(srcOffset)>("srcOffset");
        addField<DAS_BIND_MANAGED_FIELD(dstSubresource)>("dstSubresource");
        addField<DAS_BIND_MANAGED_FIELD(dstOffset)>("dstOffset");
        addField<DAS_BIND_MANAGED_FIELD(extent)>("extent");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkRenderPassBeginInfo, VkRenderPassBeginInfo);

struct VkRenderPassBeginInfoAnnotation
: public ManagedStructureAnnotation<VkRenderPassBeginInfo,true,true> {
    VkRenderPassBeginInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRenderPassBeginInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(renderPass)>("renderPass");
        addField<DAS_BIND_MANAGED_FIELD(framebuffer)>("framebuffer");
        addField<DAS_BIND_MANAGED_FIELD(renderArea)>("renderArea");
        addField<DAS_BIND_MANAGED_FIELD(clearValueCount)>("clearValueCount");
        addField<DAS_BIND_MANAGED_FIELD(pClearValues)>("pClearValues");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceSubgroupProperties, VkPhysicalDeviceSubgroupProperties);

struct VkPhysicalDeviceSubgroupPropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceSubgroupProperties,true,true> {
    VkPhysicalDeviceSubgroupPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceSubgroupProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(subgroupSize)>("subgroupSize");
        addField<DAS_BIND_MANAGED_FIELD(supportedStages)>("supportedStages");
        addField<DAS_BIND_MANAGED_FIELD(supportedOperations)>("supportedOperations");
        addField<DAS_BIND_MANAGED_FIELD(quadOperationsInAllStages)>("quadOperationsInAllStages");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkBindBufferMemoryInfo, VkBindBufferMemoryInfo);

struct VkBindBufferMemoryInfoAnnotation
: public ManagedStructureAnnotation<VkBindBufferMemoryInfo,true,true> {
    VkBindBufferMemoryInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindBufferMemoryInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(buffer)>("buffer");
        addField<DAS_BIND_MANAGED_FIELD(memory)>("memory");
        addField<DAS_BIND_MANAGED_FIELD(memoryOffset)>("memoryOffset");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkBindImageMemoryInfo, VkBindImageMemoryInfo);

struct VkBindImageMemoryInfoAnnotation
: public ManagedStructureAnnotation<VkBindImageMemoryInfo,true,true> {
    VkBindImageMemoryInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindImageMemoryInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(image)>("image");
        addField<DAS_BIND_MANAGED_FIELD(memory)>("memory");
        addField<DAS_BIND_MANAGED_FIELD(memoryOffset)>("memoryOffset");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDevice16BitStorageFeatures, VkPhysicalDevice16BitStorageFeatures);

struct VkPhysicalDevice16BitStorageFeaturesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevice16BitStorageFeatures,true,true> {
    VkPhysicalDevice16BitStorageFeaturesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevice16BitStorageFeatures", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(storageBuffer16BitAccess)>("storageBuffer16BitAccess");
        addField<DAS_BIND_MANAGED_FIELD(uniformAndStorageBuffer16BitAccess)>("uniformAndStorageBuffer16BitAccess");
        addField<DAS_BIND_MANAGED_FIELD(storagePushConstant16)>("storagePushConstant16");
        addField<DAS_BIND_MANAGED_FIELD(storageInputOutput16)>("storageInputOutput16");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkMemoryDedicatedRequirements, VkMemoryDedicatedRequirements);

struct VkMemoryDedicatedRequirementsAnnotation
: public ManagedStructureAnnotation<VkMemoryDedicatedRequirements,true,true> {
    VkMemoryDedicatedRequirementsAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryDedicatedRequirements", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(prefersDedicatedAllocation)>("prefersDedicatedAllocation");
        addField<DAS_BIND_MANAGED_FIELD(requiresDedicatedAllocation)>("requiresDedicatedAllocation");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkMemoryDedicatedAllocateInfo, VkMemoryDedicatedAllocateInfo);

struct VkMemoryDedicatedAllocateInfoAnnotation
: public ManagedStructureAnnotation<VkMemoryDedicatedAllocateInfo,true,true> {
    VkMemoryDedicatedAllocateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryDedicatedAllocateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(image)>("image");
        addField<DAS_BIND_MANAGED_FIELD(buffer)>("buffer");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkMemoryAllocateFlagsInfo, VkMemoryAllocateFlagsInfo);

struct VkMemoryAllocateFlagsInfoAnnotation
: public ManagedStructureAnnotation<VkMemoryAllocateFlagsInfo,true,true> {
    VkMemoryAllocateFlagsInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryAllocateFlagsInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(deviceMask)>("deviceMask");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDeviceGroupRenderPassBeginInfo, VkDeviceGroupRenderPassBeginInfo);

struct VkDeviceGroupRenderPassBeginInfoAnnotation
: public ManagedStructureAnnotation<VkDeviceGroupRenderPassBeginInfo,true,true> {
    VkDeviceGroupRenderPassBeginInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceGroupRenderPassBeginInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(deviceMask)>("deviceMask");
        addField<DAS_BIND_MANAGED_FIELD(deviceRenderAreaCount)>("deviceRenderAreaCount");
        addField<DAS_BIND_MANAGED_FIELD(pDeviceRenderAreas)>("pDeviceRenderAreas");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDeviceGroupCommandBufferBeginInfo, VkDeviceGroupCommandBufferBeginInfo);

struct VkDeviceGroupCommandBufferBeginInfoAnnotation
: public ManagedStructureAnnotation<VkDeviceGroupCommandBufferBeginInfo,true,true> {
    VkDeviceGroupCommandBufferBeginInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceGroupCommandBufferBeginInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(deviceMask)>("deviceMask");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDeviceGroupSubmitInfo, VkDeviceGroupSubmitInfo);

struct VkDeviceGroupSubmitInfoAnnotation
: public ManagedStructureAnnotation<VkDeviceGroupSubmitInfo,true,true> {
    VkDeviceGroupSubmitInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceGroupSubmitInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(waitSemaphoreCount)>("waitSemaphoreCount");
        addField<DAS_BIND_MANAGED_FIELD(pWaitSemaphoreDeviceIndices)>("pWaitSemaphoreDeviceIndices");
        addField<DAS_BIND_MANAGED_FIELD(commandBufferCount)>("commandBufferCount");
        addField<DAS_BIND_MANAGED_FIELD(pCommandBufferDeviceMasks)>("pCommandBufferDeviceMasks");
        addField<DAS_BIND_MANAGED_FIELD(signalSemaphoreCount)>("signalSemaphoreCount");
        addField<DAS_BIND_MANAGED_FIELD(pSignalSemaphoreDeviceIndices)>("pSignalSemaphoreDeviceIndices");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDeviceGroupBindSparseInfo, VkDeviceGroupBindSparseInfo);

struct VkDeviceGroupBindSparseInfoAnnotation
: public ManagedStructureAnnotation<VkDeviceGroupBindSparseInfo,true,true> {
    VkDeviceGroupBindSparseInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceGroupBindSparseInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(resourceDeviceIndex)>("resourceDeviceIndex");
        addField<DAS_BIND_MANAGED_FIELD(memoryDeviceIndex)>("memoryDeviceIndex");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkBindBufferMemoryDeviceGroupInfo, VkBindBufferMemoryDeviceGroupInfo);

struct VkBindBufferMemoryDeviceGroupInfoAnnotation
: public ManagedStructureAnnotation<VkBindBufferMemoryDeviceGroupInfo,true,true> {
    VkBindBufferMemoryDeviceGroupInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindBufferMemoryDeviceGroupInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(deviceIndexCount)>("deviceIndexCount");
        addField<DAS_BIND_MANAGED_FIELD(pDeviceIndices)>("pDeviceIndices");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkBindImageMemoryDeviceGroupInfo, VkBindImageMemoryDeviceGroupInfo);

struct VkBindImageMemoryDeviceGroupInfoAnnotation
: public ManagedStructureAnnotation<VkBindImageMemoryDeviceGroupInfo,true,true> {
    VkBindImageMemoryDeviceGroupInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindImageMemoryDeviceGroupInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(deviceIndexCount)>("deviceIndexCount");
        addField<DAS_BIND_MANAGED_FIELD(pDeviceIndices)>("pDeviceIndices");
        addField<DAS_BIND_MANAGED_FIELD(splitInstanceBindRegionCount)>("splitInstanceBindRegionCount");
        addField<DAS_BIND_MANAGED_FIELD(pSplitInstanceBindRegions)>("pSplitInstanceBindRegions");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceGroupProperties, VkPhysicalDeviceGroupProperties);

struct VkPhysicalDeviceGroupPropertiesAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceGroupProperties,true,true> {
    VkPhysicalDeviceGroupPropertiesAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceGroupProperties", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(physicalDeviceCount)>("physicalDeviceCount");
        addField<DAS_BIND_MANAGED_FIELD(physicalDevices)>("physicalDevices");
        addField<DAS_BIND_MANAGED_FIELD(subsetAllocation)>("subsetAllocation");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDeviceGroupDeviceCreateInfo, VkDeviceGroupDeviceCreateInfo);

struct VkDeviceGroupDeviceCreateInfoAnnotation
: public ManagedStructureAnnotation<VkDeviceGroupDeviceCreateInfo,true,true> {
    VkDeviceGroupDeviceCreateInfoAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceGroupDeviceCreateInfo", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(physicalDeviceCount)>("physicalDeviceCount");
        addField<DAS_BIND_MANAGED_FIELD(pPhysicalDevices)>("pPhysicalDevices");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkBufferMemoryRequirementsInfo2, VkBufferMemoryRequirementsInfo2);

struct VkBufferMemoryRequirementsInfo2Annotation
: public ManagedStructureAnnotation<VkBufferMemoryRequirementsInfo2,true,true> {
    VkBufferMemoryRequirementsInfo2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBufferMemoryRequirementsInfo2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(buffer)>("buffer");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImageMemoryRequirementsInfo2, VkImageMemoryRequirementsInfo2);

struct VkImageMemoryRequirementsInfo2Annotation
: public ManagedStructureAnnotation<VkImageMemoryRequirementsInfo2,true,true> {
    VkImageMemoryRequirementsInfo2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageMemoryRequirementsInfo2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(image)>("image");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImageSparseMemoryRequirementsInfo2, VkImageSparseMemoryRequirementsInfo2);

struct VkImageSparseMemoryRequirementsInfo2Annotation
: public ManagedStructureAnnotation<VkImageSparseMemoryRequirementsInfo2,true,true> {
    VkImageSparseMemoryRequirementsInfo2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageSparseMemoryRequirementsInfo2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(image)>("image");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkMemoryRequirements2, VkMemoryRequirements2);

struct VkMemoryRequirements2Annotation
: public ManagedStructureAnnotation<VkMemoryRequirements2,true,true> {
    VkMemoryRequirements2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryRequirements2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(memoryRequirements)>("memoryRequirements");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkSparseImageMemoryRequirements2, VkSparseImageMemoryRequirements2);

struct VkSparseImageMemoryRequirements2Annotation
: public ManagedStructureAnnotation<VkSparseImageMemoryRequirements2,true,true> {
    VkSparseImageMemoryRequirements2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSparseImageMemoryRequirements2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(memoryRequirements)>("memoryRequirements");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFeatures2, VkPhysicalDeviceFeatures2);

struct VkPhysicalDeviceFeatures2Annotation
: public ManagedStructureAnnotation<VkPhysicalDeviceFeatures2,true,true> {
    VkPhysicalDeviceFeatures2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceFeatures2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(features)>("features");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceProperties2, VkPhysicalDeviceProperties2);

struct VkPhysicalDeviceProperties2Annotation
: public ManagedStructureAnnotation<VkPhysicalDeviceProperties2,true,true> {
    VkPhysicalDeviceProperties2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceProperties2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(properties)>("properties");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkFormatProperties2, VkFormatProperties2);

struct VkFormatProperties2Annotation
: public ManagedStructureAnnotation<VkFormatProperties2,true,true> {
    VkFormatProperties2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkFormatProperties2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(formatProperties)>("formatProperties");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImageFormatProperties2, VkImageFormatProperties2);

struct VkImageFormatProperties2Annotation
: public ManagedStructureAnnotation<VkImageFormatProperties2,true,true> {
    VkImageFormatProperties2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageFormatProperties2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(imageFormatProperties)>("imageFormatProperties");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceImageFormatInfo2, VkPhysicalDeviceImageFormatInfo2);

struct VkPhysicalDeviceImageFormatInfo2Annotation
: public ManagedStructureAnnotation<VkPhysicalDeviceImageFormatInfo2,true,true> {
    VkPhysicalDeviceImageFormatInfo2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceImageFormatInfo2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(format)>("format");
        addField<DAS_BIND_MANAGED_FIELD(type)>("type_");
        addField<DAS_BIND_MANAGED_FIELD(tiling)>("tiling");
        addField<DAS_BIND_MANAGED_FIELD(usage)>("usage");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkQueueFamilyProperties2, VkQueueFamilyProperties2);

struct VkQueueFamilyProperties2Annotation
: public ManagedStructureAnnotation<VkQueueFamilyProperties2,true,true> {
    VkQueueFamilyProperties2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkQueueFamilyProperties2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(queueFamilyProperties)>("queueFamilyProperties");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceMemoryProperties2, VkPhysicalDeviceMemoryProperties2);

struct VkPhysicalDeviceMemoryProperties2Annotation
: public ManagedStructureAnnotation<VkPhysicalDeviceMemoryProperties2,true,true> {
    VkPhysicalDeviceMemoryProperties2Annotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceMemoryProperties2", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(memoryProperties)>("memoryProperties");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

void addVulkanGenerated_3(Module & module, ModuleLibrary & lib) {{

    //
    // enums
    //

    module.addEnumeration(make_smart<EnumerationVkPipelineBindPoint>());
    module.addEnumeration(make_smart<EnumerationVkCommandBufferLevel>());
    module.addEnumeration(make_smart<EnumerationVkIndexType>());
    module.addEnumeration(make_smart<EnumerationVkSubpassContents>());
    module.addEnumeration(make_smart<EnumerationVkAccessFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkImageAspectFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkFormatFeatureFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkImageCreateFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkSampleCountFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkImageUsageFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkMemoryHeapFlagBits>());

    //
    // opaque structs
    //

    addAnnotation(make_smart<VkHandleAnnotation<VkFence>>("VkFence", "VkFence"));
    addAnnotation(make_smart<VkHandleAnnotation<VkDeviceMemory>>("VkDeviceMemory", "VkDeviceMemory"));

    //
    // structs
    //

    addAnnotation(make_smart<VkClearValueAnnotation>(lib));
    addAnnotation(make_smart<VkClearAttachmentAnnotation>(lib));
    addAnnotation(make_smart<VkClearRectAnnotation>(lib));
    addAnnotation(make_smart<VkImageBlitAnnotation>(lib));
    addAnnotation(make_smart<VkImageCopyAnnotation>(lib));
    addAnnotation(make_smart<VkImageResolveAnnotation>(lib));
    addAnnotation(make_smart<VkRenderPassBeginInfoAnnotation>(lib));
    addAnnotation(make_smart<VkPhysicalDeviceSubgroupPropertiesAnnotation>(lib));
    addAnnotation(make_smart<VkBindBufferMemoryInfoAnnotation>(lib));
    addAnnotation(make_smart<VkBindImageMemoryInfoAnnotation>(lib));
    addAnnotation(make_smart<VkPhysicalDevice16BitStorageFeaturesAnnotation>(lib));
    addAnnotation(make_smart<VkMemoryDedicatedRequirementsAnnotation>(lib));
    addAnnotation(make_smart<VkMemoryDedicatedAllocateInfoAnnotation>(lib));
    addAnnotation(make_smart<VkMemoryAllocateFlagsInfoAnnotation>(lib));
    addAnnotation(make_smart<VkDeviceGroupRenderPassBeginInfoAnnotation>(lib));
    addAnnotation(make_smart<VkDeviceGroupCommandBufferBeginInfoAnnotation>(lib));
    addAnnotation(make_smart<VkDeviceGroupSubmitInfoAnnotation>(lib));
    addAnnotation(make_smart<VkDeviceGroupBindSparseInfoAnnotation>(lib));
    addAnnotation(make_smart<VkBindBufferMemoryDeviceGroupInfoAnnotation>(lib));
    addAnnotation(make_smart<VkBindImageMemoryDeviceGroupInfoAnnotation>(lib));
    addAnnotation(make_smart<VkPhysicalDeviceGroupPropertiesAnnotation>(lib));
    addAnnotation(make_smart<VkDeviceGroupDeviceCreateInfoAnnotation>(lib));
    addAnnotation(make_smart<VkBufferMemoryRequirementsInfo2Annotation>(lib));
    addAnnotation(make_smart<VkImageMemoryRequirementsInfo2Annotation>(lib));
    addAnnotation(make_smart<VkImageSparseMemoryRequirementsInfo2Annotation>(lib));
    addAnnotation(make_smart<VkMemoryRequirements2Annotation>(lib));
    addAnnotation(make_smart<VkSparseImageMemoryRequirements2Annotation>(lib));
    addAnnotation(make_smart<VkPhysicalDeviceFeatures2Annotation>(lib));
    addAnnotation(make_smart<VkPhysicalDeviceProperties2Annotation>(lib));
    addAnnotation(make_smart<VkFormatProperties2Annotation>(lib));
    addAnnotation(make_smart<VkImageFormatProperties2Annotation>(lib));
    addAnnotation(make_smart<VkPhysicalDeviceImageFormatInfo2Annotation>(lib));
    addAnnotation(make_smart<VkQueueFamilyProperties2Annotation>(lib));
    addAnnotation(make_smart<VkPhysicalDeviceMemoryProperties2Annotation>(lib));

    //
    // functions
    //

    addExtern<DAS_BIND_FUN(vkCreateImage)>(*this, lib, "vkCreateImage",
        SideEffects::worstDefault, "vkCreateImage");
    addExtern<DAS_BIND_FUN(vkDestroyImage)>(*this, lib, "vkDestroyImage",
        SideEffects::worstDefault, "vkDestroyImage");
    addExtern<DAS_BIND_FUN(vkGetImageSubresourceLayout)>(*this, lib, "vkGetImageSubresourceLayout",
        SideEffects::worstDefault, "vkGetImageSubresourceLayout");
    addExtern<DAS_BIND_FUN(vkCreateImageView)>(*this, lib, "vkCreateImageView",
        SideEffects::worstDefault, "vkCreateImageView");
    addExtern<DAS_BIND_FUN(vkDestroyImageView)>(*this, lib, "vkDestroyImageView",
        SideEffects::worstDefault, "vkDestroyImageView");
    addExtern<DAS_BIND_FUN(vkCreateShaderModule)>(*this, lib, "vkCreateShaderModule",
        SideEffects::worstDefault, "vkCreateShaderModule");
    addExtern<DAS_BIND_FUN(vkDestroyShaderModule)>(*this, lib, "vkDestroyShaderModule",
        SideEffects::worstDefault, "vkDestroyShaderModule");
    addExtern<DAS_BIND_FUN(vkCreatePipelineCache)>(*this, lib, "vkCreatePipelineCache",
        SideEffects::worstDefault, "vkCreatePipelineCache");
    addExtern<DAS_BIND_FUN(vkDestroyPipelineCache)>(*this, lib, "vkDestroyPipelineCache",
        SideEffects::worstDefault, "vkDestroyPipelineCache");
    addExtern<DAS_BIND_FUN(vkGetPipelineCacheData)>(*this, lib, "vkGetPipelineCacheData",
        SideEffects::worstDefault, "vkGetPipelineCacheData");
    addExtern<DAS_BIND_FUN(vkMergePipelineCaches)>(*this, lib, "vkMergePipelineCaches",
        SideEffects::worstDefault, "vkMergePipelineCaches");
    addExtern<DAS_BIND_FUN(vkCreateGraphicsPipelines)>(*this, lib, "vkCreateGraphicsPipelines",
        SideEffects::worstDefault, "vkCreateGraphicsPipelines");
    addExtern<DAS_BIND_FUN(vkCreateComputePipelines)>(*this, lib, "vkCreateComputePipelines",
        SideEffects::worstDefault, "vkCreateComputePipelines");
    addExtern<DAS_BIND_FUN(vkDestroyPipeline)>(*this, lib, "vkDestroyPipeline",
        SideEffects::worstDefault, "vkDestroyPipeline");
    addExtern<DAS_BIND_FUN(vkCreatePipelineLayout)>(*this, lib, "vkCreatePipelineLayout",
        SideEffects::worstDefault, "vkCreatePipelineLayout");
    addExtern<DAS_BIND_FUN(vkDestroyPipelineLayout)>(*this, lib, "vkDestroyPipelineLayout",
        SideEffects::worstDefault, "vkDestroyPipelineLayout");
    addExtern<DAS_BIND_FUN(vkCreateSampler)>(*this, lib, "vkCreateSampler",
        SideEffects::worstDefault, "vkCreateSampler");
    addExtern<DAS_BIND_FUN(vkDestroySampler)>(*this, lib, "vkDestroySampler",
        SideEffects::worstDefault, "vkDestroySampler");

    //
    // macro constants
    //

    addConstant(*this,"GLFW_KEY_RIGHT_ALT",346);
    addConstant(*this,"GLFW_KEY_RIGHT_SUPER",347);
    addConstant(*this,"GLFW_KEY_MENU",348);
    addConstant(*this,"GLFW_KEY_LAST",GLFW_KEY_MENU);
    addConstant(*this,"GLFW_MOD_SHIFT",0x0001);
    addConstant(*this,"GLFW_MOD_CONTROL",0x0002);
    addConstant(*this,"GLFW_MOD_ALT",0x0004);
    addConstant(*this,"GLFW_MOD_SUPER",0x0008);
    addConstant(*this,"GLFW_MOD_CAPS_LOCK",0x0010);
    addConstant(*this,"GLFW_MOD_NUM_LOCK",0x0020);
    addConstant(*this,"GLFW_MOUSE_BUTTON_1",0);
    addConstant(*this,"GLFW_MOUSE_BUTTON_2",1);
    addConstant(*this,"GLFW_MOUSE_BUTTON_3",2);
    addConstant(*this,"GLFW_MOUSE_BUTTON_4",3);
    addConstant(*this,"GLFW_MOUSE_BUTTON_5",4);
    addConstant(*this,"GLFW_MOUSE_BUTTON_6",5);
    addConstant(*this,"GLFW_MOUSE_BUTTON_7",6);
    addConstant(*this,"GLFW_MOUSE_BUTTON_8",7);
    addConstant(*this,"GLFW_MOUSE_BUTTON_LAST",GLFW_MOUSE_BUTTON_8);
    addConstant(*this,"GLFW_MOUSE_BUTTON_LEFT",GLFW_MOUSE_BUTTON_1);
    addConstant(*this,"GLFW_MOUSE_BUTTON_RIGHT",GLFW_MOUSE_BUTTON_2);
    addConstant(*this,"GLFW_MOUSE_BUTTON_MIDDLE",GLFW_MOUSE_BUTTON_3);
    addConstant(*this,"GLFW_JOYSTICK_1",0);
    addConstant(*this,"GLFW_JOYSTICK_2",1);
    addConstant(*this,"GLFW_JOYSTICK_3",2);
    addConstant(*this,"GLFW_JOYSTICK_4",3);
    addConstant(*this,"GLFW_JOYSTICK_5",4);
    addConstant(*this,"GLFW_JOYSTICK_6",5);
    addConstant(*this,"GLFW_JOYSTICK_7",6);
    addConstant(*this,"GLFW_JOYSTICK_8",7);
    addConstant(*this,"GLFW_JOYSTICK_9",8);
    addConstant(*this,"GLFW_JOYSTICK_10",9);
    addConstant(*this,"GLFW_JOYSTICK_11",10);
    addConstant(*this,"GLFW_JOYSTICK_12",11);
    addConstant(*this,"GLFW_JOYSTICK_13",12);
    addConstant(*this,"GLFW_JOYSTICK_14",13);
    addConstant(*this,"GLFW_JOYSTICK_15",14);
    addConstant(*this,"GLFW_JOYSTICK_16",15);
    addConstant(*this,"GLFW_JOYSTICK_LAST",GLFW_JOYSTICK_16);
    addConstant(*this,"GLFW_GAMEPAD_BUTTON_A",0);
    addConstant(*this,"GLFW_GAMEPAD_BUTTON_B",1);
    addConstant(*this,"GLFW_GAMEPAD_BUTTON_X",2);
    addConstant(*this,"GLFW_GAMEPAD_BUTTON_Y",3);
    addConstant(*this,"GLFW_GAMEPAD_BUTTON_LEFT_BUMPER",4);
    addConstant(*this,"GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER",5);
    addConstant(*this,"GLFW_GAMEPAD_BUTTON_BACK",6);
};
