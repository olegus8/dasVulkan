// generated by dasVulkan for Vulkan 1.2.162
#include "..\include\dasVulkan\module.h"

using namespace das;

#if defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4100)   // unreferenced formal parameter
#endif
#if defined(__GNUC__) && !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#endif
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
#endif

//
// opaque structs
//

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkSampler, VkSampler)
IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDescriptorSet, VkDescriptorSet)

//
// structs
//


IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayModeProperties2KHR, VkDisplayModeProperties2KHR);

struct VkDisplayModeProperties2KHRAnnotation
: public ManagedStructureAnnotation<VkDisplayModeProperties2KHR,true,true> {
    VkDisplayModeProperties2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayModeProperties2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(displayModeProperties)>("displayModeProperties");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayPlaneInfo2KHR, VkDisplayPlaneInfo2KHR);

struct VkDisplayPlaneInfo2KHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPlaneInfo2KHR,true,true> {
    VkDisplayPlaneInfo2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPlaneInfo2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(mode)>("mode");
        addField<DAS_BIND_MANAGED_FIELD(planeIndex)>("planeIndex");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayPlaneCapabilities2KHR, VkDisplayPlaneCapabilities2KHR);

struct VkDisplayPlaneCapabilities2KHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPlaneCapabilities2KHR,true,true> {
    VkDisplayPlaneCapabilities2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPlaneCapabilities2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(capabilities)>("capabilities");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderClockFeaturesKHR, VkPhysicalDeviceShaderClockFeaturesKHR);

struct VkPhysicalDeviceShaderClockFeaturesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderClockFeaturesKHR,true,true> {
    VkPhysicalDeviceShaderClockFeaturesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderClockFeaturesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(shaderSubgroupClock)>("shaderSubgroupClock");
        addField<DAS_BIND_MANAGED_FIELD(shaderDeviceClock)>("shaderDeviceClock");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR, VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR);

struct VkPhysicalDeviceShaderTerminateInvocationFeaturesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR,true,true> {
    VkPhysicalDeviceShaderTerminateInvocationFeaturesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(shaderTerminateInvocation)>("shaderTerminateInvocation");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkFragmentShadingRateAttachmentInfoKHR, VkFragmentShadingRateAttachmentInfoKHR);

struct VkFragmentShadingRateAttachmentInfoKHRAnnotation
: public ManagedStructureAnnotation<VkFragmentShadingRateAttachmentInfoKHR,true,true> {
    VkFragmentShadingRateAttachmentInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkFragmentShadingRateAttachmentInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(pFragmentShadingRateAttachment)>("pFragmentShadingRateAttachment");
        addField<DAS_BIND_MANAGED_FIELD(shadingRateAttachmentTexelSize)>("shadingRateAttachmentTexelSize");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPipelineFragmentShadingRateStateCreateInfoKHR, VkPipelineFragmentShadingRateStateCreateInfoKHR);

struct VkPipelineFragmentShadingRateStateCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkPipelineFragmentShadingRateStateCreateInfoKHR,true,true> {
    VkPipelineFragmentShadingRateStateCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineFragmentShadingRateStateCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(fragmentSize)>("fragmentSize");
        addField<DAS_BIND_MANAGED_FIELD(combinerOps)>("combinerOps");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, VkPhysicalDeviceFragmentShadingRateFeaturesKHR);

struct VkPhysicalDeviceFragmentShadingRateFeaturesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceFragmentShadingRateFeaturesKHR,true,true> {
    VkPhysicalDeviceFragmentShadingRateFeaturesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceFragmentShadingRateFeaturesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(pipelineFragmentShadingRate)>("pipelineFragmentShadingRate");
        addField<DAS_BIND_MANAGED_FIELD(primitiveFragmentShadingRate)>("primitiveFragmentShadingRate");
        addField<DAS_BIND_MANAGED_FIELD(attachmentFragmentShadingRate)>("attachmentFragmentShadingRate");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, VkPhysicalDeviceFragmentShadingRatePropertiesKHR);

struct VkPhysicalDeviceFragmentShadingRatePropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceFragmentShadingRatePropertiesKHR,true,true> {
    VkPhysicalDeviceFragmentShadingRatePropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceFragmentShadingRatePropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(minFragmentShadingRateAttachmentTexelSize)>("minFragmentShadingRateAttachmentTexelSize");
        addField<DAS_BIND_MANAGED_FIELD(maxFragmentShadingRateAttachmentTexelSize)>("maxFragmentShadingRateAttachmentTexelSize");
        addField<DAS_BIND_MANAGED_FIELD(maxFragmentShadingRateAttachmentTexelSizeAspectRatio)>("maxFragmentShadingRateAttachmentTexelSizeAspectRatio");
        addField<DAS_BIND_MANAGED_FIELD(primitiveFragmentShadingRateWithMultipleViewports)>("primitiveFragmentShadingRateWithMultipleViewports");
        addField<DAS_BIND_MANAGED_FIELD(layeredShadingRateAttachments)>("layeredShadingRateAttachments");
        addField<DAS_BIND_MANAGED_FIELD(fragmentShadingRateNonTrivialCombinerOps)>("fragmentShadingRateNonTrivialCombinerOps");
        addField<DAS_BIND_MANAGED_FIELD(maxFragmentSize)>("maxFragmentSize");
        addField<DAS_BIND_MANAGED_FIELD(maxFragmentSizeAspectRatio)>("maxFragmentSizeAspectRatio");
        addField<DAS_BIND_MANAGED_FIELD(maxFragmentShadingRateCoverageSamples)>("maxFragmentShadingRateCoverageSamples");
        addField<DAS_BIND_MANAGED_FIELD(maxFragmentShadingRateRasterizationSamples)>("maxFragmentShadingRateRasterizationSamples");
        addField<DAS_BIND_MANAGED_FIELD(fragmentShadingRateWithShaderDepthStencilWrites)>("fragmentShadingRateWithShaderDepthStencilWrites");
        addField<DAS_BIND_MANAGED_FIELD(fragmentShadingRateWithSampleMask)>("fragmentShadingRateWithSampleMask");
        addField<DAS_BIND_MANAGED_FIELD(fragmentShadingRateWithShaderSampleMask)>("fragmentShadingRateWithShaderSampleMask");
        addField<DAS_BIND_MANAGED_FIELD(fragmentShadingRateWithConservativeRasterization)>("fragmentShadingRateWithConservativeRasterization");
        addField<DAS_BIND_MANAGED_FIELD(fragmentShadingRateWithFragmentShaderInterlock)>("fragmentShadingRateWithFragmentShaderInterlock");
        addField<DAS_BIND_MANAGED_FIELD(fragmentShadingRateWithCustomSampleLocations)>("fragmentShadingRateWithCustomSampleLocations");
        addField<DAS_BIND_MANAGED_FIELD(fragmentShadingRateStrictMultiplyCombiner)>("fragmentShadingRateStrictMultiplyCombiner");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFragmentShadingRateKHR, VkPhysicalDeviceFragmentShadingRateKHR);

struct VkPhysicalDeviceFragmentShadingRateKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceFragmentShadingRateKHR,true,true> {
    VkPhysicalDeviceFragmentShadingRateKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceFragmentShadingRateKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(sampleCounts)>("sampleCounts");
        addField<DAS_BIND_MANAGED_FIELD(fragmentSize)>("fragmentSize");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkSurfaceProtectedCapabilitiesKHR, VkSurfaceProtectedCapabilitiesKHR);

struct VkSurfaceProtectedCapabilitiesKHRAnnotation
: public ManagedStructureAnnotation<VkSurfaceProtectedCapabilitiesKHR,true,true> {
    VkSurfaceProtectedCapabilitiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSurfaceProtectedCapabilitiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(supportsProtected)>("supportsProtected");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR, VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR);

struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR,true,true> {
    VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(pipelineExecutableInfo)>("pipelineExecutableInfo");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPipelineInfoKHR, VkPipelineInfoKHR);

struct VkPipelineInfoKHRAnnotation
: public ManagedStructureAnnotation<VkPipelineInfoKHR,true,true> {
    VkPipelineInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(pipeline)>("pipeline");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPipelineExecutablePropertiesKHR, VkPipelineExecutablePropertiesKHR);

struct VkPipelineExecutablePropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkPipelineExecutablePropertiesKHR,true,true> {
    VkPipelineExecutablePropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineExecutablePropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(stages)>("stages");
        addField<DAS_BIND_MANAGED_FIELD(name)>("name");
        addField<DAS_BIND_MANAGED_FIELD(description)>("description");
        addField<DAS_BIND_MANAGED_FIELD(subgroupSize)>("subgroupSize");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPipelineExecutableInfoKHR, VkPipelineExecutableInfoKHR);

struct VkPipelineExecutableInfoKHRAnnotation
: public ManagedStructureAnnotation<VkPipelineExecutableInfoKHR,true,true> {
    VkPipelineExecutableInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineExecutableInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(pipeline)>("pipeline");
        addField<DAS_BIND_MANAGED_FIELD(executableIndex)>("executableIndex");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPipelineExecutableStatisticValueKHR, VkPipelineExecutableStatisticValueKHR);

struct VkPipelineExecutableStatisticValueKHRAnnotation
: public ManagedStructureAnnotation<VkPipelineExecutableStatisticValueKHR,true,true> {
    VkPipelineExecutableStatisticValueKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineExecutableStatisticValueKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(b32)>("b32");
        addField<DAS_BIND_MANAGED_FIELD(i64)>("i64");
        addField<DAS_BIND_MANAGED_FIELD(u64)>("u64");
        addField<DAS_BIND_MANAGED_FIELD(f64)>("f64");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPipelineExecutableStatisticKHR, VkPipelineExecutableStatisticKHR);

struct VkPipelineExecutableStatisticKHRAnnotation
: public ManagedStructureAnnotation<VkPipelineExecutableStatisticKHR,true,true> {
    VkPipelineExecutableStatisticKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineExecutableStatisticKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(name)>("name");
        addField<DAS_BIND_MANAGED_FIELD(description)>("description");
        addField<DAS_BIND_MANAGED_FIELD(format)>("format");
        addField<DAS_BIND_MANAGED_FIELD(value)>("value");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPipelineExecutableInternalRepresentationKHR, VkPipelineExecutableInternalRepresentationKHR);

struct VkPipelineExecutableInternalRepresentationKHRAnnotation
: public ManagedStructureAnnotation<VkPipelineExecutableInternalRepresentationKHR,true,true> {
    VkPipelineExecutableInternalRepresentationKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineExecutableInternalRepresentationKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(name)>("name");
        addField<DAS_BIND_MANAGED_FIELD(description)>("description");
        addField<DAS_BIND_MANAGED_FIELD(isText)>("isText");
        addField<DAS_BIND_MANAGED_FIELD(dataSize)>("dataSize");
        addField<DAS_BIND_MANAGED_FIELD(pData)>("pData");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPipelineLibraryCreateInfoKHR, VkPipelineLibraryCreateInfoKHR);

struct VkPipelineLibraryCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkPipelineLibraryCreateInfoKHR,true,true> {
    VkPipelineLibraryCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineLibraryCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(libraryCount)>("libraryCount");
        addField<DAS_BIND_MANAGED_FIELD(pLibraries)>("pLibraries");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkBufferCopy2KHR, VkBufferCopy2KHR);

struct VkBufferCopy2KHRAnnotation
: public ManagedStructureAnnotation<VkBufferCopy2KHR,true,true> {
    VkBufferCopy2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBufferCopy2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(srcOffset)>("srcOffset");
        addField<DAS_BIND_MANAGED_FIELD(dstOffset)>("dstOffset");
        addField<DAS_BIND_MANAGED_FIELD(size)>("size");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkCopyBufferInfo2KHR, VkCopyBufferInfo2KHR);

struct VkCopyBufferInfo2KHRAnnotation
: public ManagedStructureAnnotation<VkCopyBufferInfo2KHR,true,true> {
    VkCopyBufferInfo2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCopyBufferInfo2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(srcBuffer)>("srcBuffer");
        addField<DAS_BIND_MANAGED_FIELD(dstBuffer)>("dstBuffer");
        addField<DAS_BIND_MANAGED_FIELD(regionCount)>("regionCount");
        addField<DAS_BIND_MANAGED_FIELD(pRegions)>("pRegions");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImageCopy2KHR, VkImageCopy2KHR);

struct VkImageCopy2KHRAnnotation
: public ManagedStructureAnnotation<VkImageCopy2KHR,true,true> {
    VkImageCopy2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageCopy2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(srcSubresource)>("srcSubresource");
        addField<DAS_BIND_MANAGED_FIELD(srcOffset)>("srcOffset");
        addField<DAS_BIND_MANAGED_FIELD(dstSubresource)>("dstSubresource");
        addField<DAS_BIND_MANAGED_FIELD(dstOffset)>("dstOffset");
        addField<DAS_BIND_MANAGED_FIELD(extent)>("extent");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkCopyImageInfo2KHR, VkCopyImageInfo2KHR);

struct VkCopyImageInfo2KHRAnnotation
: public ManagedStructureAnnotation<VkCopyImageInfo2KHR,true,true> {
    VkCopyImageInfo2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCopyImageInfo2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(srcImage)>("srcImage");
        addField<DAS_BIND_MANAGED_FIELD(srcImageLayout)>("srcImageLayout");
        addField<DAS_BIND_MANAGED_FIELD(dstImage)>("dstImage");
        addField<DAS_BIND_MANAGED_FIELD(dstImageLayout)>("dstImageLayout");
        addField<DAS_BIND_MANAGED_FIELD(regionCount)>("regionCount");
        addField<DAS_BIND_MANAGED_FIELD(pRegions)>("pRegions");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkBufferImageCopy2KHR, VkBufferImageCopy2KHR);

struct VkBufferImageCopy2KHRAnnotation
: public ManagedStructureAnnotation<VkBufferImageCopy2KHR,true,true> {
    VkBufferImageCopy2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBufferImageCopy2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(bufferOffset)>("bufferOffset");
        addField<DAS_BIND_MANAGED_FIELD(bufferRowLength)>("bufferRowLength");
        addField<DAS_BIND_MANAGED_FIELD(bufferImageHeight)>("bufferImageHeight");
        addField<DAS_BIND_MANAGED_FIELD(imageSubresource)>("imageSubresource");
        addField<DAS_BIND_MANAGED_FIELD(imageOffset)>("imageOffset");
        addField<DAS_BIND_MANAGED_FIELD(imageExtent)>("imageExtent");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkCopyBufferToImageInfo2KHR, VkCopyBufferToImageInfo2KHR);

struct VkCopyBufferToImageInfo2KHRAnnotation
: public ManagedStructureAnnotation<VkCopyBufferToImageInfo2KHR,true,true> {
    VkCopyBufferToImageInfo2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCopyBufferToImageInfo2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(srcBuffer)>("srcBuffer");
        addField<DAS_BIND_MANAGED_FIELD(dstImage)>("dstImage");
        addField<DAS_BIND_MANAGED_FIELD(dstImageLayout)>("dstImageLayout");
        addField<DAS_BIND_MANAGED_FIELD(regionCount)>("regionCount");
        addField<DAS_BIND_MANAGED_FIELD(pRegions)>("pRegions");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkCopyImageToBufferInfo2KHR, VkCopyImageToBufferInfo2KHR);

struct VkCopyImageToBufferInfo2KHRAnnotation
: public ManagedStructureAnnotation<VkCopyImageToBufferInfo2KHR,true,true> {
    VkCopyImageToBufferInfo2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCopyImageToBufferInfo2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(srcImage)>("srcImage");
        addField<DAS_BIND_MANAGED_FIELD(srcImageLayout)>("srcImageLayout");
        addField<DAS_BIND_MANAGED_FIELD(dstBuffer)>("dstBuffer");
        addField<DAS_BIND_MANAGED_FIELD(regionCount)>("regionCount");
        addField<DAS_BIND_MANAGED_FIELD(pRegions)>("pRegions");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImageBlit2KHR, VkImageBlit2KHR);

struct VkImageBlit2KHRAnnotation
: public ManagedStructureAnnotation<VkImageBlit2KHR,true,true> {
    VkImageBlit2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageBlit2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(srcSubresource)>("srcSubresource");
        addField<DAS_BIND_MANAGED_FIELD(srcOffsets)>("srcOffsets");
        addField<DAS_BIND_MANAGED_FIELD(dstSubresource)>("dstSubresource");
        addField<DAS_BIND_MANAGED_FIELD(dstOffsets)>("dstOffsets");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkBlitImageInfo2KHR, VkBlitImageInfo2KHR);

struct VkBlitImageInfo2KHRAnnotation
: public ManagedStructureAnnotation<VkBlitImageInfo2KHR,true,true> {
    VkBlitImageInfo2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBlitImageInfo2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(srcImage)>("srcImage");
        addField<DAS_BIND_MANAGED_FIELD(srcImageLayout)>("srcImageLayout");
        addField<DAS_BIND_MANAGED_FIELD(dstImage)>("dstImage");
        addField<DAS_BIND_MANAGED_FIELD(dstImageLayout)>("dstImageLayout");
        addField<DAS_BIND_MANAGED_FIELD(regionCount)>("regionCount");
        addField<DAS_BIND_MANAGED_FIELD(pRegions)>("pRegions");
        addField<DAS_BIND_MANAGED_FIELD(filter)>("filter");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImageResolve2KHR, VkImageResolve2KHR);

struct VkImageResolve2KHRAnnotation
: public ManagedStructureAnnotation<VkImageResolve2KHR,true,true> {
    VkImageResolve2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageResolve2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(srcSubresource)>("srcSubresource");
        addField<DAS_BIND_MANAGED_FIELD(srcOffset)>("srcOffset");
        addField<DAS_BIND_MANAGED_FIELD(dstSubresource)>("dstSubresource");
        addField<DAS_BIND_MANAGED_FIELD(dstOffset)>("dstOffset");
        addField<DAS_BIND_MANAGED_FIELD(extent)>("extent");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkResolveImageInfo2KHR, VkResolveImageInfo2KHR);

struct VkResolveImageInfo2KHRAnnotation
: public ManagedStructureAnnotation<VkResolveImageInfo2KHR,true,true> {
    VkResolveImageInfo2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkResolveImageInfo2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(srcImage)>("srcImage");
        addField<DAS_BIND_MANAGED_FIELD(srcImageLayout)>("srcImageLayout");
        addField<DAS_BIND_MANAGED_FIELD(dstImage)>("dstImage");
        addField<DAS_BIND_MANAGED_FIELD(dstImageLayout)>("dstImageLayout");
        addField<DAS_BIND_MANAGED_FIELD(regionCount)>("regionCount");
        addField<DAS_BIND_MANAGED_FIELD(pRegions)>("pRegions");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDebugReportCallbackCreateInfoEXT, VkDebugReportCallbackCreateInfoEXT);

struct VkDebugReportCallbackCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDebugReportCallbackCreateInfoEXT,true,true> {
    VkDebugReportCallbackCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDebugReportCallbackCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(pUserData)>("pUserData");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPipelineRasterizationStateRasterizationOrderAMD, VkPipelineRasterizationStateRasterizationOrderAMD);

struct VkPipelineRasterizationStateRasterizationOrderAMDAnnotation
: public ManagedStructureAnnotation<VkPipelineRasterizationStateRasterizationOrderAMD,true,true> {
    VkPipelineRasterizationStateRasterizationOrderAMDAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineRasterizationStateRasterizationOrderAMD", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(rasterizationOrder)>("rasterizationOrder");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDebugMarkerObjectNameInfoEXT, VkDebugMarkerObjectNameInfoEXT);

struct VkDebugMarkerObjectNameInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDebugMarkerObjectNameInfoEXT,true,true> {
    VkDebugMarkerObjectNameInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDebugMarkerObjectNameInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(objectType)>("objectType");
        addField<DAS_BIND_MANAGED_FIELD(object)>("object");
        addField<DAS_BIND_MANAGED_FIELD(pObjectName)>("pObjectName");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDebugMarkerObjectTagInfoEXT, VkDebugMarkerObjectTagInfoEXT);

struct VkDebugMarkerObjectTagInfoEXTAnnotation
: public ManagedStructureAnnotation<VkDebugMarkerObjectTagInfoEXT,true,true> {
    VkDebugMarkerObjectTagInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDebugMarkerObjectTagInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(objectType)>("objectType");
        addField<DAS_BIND_MANAGED_FIELD(object)>("object");
        addField<DAS_BIND_MANAGED_FIELD(tagName)>("tagName");
        addField<DAS_BIND_MANAGED_FIELD(tagSize)>("tagSize");
        addField<DAS_BIND_MANAGED_FIELD(pTag)>("pTag");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

void addVulkanGeneratedEnums_8(Module & module, ModuleLibrary & lib) {
    module.addEnumeration(make_smart<EnumerationVkExternalFenceHandleTypeFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkExternalFenceFeatureFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkFenceImportFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkSemaphoreImportFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkExternalSemaphoreHandleTypeFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkExternalSemaphoreFeatureFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkDriverId>());
    module.addEnumeration(make_smart<EnumerationVkShaderFloatControlsIndependence>());
    module.addEnumeration(make_smart<EnumerationVkSamplerReductionMode>());
    module.addEnumeration(make_smart<EnumerationVkSemaphoreType>());
    module.addEnumeration(make_smart<EnumerationVkResolveModeFlagBits>());
}

void addVulkanGeneratedOpaqueStructs_8(Module & module, ModuleLibrary & lib) {
    module.addAnnotation(make_smart<VkHandleAnnotation<VkSampler>>("VkSampler", "VkSampler"));
    module.addAnnotation(make_smart<VkHandleAnnotation<VkDescriptorSet>>("VkDescriptorSet", "VkDescriptorSet"));
}

void addVulkanGeneratedStructs_8(Module & module, ModuleLibrary & lib) {
    module.addAnnotation(make_smart<VkDisplayModeProperties2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayPlaneInfo2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayPlaneCapabilities2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDeviceShaderClockFeaturesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDeviceShaderTerminateInvocationFeaturesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkFragmentShadingRateAttachmentInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPipelineFragmentShadingRateStateCreateInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDeviceFragmentShadingRateFeaturesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDeviceFragmentShadingRatePropertiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDeviceFragmentShadingRateKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkSurfaceProtectedCapabilitiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPipelineInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPipelineExecutablePropertiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPipelineExecutableInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPipelineExecutableStatisticValueKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPipelineExecutableStatisticKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPipelineExecutableInternalRepresentationKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPipelineLibraryCreateInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkBufferCopy2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkCopyBufferInfo2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkImageCopy2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkCopyImageInfo2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkBufferImageCopy2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkCopyBufferToImageInfo2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkCopyImageToBufferInfo2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkImageBlit2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkBlitImageInfo2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkImageResolve2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkResolveImageInfo2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDebugReportCallbackCreateInfoEXTAnnotation>(lib));
    module.addAnnotation(make_smart<VkPipelineRasterizationStateRasterizationOrderAMDAnnotation>(lib));
    module.addAnnotation(make_smart<VkDebugMarkerObjectNameInfoEXTAnnotation>(lib));
    module.addAnnotation(make_smart<VkDebugMarkerObjectTagInfoEXTAnnotation>(lib));
}

void addVulkanGeneratedFunctions_8(Module & module, ModuleLibrary & lib) {
    addExtern<DAS_BIND_FUN(vkCmdSetLineWidth)>(module, lib, "vkCmdSetLineWidth",
        SideEffects::worstDefault, "vkCmdSetLineWidth");
    addExtern<DAS_BIND_FUN(vkCmdSetDepthBias)>(module, lib, "vkCmdSetDepthBias",
        SideEffects::worstDefault, "vkCmdSetDepthBias");
    addExtern<DAS_BIND_FUN(vkCmdSetBlendConstants)>(module, lib, "vkCmdSetBlendConstants",
        SideEffects::worstDefault, "vkCmdSetBlendConstants");
    addExtern<DAS_BIND_FUN(vkCmdSetDepthBounds)>(module, lib, "vkCmdSetDepthBounds",
        SideEffects::worstDefault, "vkCmdSetDepthBounds");
    addExtern<DAS_BIND_FUN(vkCmdSetStencilCompareMask)>(module, lib, "vkCmdSetStencilCompareMask",
        SideEffects::worstDefault, "vkCmdSetStencilCompareMask");
    addExtern<DAS_BIND_FUN(vkCmdSetStencilWriteMask)>(module, lib, "vkCmdSetStencilWriteMask",
        SideEffects::worstDefault, "vkCmdSetStencilWriteMask");
    addExtern<DAS_BIND_FUN(vkCmdSetStencilReference)>(module, lib, "vkCmdSetStencilReference",
        SideEffects::worstDefault, "vkCmdSetStencilReference");
    addExtern<DAS_BIND_FUN(vkCmdBindDescriptorSets)>(module, lib, "vkCmdBindDescriptorSets",
        SideEffects::worstDefault, "vkCmdBindDescriptorSets");
    addExtern<DAS_BIND_FUN(vkCmdBindIndexBuffer)>(module, lib, "vkCmdBindIndexBuffer",
        SideEffects::worstDefault, "vkCmdBindIndexBuffer");
    addExtern<DAS_BIND_FUN(vkCmdBindVertexBuffers)>(module, lib, "vkCmdBindVertexBuffers",
        SideEffects::worstDefault, "vkCmdBindVertexBuffers");
    addExtern<DAS_BIND_FUN(vkCmdDraw)>(module, lib, "vkCmdDraw",
        SideEffects::worstDefault, "vkCmdDraw");
}

void addVulkanGeneratedConsts_8(Module & module, ModuleLibrary & lib) {
    addConstant(module, "VK_EXT_astc_decode_mode", 1);
    addConstant(module, "VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION", 1);
    addConstant(module, "VK_EXT_conditional_rendering", 1);
    addConstant(module, "VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION", 2);
    addConstant(module, "VK_NV_clip_space_w_scaling", 1);
    addConstant(module, "VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION", 1);
    addConstant(module, "VK_EXT_direct_mode_display", 1);
    addConstant(module, "VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION", 1);
    addConstant(module, "VK_EXT_display_surface_counter", 1);
    addConstant(module, "VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION", 1);
    addConstant(module, "VK_EXT_display_control", 1);
    addConstant(module, "VK_EXT_DISPLAY_CONTROL_SPEC_VERSION", 1);
    addConstant(module, "VK_GOOGLE_display_timing", 1);
    addConstant(module, "VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION", 1);
    addConstant(module, "VK_NV_sample_mask_override_coverage", 1);
    addConstant(module, "VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION", 1);
    addConstant(module, "VK_NV_geometry_shader_passthrough", 1);
    addConstant(module, "VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION", 1);
    addConstant(module, "VK_NV_viewport_array2", 1);
    addConstant(module, "VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION", 1);
    addConstant(module, "VK_NVX_multiview_per_view_attributes", 1);
    addConstant(module, "VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION", 1);
    addConstant(module, "VK_NV_viewport_swizzle", 1);
    addConstant(module, "VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION", 1);
    addConstant(module, "VK_EXT_discard_rectangles", 1);
    addConstant(module, "VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION", 1);
    addConstant(module, "VK_EXT_conservative_rasterization", 1);
}
