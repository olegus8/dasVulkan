// generated by dasVulkan for Vulkan 1.2.162
#include "..\include\dasVulkan\module.h"

using namespace das;

//
// opaque structs
//

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkSurfaceKHR, VkSurfaceKHR)
IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkSwapchainKHR, VkSwapchainKHR)
IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayKHR, VkDisplayKHR)

//
// structs
//


IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV, VkPhysicalDeviceShaderSMBuiltinsFeaturesNV);

struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV,true,true> {
    VkPhysicalDeviceShaderSMBuiltinsFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShaderSMBuiltinsFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(shaderSMBuiltins)>("shaderSMBuiltins");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDrmFormatModifierPropertiesEXT, VkDrmFormatModifierPropertiesEXT);

struct VkDrmFormatModifierPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkDrmFormatModifierPropertiesEXT,true,true> {
    VkDrmFormatModifierPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDrmFormatModifierPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(drmFormatModifier)>("drmFormatModifier");
        addField<DAS_BIND_MANAGED_FIELD(drmFormatModifierPlaneCount)>("drmFormatModifierPlaneCount");
        addField<DAS_BIND_MANAGED_FIELD(drmFormatModifierTilingFeatures)>("drmFormatModifierTilingFeatures");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDrmFormatModifierPropertiesListEXT, VkDrmFormatModifierPropertiesListEXT);

struct VkDrmFormatModifierPropertiesListEXTAnnotation
: public ManagedStructureAnnotation<VkDrmFormatModifierPropertiesListEXT,true,true> {
    VkDrmFormatModifierPropertiesListEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDrmFormatModifierPropertiesListEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(drmFormatModifierCount)>("drmFormatModifierCount");
        addField<DAS_BIND_MANAGED_FIELD(pDrmFormatModifierProperties)>("pDrmFormatModifierProperties");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, VkPhysicalDeviceImageDrmFormatModifierInfoEXT);

struct VkPhysicalDeviceImageDrmFormatModifierInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceImageDrmFormatModifierInfoEXT,true,true> {
    VkPhysicalDeviceImageDrmFormatModifierInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceImageDrmFormatModifierInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(drmFormatModifier)>("drmFormatModifier");
        addField<DAS_BIND_MANAGED_FIELD(sharingMode)>("sharingMode");
        addField<DAS_BIND_MANAGED_FIELD(queueFamilyIndexCount)>("queueFamilyIndexCount");
        addField<DAS_BIND_MANAGED_FIELD(pQueueFamilyIndices)>("pQueueFamilyIndices");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImageDrmFormatModifierListCreateInfoEXT, VkImageDrmFormatModifierListCreateInfoEXT);

struct VkImageDrmFormatModifierListCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkImageDrmFormatModifierListCreateInfoEXT,true,true> {
    VkImageDrmFormatModifierListCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageDrmFormatModifierListCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(drmFormatModifierCount)>("drmFormatModifierCount");
        addField<DAS_BIND_MANAGED_FIELD(pDrmFormatModifiers)>("pDrmFormatModifiers");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImageDrmFormatModifierExplicitCreateInfoEXT, VkImageDrmFormatModifierExplicitCreateInfoEXT);

struct VkImageDrmFormatModifierExplicitCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkImageDrmFormatModifierExplicitCreateInfoEXT,true,true> {
    VkImageDrmFormatModifierExplicitCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageDrmFormatModifierExplicitCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(drmFormatModifier)>("drmFormatModifier");
        addField<DAS_BIND_MANAGED_FIELD(drmFormatModifierPlaneCount)>("drmFormatModifierPlaneCount");
        addField<DAS_BIND_MANAGED_FIELD(pPlaneLayouts)>("pPlaneLayouts");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImageDrmFormatModifierPropertiesEXT, VkImageDrmFormatModifierPropertiesEXT);

struct VkImageDrmFormatModifierPropertiesEXTAnnotation
: public ManagedStructureAnnotation<VkImageDrmFormatModifierPropertiesEXT,true,true> {
    VkImageDrmFormatModifierPropertiesEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImageDrmFormatModifierPropertiesEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(drmFormatModifier)>("drmFormatModifier");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkValidationCacheCreateInfoEXT, VkValidationCacheCreateInfoEXT);

struct VkValidationCacheCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkValidationCacheCreateInfoEXT,true,true> {
    VkValidationCacheCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkValidationCacheCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(initialDataSize)>("initialDataSize");
        addField<DAS_BIND_MANAGED_FIELD(pInitialData)>("pInitialData");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkShaderModuleValidationCacheCreateInfoEXT, VkShaderModuleValidationCacheCreateInfoEXT);

struct VkShaderModuleValidationCacheCreateInfoEXTAnnotation
: public ManagedStructureAnnotation<VkShaderModuleValidationCacheCreateInfoEXT,true,true> {
    VkShaderModuleValidationCacheCreateInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkShaderModuleValidationCacheCreateInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(validationCache)>("validationCache");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkShadingRatePaletteNV, VkShadingRatePaletteNV);

struct VkShadingRatePaletteNVAnnotation
: public ManagedStructureAnnotation<VkShadingRatePaletteNV,true,true> {
    VkShadingRatePaletteNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkShadingRatePaletteNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(shadingRatePaletteEntryCount)>("shadingRatePaletteEntryCount");
        addField<DAS_BIND_MANAGED_FIELD(pShadingRatePaletteEntries)>("pShadingRatePaletteEntries");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPipelineViewportShadingRateImageStateCreateInfoNV, VkPipelineViewportShadingRateImageStateCreateInfoNV);

struct VkPipelineViewportShadingRateImageStateCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkPipelineViewportShadingRateImageStateCreateInfoNV,true,true> {
    VkPipelineViewportShadingRateImageStateCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineViewportShadingRateImageStateCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(shadingRateImageEnable)>("shadingRateImageEnable");
        addField<DAS_BIND_MANAGED_FIELD(viewportCount)>("viewportCount");
        addField<DAS_BIND_MANAGED_FIELD(pShadingRatePalettes)>("pShadingRatePalettes");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShadingRateImageFeaturesNV, VkPhysicalDeviceShadingRateImageFeaturesNV);

struct VkPhysicalDeviceShadingRateImageFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShadingRateImageFeaturesNV,true,true> {
    VkPhysicalDeviceShadingRateImageFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShadingRateImageFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(shadingRateImage)>("shadingRateImage");
        addField<DAS_BIND_MANAGED_FIELD(shadingRateCoarseSampleOrder)>("shadingRateCoarseSampleOrder");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShadingRateImagePropertiesNV, VkPhysicalDeviceShadingRateImagePropertiesNV);

struct VkPhysicalDeviceShadingRateImagePropertiesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceShadingRateImagePropertiesNV,true,true> {
    VkPhysicalDeviceShadingRateImagePropertiesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceShadingRateImagePropertiesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(shadingRateTexelSize)>("shadingRateTexelSize");
        addField<DAS_BIND_MANAGED_FIELD(shadingRatePaletteSize)>("shadingRatePaletteSize");
        addField<DAS_BIND_MANAGED_FIELD(shadingRateMaxCoarseSamples)>("shadingRateMaxCoarseSamples");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkCoarseSampleLocationNV, VkCoarseSampleLocationNV);

struct VkCoarseSampleLocationNVAnnotation
: public ManagedStructureAnnotation<VkCoarseSampleLocationNV,true,true> {
    VkCoarseSampleLocationNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCoarseSampleLocationNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(pixelX)>("pixelX");
        addField<DAS_BIND_MANAGED_FIELD(pixelY)>("pixelY");
        addField<DAS_BIND_MANAGED_FIELD(sample)>("sample");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkCoarseSampleOrderCustomNV, VkCoarseSampleOrderCustomNV);

struct VkCoarseSampleOrderCustomNVAnnotation
: public ManagedStructureAnnotation<VkCoarseSampleOrderCustomNV,true,true> {
    VkCoarseSampleOrderCustomNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkCoarseSampleOrderCustomNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(shadingRate)>("shadingRate");
        addField<DAS_BIND_MANAGED_FIELD(sampleCount)>("sampleCount");
        addField<DAS_BIND_MANAGED_FIELD(sampleLocationCount)>("sampleLocationCount");
        addField<DAS_BIND_MANAGED_FIELD(pSampleLocations)>("pSampleLocations");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV);

struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV,true,true> {
    VkPipelineViewportCoarseSampleOrderStateCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineViewportCoarseSampleOrderStateCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(sampleOrderType)>("sampleOrderType");
        addField<DAS_BIND_MANAGED_FIELD(customSampleOrderCount)>("customSampleOrderCount");
        addField<DAS_BIND_MANAGED_FIELD(pCustomSampleOrders)>("pCustomSampleOrders");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkRayTracingShaderGroupCreateInfoNV, VkRayTracingShaderGroupCreateInfoNV);

struct VkRayTracingShaderGroupCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkRayTracingShaderGroupCreateInfoNV,true,true> {
    VkRayTracingShaderGroupCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRayTracingShaderGroupCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(type)>("type_");
        addField<DAS_BIND_MANAGED_FIELD(generalShader)>("generalShader");
        addField<DAS_BIND_MANAGED_FIELD(closestHitShader)>("closestHitShader");
        addField<DAS_BIND_MANAGED_FIELD(anyHitShader)>("anyHitShader");
        addField<DAS_BIND_MANAGED_FIELD(intersectionShader)>("intersectionShader");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkRayTracingPipelineCreateInfoNV, VkRayTracingPipelineCreateInfoNV);

struct VkRayTracingPipelineCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkRayTracingPipelineCreateInfoNV,true,true> {
    VkRayTracingPipelineCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRayTracingPipelineCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(stageCount)>("stageCount");
        addField<DAS_BIND_MANAGED_FIELD(pStages)>("pStages");
        addField<DAS_BIND_MANAGED_FIELD(groupCount)>("groupCount");
        addField<DAS_BIND_MANAGED_FIELD(pGroups)>("pGroups");
        addField<DAS_BIND_MANAGED_FIELD(maxRecursionDepth)>("maxRecursionDepth");
        addField<DAS_BIND_MANAGED_FIELD(layout)>("layout");
        addField<DAS_BIND_MANAGED_FIELD(basePipelineHandle)>("basePipelineHandle");
        addField<DAS_BIND_MANAGED_FIELD(basePipelineIndex)>("basePipelineIndex");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkGeometryTrianglesNV, VkGeometryTrianglesNV);

struct VkGeometryTrianglesNVAnnotation
: public ManagedStructureAnnotation<VkGeometryTrianglesNV,true,true> {
    VkGeometryTrianglesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkGeometryTrianglesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(vertexData)>("vertexData");
        addField<DAS_BIND_MANAGED_FIELD(vertexOffset)>("vertexOffset");
        addField<DAS_BIND_MANAGED_FIELD(vertexCount)>("vertexCount");
        addField<DAS_BIND_MANAGED_FIELD(vertexStride)>("vertexStride");
        addField<DAS_BIND_MANAGED_FIELD(vertexFormat)>("vertexFormat");
        addField<DAS_BIND_MANAGED_FIELD(indexData)>("indexData");
        addField<DAS_BIND_MANAGED_FIELD(indexOffset)>("indexOffset");
        addField<DAS_BIND_MANAGED_FIELD(indexCount)>("indexCount");
        addField<DAS_BIND_MANAGED_FIELD(indexType)>("indexType");
        addField<DAS_BIND_MANAGED_FIELD(transformData)>("transformData");
        addField<DAS_BIND_MANAGED_FIELD(transformOffset)>("transformOffset");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkGeometryAABBNV, VkGeometryAABBNV);

struct VkGeometryAABBNVAnnotation
: public ManagedStructureAnnotation<VkGeometryAABBNV,true,true> {
    VkGeometryAABBNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkGeometryAABBNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(aabbData)>("aabbData");
        addField<DAS_BIND_MANAGED_FIELD(numAABBs)>("numAABBs");
        addField<DAS_BIND_MANAGED_FIELD(stride)>("stride");
        addField<DAS_BIND_MANAGED_FIELD(offset)>("offset");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkGeometryDataNV, VkGeometryDataNV);

struct VkGeometryDataNVAnnotation
: public ManagedStructureAnnotation<VkGeometryDataNV,true,true> {
    VkGeometryDataNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkGeometryDataNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(triangles)>("triangles");
        addField<DAS_BIND_MANAGED_FIELD(aabbs)>("aabbs");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkGeometryNV, VkGeometryNV);

struct VkGeometryNVAnnotation
: public ManagedStructureAnnotation<VkGeometryNV,true,true> {
    VkGeometryNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkGeometryNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(geometryType)>("geometryType");
        addField<DAS_BIND_MANAGED_FIELD(geometry)>("geometry");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureInfoNV, VkAccelerationStructureInfoNV);

struct VkAccelerationStructureInfoNVAnnotation
: public ManagedStructureAnnotation<VkAccelerationStructureInfoNV,true,true> {
    VkAccelerationStructureInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAccelerationStructureInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(type)>("type_");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(instanceCount)>("instanceCount");
        addField<DAS_BIND_MANAGED_FIELD(geometryCount)>("geometryCount");
        addField<DAS_BIND_MANAGED_FIELD(pGeometries)>("pGeometries");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureCreateInfoNV, VkAccelerationStructureCreateInfoNV);

struct VkAccelerationStructureCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkAccelerationStructureCreateInfoNV,true,true> {
    VkAccelerationStructureCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAccelerationStructureCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(compactedSize)>("compactedSize");
        addField<DAS_BIND_MANAGED_FIELD(info)>("info");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkBindAccelerationStructureMemoryInfoNV, VkBindAccelerationStructureMemoryInfoNV);

struct VkBindAccelerationStructureMemoryInfoNVAnnotation
: public ManagedStructureAnnotation<VkBindAccelerationStructureMemoryInfoNV,true,true> {
    VkBindAccelerationStructureMemoryInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkBindAccelerationStructureMemoryInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(accelerationStructure)>("accelerationStructure");
        addField<DAS_BIND_MANAGED_FIELD(memory)>("memory");
        addField<DAS_BIND_MANAGED_FIELD(memoryOffset)>("memoryOffset");
        addField<DAS_BIND_MANAGED_FIELD(deviceIndexCount)>("deviceIndexCount");
        addField<DAS_BIND_MANAGED_FIELD(pDeviceIndices)>("pDeviceIndices");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkWriteDescriptorSetAccelerationStructureNV, VkWriteDescriptorSetAccelerationStructureNV);

struct VkWriteDescriptorSetAccelerationStructureNVAnnotation
: public ManagedStructureAnnotation<VkWriteDescriptorSetAccelerationStructureNV,true,true> {
    VkWriteDescriptorSetAccelerationStructureNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkWriteDescriptorSetAccelerationStructureNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(accelerationStructureCount)>("accelerationStructureCount");
        addField<DAS_BIND_MANAGED_FIELD(pAccelerationStructures)>("pAccelerationStructures");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureMemoryRequirementsInfoNV, VkAccelerationStructureMemoryRequirementsInfoNV);

struct VkAccelerationStructureMemoryRequirementsInfoNVAnnotation
: public ManagedStructureAnnotation<VkAccelerationStructureMemoryRequirementsInfoNV,true,true> {
    VkAccelerationStructureMemoryRequirementsInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAccelerationStructureMemoryRequirementsInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(type)>("type_");
        addField<DAS_BIND_MANAGED_FIELD(accelerationStructure)>("accelerationStructure");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceRayTracingPropertiesNV, VkPhysicalDeviceRayTracingPropertiesNV);

struct VkPhysicalDeviceRayTracingPropertiesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceRayTracingPropertiesNV,true,true> {
    VkPhysicalDeviceRayTracingPropertiesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceRayTracingPropertiesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(shaderGroupHandleSize)>("shaderGroupHandleSize");
        addField<DAS_BIND_MANAGED_FIELD(maxRecursionDepth)>("maxRecursionDepth");
        addField<DAS_BIND_MANAGED_FIELD(maxShaderGroupStride)>("maxShaderGroupStride");
        addField<DAS_BIND_MANAGED_FIELD(shaderGroupBaseAlignment)>("shaderGroupBaseAlignment");
        addField<DAS_BIND_MANAGED_FIELD(maxGeometryCount)>("maxGeometryCount");
        addField<DAS_BIND_MANAGED_FIELD(maxInstanceCount)>("maxInstanceCount");
        addField<DAS_BIND_MANAGED_FIELD(maxTriangleCount)>("maxTriangleCount");
        addField<DAS_BIND_MANAGED_FIELD(maxDescriptorSetAccelerationStructures)>("maxDescriptorSetAccelerationStructures");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkTransformMatrixKHR, VkTransformMatrixKHR);

struct VkTransformMatrixKHRAnnotation
: public ManagedStructureAnnotation<VkTransformMatrixKHR,true,true> {
    VkTransformMatrixKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkTransformMatrixKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(matrix)>("matrix");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkAabbPositionsKHR, VkAabbPositionsKHR);

struct VkAabbPositionsKHRAnnotation
: public ManagedStructureAnnotation<VkAabbPositionsKHR,true,true> {
    VkAabbPositionsKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAabbPositionsKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(minX)>("minX");
        addField<DAS_BIND_MANAGED_FIELD(minY)>("minY");
        addField<DAS_BIND_MANAGED_FIELD(minZ)>("minZ");
        addField<DAS_BIND_MANAGED_FIELD(maxX)>("maxX");
        addField<DAS_BIND_MANAGED_FIELD(maxY)>("maxY");
        addField<DAS_BIND_MANAGED_FIELD(maxZ)>("maxZ");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureInstanceKHR, VkAccelerationStructureInstanceKHR);

__forceinline unsigned int VkAccelerationStructureInstanceKHR_get_instanceCustomIndex(const VkAccelerationStructureInstanceKHR &s) { return s.instanceCustomIndex; }
__forceinline void VkAccelerationStructureInstanceKHR_set_instanceCustomIndex(VkAccelerationStructureInstanceKHR &s, unsigned int f) { s.instanceCustomIndex = f; }

__forceinline unsigned int VkAccelerationStructureInstanceKHR_get_mask(const VkAccelerationStructureInstanceKHR &s) { return s.mask; }
__forceinline void VkAccelerationStructureInstanceKHR_set_mask(VkAccelerationStructureInstanceKHR &s, unsigned int f) { s.mask = f; }

__forceinline unsigned int VkAccelerationStructureInstanceKHR_get_instanceShaderBindingTableRecordOffset(const VkAccelerationStructureInstanceKHR &s) { return s.instanceShaderBindingTableRecordOffset; }
__forceinline void VkAccelerationStructureInstanceKHR_set_instanceShaderBindingTableRecordOffset(VkAccelerationStructureInstanceKHR &s, unsigned int f) { s.instanceShaderBindingTableRecordOffset = f; }

__forceinline unsigned int VkAccelerationStructureInstanceKHR_get_flags(const VkAccelerationStructureInstanceKHR &s) { return s.flags; }
__forceinline void VkAccelerationStructureInstanceKHR_set_flags(VkAccelerationStructureInstanceKHR &s, unsigned int f) { s.flags = f; }

struct VkAccelerationStructureInstanceKHRAnnotation
: public ManagedStructureAnnotation<VkAccelerationStructureInstanceKHR,true,true> {
    VkAccelerationStructureInstanceKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAccelerationStructureInstanceKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(transform)>("transform");
        addField<DAS_BIND_MANAGED_FIELD(accelerationStructureReference)>("accelerationStructureReference");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV, VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV);

struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV,true,true> {
    VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(representativeFragmentTest)>("representativeFragmentTest");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPipelineRepresentativeFragmentTestStateCreateInfoNV, VkPipelineRepresentativeFragmentTestStateCreateInfoNV);

struct VkPipelineRepresentativeFragmentTestStateCreateInfoNVAnnotation
: public ManagedStructureAnnotation<VkPipelineRepresentativeFragmentTestStateCreateInfoNV,true,true> {
    VkPipelineRepresentativeFragmentTestStateCreateInfoNVAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPipelineRepresentativeFragmentTestStateCreateInfoNV", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(representativeFragmentTestEnable)>("representativeFragmentTestEnable");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceImageViewImageFormatInfoEXT, VkPhysicalDeviceImageViewImageFormatInfoEXT);

struct VkPhysicalDeviceImageViewImageFormatInfoEXTAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceImageViewImageFormatInfoEXT,true,true> {
    VkPhysicalDeviceImageViewImageFormatInfoEXTAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceImageViewImageFormatInfoEXT", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(imageViewType)>("imageViewType");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

void addVulkanGeneratedEnums_11(Module & module, ModuleLibrary & lib) {
    module.addEnumeration(make_smart<EnumerationVkValidationCheckEXT>());
    module.addEnumeration(make_smart<EnumerationVkConditionalRenderingFlagBitsEXT>());
    module.addEnumeration(make_smart<EnumerationVkSurfaceCounterFlagBitsEXT>());
    module.addEnumeration(make_smart<EnumerationVkDisplayPowerStateEXT>());
    module.addEnumeration(make_smart<EnumerationVkDeviceEventTypeEXT>());
    module.addEnumeration(make_smart<EnumerationVkDisplayEventTypeEXT>());
    module.addEnumeration(make_smart<EnumerationVkViewportCoordinateSwizzleNV>());
    module.addEnumeration(make_smart<EnumerationVkDiscardRectangleModeEXT>());
    module.addEnumeration(make_smart<EnumerationVkConservativeRasterizationModeEXT>());
    module.addEnumeration(make_smart<EnumerationVkDebugUtilsMessageSeverityFlagBitsEXT>());
    module.addEnumeration(make_smart<EnumerationVkDebugUtilsMessageTypeFlagBitsEXT>());
}

void addVulkanGeneratedOpaqueStructs_11(Module & module, ModuleLibrary & lib) {
    module.addAnnotation(make_smart<VkHandleAnnotation<VkSurfaceKHR>>("VkSurfaceKHR", "VkSurfaceKHR"));
    module.addAnnotation(make_smart<VkHandleAnnotation<VkSwapchainKHR>>("VkSwapchainKHR", "VkSwapchainKHR"));
    module.addAnnotation(make_smart<VkHandleAnnotation<VkDisplayKHR>>("VkDisplayKHR", "VkDisplayKHR"));
}

void addVulkanGeneratedStructs_11(Module & module, ModuleLibrary & lib) {
    module.addAnnotation(make_smart<VkPhysicalDeviceShaderSMBuiltinsFeaturesNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkDrmFormatModifierPropertiesEXTAnnotation>(lib));
    module.addAnnotation(make_smart<VkDrmFormatModifierPropertiesListEXTAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDeviceImageDrmFormatModifierInfoEXTAnnotation>(lib));
    module.addAnnotation(make_smart<VkImageDrmFormatModifierListCreateInfoEXTAnnotation>(lib));
    module.addAnnotation(make_smart<VkImageDrmFormatModifierExplicitCreateInfoEXTAnnotation>(lib));
    module.addAnnotation(make_smart<VkImageDrmFormatModifierPropertiesEXTAnnotation>(lib));
    module.addAnnotation(make_smart<VkValidationCacheCreateInfoEXTAnnotation>(lib));
    module.addAnnotation(make_smart<VkShaderModuleValidationCacheCreateInfoEXTAnnotation>(lib));
    module.addAnnotation(make_smart<VkShadingRatePaletteNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkPipelineViewportShadingRateImageStateCreateInfoNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDeviceShadingRateImageFeaturesNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDeviceShadingRateImagePropertiesNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkCoarseSampleLocationNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkCoarseSampleOrderCustomNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkPipelineViewportCoarseSampleOrderStateCreateInfoNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkRayTracingShaderGroupCreateInfoNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkRayTracingPipelineCreateInfoNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkGeometryTrianglesNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkGeometryAABBNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkGeometryDataNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkGeometryNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkAccelerationStructureInfoNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkAccelerationStructureCreateInfoNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkBindAccelerationStructureMemoryInfoNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkWriteDescriptorSetAccelerationStructureNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkAccelerationStructureMemoryRequirementsInfoNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDeviceRayTracingPropertiesNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkTransformMatrixKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkAabbPositionsKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkAccelerationStructureInstanceKHRAnnotation>(lib));
    
    addExtern<DAS_BIND_FUN(VkAccelerationStructureInstanceKHR_get_instanceCustomIndex)>(module, lib, "VkAccelerationStructureInstanceKHR_get_instanceCustomIndex",
        SideEffects::none, "{field.getter_name}");
    addExtern<DAS_BIND_FUN(VkAccelerationStructureInstanceKHR_set_instanceCustomIndex)>(module, lib, "VkAccelerationStructureInstanceKHR_set_instanceCustomIndex",
        SideEffects::modifyArgument, "{field.setter_name}");
    
    addExtern<DAS_BIND_FUN(VkAccelerationStructureInstanceKHR_get_mask)>(module, lib, "VkAccelerationStructureInstanceKHR_get_mask",
        SideEffects::none, "{field.getter_name}");
    addExtern<DAS_BIND_FUN(VkAccelerationStructureInstanceKHR_set_mask)>(module, lib, "VkAccelerationStructureInstanceKHR_set_mask",
        SideEffects::modifyArgument, "{field.setter_name}");
    
    addExtern<DAS_BIND_FUN(VkAccelerationStructureInstanceKHR_get_instanceShaderBindingTableRecordOffset)>(module, lib, "VkAccelerationStructureInstanceKHR_get_instanceShaderBindingTableRecordOffset",
        SideEffects::none, "{field.getter_name}");
    addExtern<DAS_BIND_FUN(VkAccelerationStructureInstanceKHR_set_instanceShaderBindingTableRecordOffset)>(module, lib, "VkAccelerationStructureInstanceKHR_set_instanceShaderBindingTableRecordOffset",
        SideEffects::modifyArgument, "{field.setter_name}");
    
    addExtern<DAS_BIND_FUN(VkAccelerationStructureInstanceKHR_get_flags)>(module, lib, "VkAccelerationStructureInstanceKHR_get_flags",
        SideEffects::none, "{field.getter_name}");
    addExtern<DAS_BIND_FUN(VkAccelerationStructureInstanceKHR_set_flags)>(module, lib, "VkAccelerationStructureInstanceKHR_set_flags",
        SideEffects::modifyArgument, "{field.setter_name}");
    module.addAnnotation(make_smart<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkPipelineRepresentativeFragmentTestStateCreateInfoNVAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDeviceImageViewImageFormatInfoEXTAnnotation>(lib));
}

void addVulkanGeneratedFunctions_11(Module & module, ModuleLibrary & lib) {
    addExtern<DAS_BIND_FUN(vkCmdCopyQueryPoolResults)>(module, lib, "vkCmdCopyQueryPoolResults",
        SideEffects::worstDefault, "vkCmdCopyQueryPoolResults");
    addExtern<DAS_BIND_FUN(vkCmdPushConstants)>(module, lib, "vkCmdPushConstants",
        SideEffects::worstDefault, "vkCmdPushConstants");
    addExtern<DAS_BIND_FUN(vkCmdBeginRenderPass)>(module, lib, "vkCmdBeginRenderPass",
        SideEffects::worstDefault, "vkCmdBeginRenderPass");
    addExtern<DAS_BIND_FUN(vkCmdNextSubpass)>(module, lib, "vkCmdNextSubpass",
        SideEffects::worstDefault, "vkCmdNextSubpass");
    addExtern<DAS_BIND_FUN(vkCmdEndRenderPass)>(module, lib, "vkCmdEndRenderPass",
        SideEffects::worstDefault, "vkCmdEndRenderPass");
    addExtern<DAS_BIND_FUN(vkCmdExecuteCommands)>(module, lib, "vkCmdExecuteCommands",
        SideEffects::worstDefault, "vkCmdExecuteCommands");
    addExtern<DAS_BIND_FUN(vkEnumerateInstanceVersion)>(module, lib, "vkEnumerateInstanceVersion",
        SideEffects::worstDefault, "vkEnumerateInstanceVersion");
    addExtern<DAS_BIND_FUN(vkBindBufferMemory2)>(module, lib, "vkBindBufferMemory2",
        SideEffects::worstDefault, "vkBindBufferMemory2");
    addExtern<DAS_BIND_FUN(vkBindImageMemory2)>(module, lib, "vkBindImageMemory2",
        SideEffects::worstDefault, "vkBindImageMemory2");
    addExtern<DAS_BIND_FUN(vkGetDeviceGroupPeerMemoryFeatures)>(module, lib, "vkGetDeviceGroupPeerMemoryFeatures",
        SideEffects::worstDefault, "vkGetDeviceGroupPeerMemoryFeatures");
    addExtern<DAS_BIND_FUN(vkCmdSetDeviceMask)>(module, lib, "vkCmdSetDeviceMask",
        SideEffects::worstDefault, "vkCmdSetDeviceMask");
    addExtern<DAS_BIND_FUN(vkCmdDispatchBase)>(module, lib, "vkCmdDispatchBase",
        SideEffects::worstDefault, "vkCmdDispatchBase");
}

void addVulkanGeneratedConsts_11(Module & module, ModuleLibrary & lib) {
    addConstant(module, "VK_NV_representative_fragment_test", 1);
    addConstant(module, "VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION", 2);
    addConstant(module, "VK_EXT_filter_cubic", 1);
    addConstant(module, "VK_EXT_FILTER_CUBIC_SPEC_VERSION", 3);
    addConstant(module, "VK_QCOM_render_pass_shader_resolve", 1);
    addConstant(module, "VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION", 4);
    addConstant(module, "VK_EXT_global_priority", 1);
    addConstant(module, "VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION", 2);
    addConstant(module, "VK_EXT_external_memory_host", 1);
    addConstant(module, "VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION", 1);
    addConstant(module, "VK_AMD_buffer_marker", 1);
    addConstant(module, "VK_AMD_BUFFER_MARKER_SPEC_VERSION", 1);
    addConstant(module, "VK_AMD_pipeline_compiler_control", 1);
    addConstant(module, "VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION", 1);
    addConstant(module, "VK_EXT_calibrated_timestamps", 1);
    addConstant(module, "VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION", 1);
    addConstant(module, "VK_AMD_shader_core_properties", 1);
    addConstant(module, "VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION", 2);
    addConstant(module, "VK_AMD_memory_overallocation_behavior", 1);
    addConstant(module, "VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION", 1);
    addConstant(module, "VK_EXT_vertex_attribute_divisor", 1);
    addConstant(module, "VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION", 3);
    addConstant(module, "VK_EXT_pipeline_creation_feedback", 1);
    addConstant(module, "VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION", 1);
    addConstant(module, "VK_NV_shader_subgroup_partitioned", 1);
    addConstant(module, "VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION", 1);
    addConstant(module, "VK_NV_compute_shader_derivatives", 1);
}
