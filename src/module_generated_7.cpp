// generated by dasVulkan for Vulkan 1.2.162
#include "..\include\dasVulkan\module.h"

using namespace das;

#if defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable:4100)   // unreferenced formal parameter
#endif
#if defined(__GNUC__) && !defined(__clang__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#endif
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
#endif

//
// opaque structs
//

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPipeline, VkPipeline)
IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkRenderPass, VkRenderPass)
IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDescriptorSetLayout, VkDescriptorSetLayout)

//
// structs
//


IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDeviceGroupSwapchainCreateInfoKHR, VkDeviceGroupSwapchainCreateInfoKHR);

struct VkDeviceGroupSwapchainCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkDeviceGroupSwapchainCreateInfoKHR,true,true> {
    VkDeviceGroupSwapchainCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDeviceGroupSwapchainCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(modes)>("modes");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayModeParametersKHR, VkDisplayModeParametersKHR);

struct VkDisplayModeParametersKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayModeParametersKHR,true,true> {
    VkDisplayModeParametersKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayModeParametersKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(visibleRegion)>("visibleRegion");
        addField<DAS_BIND_MANAGED_FIELD(refreshRate)>("refreshRate");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayModeCreateInfoKHR, VkDisplayModeCreateInfoKHR);

struct VkDisplayModeCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayModeCreateInfoKHR,true,true> {
    VkDisplayModeCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayModeCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(parameters)>("parameters");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayModePropertiesKHR, VkDisplayModePropertiesKHR);

struct VkDisplayModePropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayModePropertiesKHR,true,true> {
    VkDisplayModePropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayModePropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(displayMode)>("displayMode");
        addField<DAS_BIND_MANAGED_FIELD(parameters)>("parameters");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayPlaneCapabilitiesKHR, VkDisplayPlaneCapabilitiesKHR);

struct VkDisplayPlaneCapabilitiesKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPlaneCapabilitiesKHR,true,true> {
    VkDisplayPlaneCapabilitiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPlaneCapabilitiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(supportedAlpha)>("supportedAlpha");
        addField<DAS_BIND_MANAGED_FIELD(minSrcPosition)>("minSrcPosition");
        addField<DAS_BIND_MANAGED_FIELD(maxSrcPosition)>("maxSrcPosition");
        addField<DAS_BIND_MANAGED_FIELD(minSrcExtent)>("minSrcExtent");
        addField<DAS_BIND_MANAGED_FIELD(maxSrcExtent)>("maxSrcExtent");
        addField<DAS_BIND_MANAGED_FIELD(minDstPosition)>("minDstPosition");
        addField<DAS_BIND_MANAGED_FIELD(maxDstPosition)>("maxDstPosition");
        addField<DAS_BIND_MANAGED_FIELD(minDstExtent)>("minDstExtent");
        addField<DAS_BIND_MANAGED_FIELD(maxDstExtent)>("maxDstExtent");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayPlanePropertiesKHR, VkDisplayPlanePropertiesKHR);

struct VkDisplayPlanePropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPlanePropertiesKHR,true,true> {
    VkDisplayPlanePropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPlanePropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(currentDisplay)>("currentDisplay");
        addField<DAS_BIND_MANAGED_FIELD(currentStackIndex)>("currentStackIndex");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayPropertiesKHR, VkDisplayPropertiesKHR);

struct VkDisplayPropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPropertiesKHR,true,true> {
    VkDisplayPropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(display)>("display");
        addField<DAS_BIND_MANAGED_FIELD(displayName)>("displayName");
        addField<DAS_BIND_MANAGED_FIELD(physicalDimensions)>("physicalDimensions");
        addField<DAS_BIND_MANAGED_FIELD(physicalResolution)>("physicalResolution");
        addField<DAS_BIND_MANAGED_FIELD(supportedTransforms)>("supportedTransforms");
        addField<DAS_BIND_MANAGED_FIELD(planeReorderPossible)>("planeReorderPossible");
        addField<DAS_BIND_MANAGED_FIELD(persistentContent)>("persistentContent");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplaySurfaceCreateInfoKHR, VkDisplaySurfaceCreateInfoKHR);

struct VkDisplaySurfaceCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkDisplaySurfaceCreateInfoKHR,true,true> {
    VkDisplaySurfaceCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplaySurfaceCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(displayMode)>("displayMode");
        addField<DAS_BIND_MANAGED_FIELD(planeIndex)>("planeIndex");
        addField<DAS_BIND_MANAGED_FIELD(planeStackIndex)>("planeStackIndex");
        addField<DAS_BIND_MANAGED_FIELD(transform)>("transform");
        addField<DAS_BIND_MANAGED_FIELD(globalAlpha)>("globalAlpha");
        addField<DAS_BIND_MANAGED_FIELD(alphaMode)>("alphaMode");
        addField<DAS_BIND_MANAGED_FIELD(imageExtent)>("imageExtent");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayPresentInfoKHR, VkDisplayPresentInfoKHR);

struct VkDisplayPresentInfoKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPresentInfoKHR,true,true> {
    VkDisplayPresentInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPresentInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(srcRect)>("srcRect");
        addField<DAS_BIND_MANAGED_FIELD(dstRect)>("dstRect");
        addField<DAS_BIND_MANAGED_FIELD(persistent)>("persistent");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImportMemoryFdInfoKHR, VkImportMemoryFdInfoKHR);

struct VkImportMemoryFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkImportMemoryFdInfoKHR,true,true> {
    VkImportMemoryFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImportMemoryFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
        addField<DAS_BIND_MANAGED_FIELD(fd)>("fd");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkMemoryFdPropertiesKHR, VkMemoryFdPropertiesKHR);

struct VkMemoryFdPropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkMemoryFdPropertiesKHR,true,true> {
    VkMemoryFdPropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryFdPropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(memoryTypeBits)>("memoryTypeBits");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkMemoryGetFdInfoKHR, VkMemoryGetFdInfoKHR);

struct VkMemoryGetFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkMemoryGetFdInfoKHR,true,true> {
    VkMemoryGetFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryGetFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(memory)>("memory");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImportSemaphoreFdInfoKHR, VkImportSemaphoreFdInfoKHR);

struct VkImportSemaphoreFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkImportSemaphoreFdInfoKHR,true,true> {
    VkImportSemaphoreFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImportSemaphoreFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(semaphore)>("semaphore");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
        addField<DAS_BIND_MANAGED_FIELD(fd)>("fd");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkSemaphoreGetFdInfoKHR, VkSemaphoreGetFdInfoKHR);

struct VkSemaphoreGetFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkSemaphoreGetFdInfoKHR,true,true> {
    VkSemaphoreGetFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSemaphoreGetFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(semaphore)>("semaphore");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePushDescriptorPropertiesKHR, VkPhysicalDevicePushDescriptorPropertiesKHR);

struct VkPhysicalDevicePushDescriptorPropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePushDescriptorPropertiesKHR,true,true> {
    VkPhysicalDevicePushDescriptorPropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePushDescriptorPropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(maxPushDescriptors)>("maxPushDescriptors");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkRectLayerKHR, VkRectLayerKHR);

struct VkRectLayerKHRAnnotation
: public ManagedStructureAnnotation<VkRectLayerKHR,true,true> {
    VkRectLayerKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRectLayerKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(offset)>("offset");
        addField<DAS_BIND_MANAGED_FIELD(extent)>("extent");
        addField<DAS_BIND_MANAGED_FIELD(layer)>("layer");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPresentRegionKHR, VkPresentRegionKHR);

struct VkPresentRegionKHRAnnotation
: public ManagedStructureAnnotation<VkPresentRegionKHR,true,true> {
    VkPresentRegionKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPresentRegionKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(rectangleCount)>("rectangleCount");
        addField<DAS_BIND_MANAGED_FIELD(pRectangles)>("pRectangles");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPresentRegionsKHR, VkPresentRegionsKHR);

struct VkPresentRegionsKHRAnnotation
: public ManagedStructureAnnotation<VkPresentRegionsKHR,true,true> {
    VkPresentRegionsKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPresentRegionsKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(swapchainCount)>("swapchainCount");
        addField<DAS_BIND_MANAGED_FIELD(pRegions)>("pRegions");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkSharedPresentSurfaceCapabilitiesKHR, VkSharedPresentSurfaceCapabilitiesKHR);

struct VkSharedPresentSurfaceCapabilitiesKHRAnnotation
: public ManagedStructureAnnotation<VkSharedPresentSurfaceCapabilitiesKHR,true,true> {
    VkSharedPresentSurfaceCapabilitiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSharedPresentSurfaceCapabilitiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(sharedPresentSupportedUsageFlags)>("sharedPresentSupportedUsageFlags");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImportFenceFdInfoKHR, VkImportFenceFdInfoKHR);

struct VkImportFenceFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkImportFenceFdInfoKHR,true,true> {
    VkImportFenceFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImportFenceFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(fence)>("fence");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
        addField<DAS_BIND_MANAGED_FIELD(fd)>("fd");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkFenceGetFdInfoKHR, VkFenceGetFdInfoKHR);

struct VkFenceGetFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkFenceGetFdInfoKHR,true,true> {
    VkFenceGetFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkFenceGetFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(fence)>("fence");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePerformanceQueryFeaturesKHR, VkPhysicalDevicePerformanceQueryFeaturesKHR);

struct VkPhysicalDevicePerformanceQueryFeaturesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePerformanceQueryFeaturesKHR,true,true> {
    VkPhysicalDevicePerformanceQueryFeaturesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePerformanceQueryFeaturesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(performanceCounterQueryPools)>("performanceCounterQueryPools");
        addField<DAS_BIND_MANAGED_FIELD(performanceCounterMultipleQueryPools)>("performanceCounterMultipleQueryPools");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePerformanceQueryPropertiesKHR, VkPhysicalDevicePerformanceQueryPropertiesKHR);

struct VkPhysicalDevicePerformanceQueryPropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePerformanceQueryPropertiesKHR,true,true> {
    VkPhysicalDevicePerformanceQueryPropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePerformanceQueryPropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(allowCommandBufferQueryCopies)>("allowCommandBufferQueryCopies");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPerformanceCounterKHR, VkPerformanceCounterKHR);

struct VkPerformanceCounterKHRAnnotation
: public ManagedStructureAnnotation<VkPerformanceCounterKHR,true,true> {
    VkPerformanceCounterKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceCounterKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(unit)>("unit");
        addField<DAS_BIND_MANAGED_FIELD(scope)>("scope");
        addField<DAS_BIND_MANAGED_FIELD(storage)>("storage");
        addField<DAS_BIND_MANAGED_FIELD(uuid)>("uuid");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPerformanceCounterDescriptionKHR, VkPerformanceCounterDescriptionKHR);

struct VkPerformanceCounterDescriptionKHRAnnotation
: public ManagedStructureAnnotation<VkPerformanceCounterDescriptionKHR,true,true> {
    VkPerformanceCounterDescriptionKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceCounterDescriptionKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(name)>("name");
        addField<DAS_BIND_MANAGED_FIELD(category)>("category");
        addField<DAS_BIND_MANAGED_FIELD(description)>("description");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkQueryPoolPerformanceCreateInfoKHR, VkQueryPoolPerformanceCreateInfoKHR);

struct VkQueryPoolPerformanceCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkQueryPoolPerformanceCreateInfoKHR,true,true> {
    VkQueryPoolPerformanceCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkQueryPoolPerformanceCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(queueFamilyIndex)>("queueFamilyIndex");
        addField<DAS_BIND_MANAGED_FIELD(counterIndexCount)>("counterIndexCount");
        addField<DAS_BIND_MANAGED_FIELD(pCounterIndices)>("pCounterIndices");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPerformanceCounterResultKHR, VkPerformanceCounterResultKHR);

struct VkPerformanceCounterResultKHRAnnotation
: public ManagedStructureAnnotation<VkPerformanceCounterResultKHR,true,true> {
    VkPerformanceCounterResultKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceCounterResultKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(int32)>("int32");
        addField<DAS_BIND_MANAGED_FIELD(int64)>("int64_");
        addField<DAS_BIND_MANAGED_FIELD(uint32)>("uint32");
        addField<DAS_BIND_MANAGED_FIELD(uint64)>("uint64_");
        addField<DAS_BIND_MANAGED_FIELD(float32)>("float32");
        addField<DAS_BIND_MANAGED_FIELD(float64)>("float64");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkAcquireProfilingLockInfoKHR, VkAcquireProfilingLockInfoKHR);

struct VkAcquireProfilingLockInfoKHRAnnotation
: public ManagedStructureAnnotation<VkAcquireProfilingLockInfoKHR,true,true> {
    VkAcquireProfilingLockInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAcquireProfilingLockInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(timeout)>("timeout");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPerformanceQuerySubmitInfoKHR, VkPerformanceQuerySubmitInfoKHR);

struct VkPerformanceQuerySubmitInfoKHRAnnotation
: public ManagedStructureAnnotation<VkPerformanceQuerySubmitInfoKHR,true,true> {
    VkPerformanceQuerySubmitInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceQuerySubmitInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(counterPassIndex)>("counterPassIndex");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceSurfaceInfo2KHR, VkPhysicalDeviceSurfaceInfo2KHR);

struct VkPhysicalDeviceSurfaceInfo2KHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceSurfaceInfo2KHR,true,true> {
    VkPhysicalDeviceSurfaceInfo2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceSurfaceInfo2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(surface)>("surface");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkSurfaceCapabilities2KHR, VkSurfaceCapabilities2KHR);

struct VkSurfaceCapabilities2KHRAnnotation
: public ManagedStructureAnnotation<VkSurfaceCapabilities2KHR,true,true> {
    VkSurfaceCapabilities2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSurfaceCapabilities2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(surfaceCapabilities)>("surfaceCapabilities");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkSurfaceFormat2KHR, VkSurfaceFormat2KHR);

struct VkSurfaceFormat2KHRAnnotation
: public ManagedStructureAnnotation<VkSurfaceFormat2KHR,true,true> {
    VkSurfaceFormat2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSurfaceFormat2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(surfaceFormat)>("surfaceFormat");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayProperties2KHR, VkDisplayProperties2KHR);

struct VkDisplayProperties2KHRAnnotation
: public ManagedStructureAnnotation<VkDisplayProperties2KHR,true,true> {
    VkDisplayProperties2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayProperties2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(displayProperties)>("displayProperties");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayPlaneProperties2KHR, VkDisplayPlaneProperties2KHR);

struct VkDisplayPlaneProperties2KHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPlaneProperties2KHR,true,true> {
    VkDisplayPlaneProperties2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPlaneProperties2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(displayPlaneProperties)>("displayPlaneProperties");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

void addVulkanGeneratedEnums_7(Module & module, ModuleLibrary & lib) {
    module.addEnumeration(make_smart<EnumerationVkPointClippingBehavior>());
    module.addEnumeration(make_smart<EnumerationVkTessellationDomainOrigin>());
    module.addEnumeration(make_smart<EnumerationVkSamplerYcbcrModelConversion>());
    module.addEnumeration(make_smart<EnumerationVkSamplerYcbcrRange>());
    module.addEnumeration(make_smart<EnumerationVkChromaLocation>());
    module.addEnumeration(make_smart<EnumerationVkDescriptorUpdateTemplateType>());
    module.addEnumeration(make_smart<EnumerationVkSubgroupFeatureFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkPeerMemoryFeatureFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkMemoryAllocateFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkExternalMemoryHandleTypeFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkExternalMemoryFeatureFlagBits>());
}

void addVulkanGeneratedOpaqueStructs_7(Module & module, ModuleLibrary & lib) {
    module.addAnnotation(make_smart<VkHandleAnnotation<VkPipeline>>("VkPipeline", "VkPipeline"));
    module.addAnnotation(make_smart<VkHandleAnnotation<VkRenderPass>>("VkRenderPass", "VkRenderPass"));
    module.addAnnotation(make_smart<VkHandleAnnotation<VkDescriptorSetLayout>>("VkDescriptorSetLayout", "VkDescriptorSetLayout"));
}

void addVulkanGeneratedStructs_7(Module & module, ModuleLibrary & lib) {
    module.addAnnotation(make_smart<VkDeviceGroupSwapchainCreateInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayModeParametersKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayModeCreateInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayModePropertiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayPlaneCapabilitiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayPlanePropertiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayPropertiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplaySurfaceCreateInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayPresentInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkImportMemoryFdInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkMemoryFdPropertiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkMemoryGetFdInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkImportSemaphoreFdInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkSemaphoreGetFdInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDevicePushDescriptorPropertiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkRectLayerKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPresentRegionKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPresentRegionsKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkSharedPresentSurfaceCapabilitiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkImportFenceFdInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkFenceGetFdInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDevicePerformanceQueryFeaturesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDevicePerformanceQueryPropertiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPerformanceCounterKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPerformanceCounterDescriptionKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkQueryPoolPerformanceCreateInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPerformanceCounterResultKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkAcquireProfilingLockInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPerformanceQuerySubmitInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDeviceSurfaceInfo2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkSurfaceCapabilities2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkSurfaceFormat2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayProperties2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayPlaneProperties2KHRAnnotation>(lib));
}

void addVulkanGeneratedFunctions_7(Module & module, ModuleLibrary & lib) {
    addExtern<DAS_BIND_FUN(vkGetRenderAreaGranularity)>(module, lib, "vkGetRenderAreaGranularity",
        SideEffects::worstDefault, "vkGetRenderAreaGranularity");
    addExtern<DAS_BIND_FUN(vkCreateCommandPool)>(module, lib, "vkCreateCommandPool",
        SideEffects::worstDefault, "vkCreateCommandPool");
    addExtern<DAS_BIND_FUN(vkDestroyCommandPool)>(module, lib, "vkDestroyCommandPool",
        SideEffects::worstDefault, "vkDestroyCommandPool");
    addExtern<DAS_BIND_FUN(vkResetCommandPool)>(module, lib, "vkResetCommandPool",
        SideEffects::worstDefault, "vkResetCommandPool");
    addExtern<DAS_BIND_FUN(vkAllocateCommandBuffers)>(module, lib, "vkAllocateCommandBuffers",
        SideEffects::worstDefault, "vkAllocateCommandBuffers");
    addExtern<DAS_BIND_FUN(vkFreeCommandBuffers)>(module, lib, "vkFreeCommandBuffers",
        SideEffects::worstDefault, "vkFreeCommandBuffers");
    addExtern<DAS_BIND_FUN(vkBeginCommandBuffer)>(module, lib, "vkBeginCommandBuffer",
        SideEffects::worstDefault, "vkBeginCommandBuffer");
    addExtern<DAS_BIND_FUN(vkEndCommandBuffer)>(module, lib, "vkEndCommandBuffer",
        SideEffects::worstDefault, "vkEndCommandBuffer");
    addExtern<DAS_BIND_FUN(vkResetCommandBuffer)>(module, lib, "vkResetCommandBuffer",
        SideEffects::worstDefault, "vkResetCommandBuffer");
    addExtern<DAS_BIND_FUN(vkCmdBindPipeline)>(module, lib, "vkCmdBindPipeline",
        SideEffects::worstDefault, "vkCmdBindPipeline");
    addExtern<DAS_BIND_FUN(vkCmdSetViewport)>(module, lib, "vkCmdSetViewport",
        SideEffects::worstDefault, "vkCmdSetViewport");
    addExtern<DAS_BIND_FUN(vkCmdSetScissor)>(module, lib, "vkCmdSetScissor",
        SideEffects::worstDefault, "vkCmdSetScissor");
}

void addVulkanGeneratedConsts_7(Module & module, ModuleLibrary & lib) {
    addConstant(module, "VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION", 1);
    addConstant(module, "VK_AMD_gpu_shader_half_float", 1);
    addConstant(module, "VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION", 2);
    addConstant(module, "VK_AMD_shader_ballot", 1);
    addConstant(module, "VK_AMD_SHADER_BALLOT_SPEC_VERSION", 1);
    addConstant(module, "VK_AMD_texture_gather_bias_lod", 1);
    addConstant(module, "VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION", 1);
    addConstant(module, "VK_AMD_shader_info", 1);
    addConstant(module, "VK_AMD_SHADER_INFO_SPEC_VERSION", 1);
    addConstant(module, "VK_AMD_shader_image_load_store_lod", 1);
    addConstant(module, "VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION", 1);
    addConstant(module, "VK_NV_corner_sampled_image", 1);
    addConstant(module, "VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION", 2);
    addConstant(module, "VK_IMG_format_pvrtc", 1);
    addConstant(module, "VK_IMG_FORMAT_PVRTC_SPEC_VERSION", 1);
    addConstant(module, "VK_NV_external_memory_capabilities", 1);
    addConstant(module, "VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION", 1);
    addConstant(module, "VK_NV_external_memory", 1);
    addConstant(module, "VK_NV_EXTERNAL_MEMORY_SPEC_VERSION", 1);
    addConstant(module, "VK_EXT_validation_flags", 1);
    addConstant(module, "VK_EXT_VALIDATION_FLAGS_SPEC_VERSION", 2);
    addConstant(module, "VK_EXT_shader_subgroup_ballot", 1);
    addConstant(module, "VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION", 1);
    addConstant(module, "VK_EXT_shader_subgroup_vote", 1);
    addConstant(module, "VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION", 1);
    addConstant(module, "VK_EXT_texture_compression_astc_hdr", 1);
    addConstant(module, "VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION", 1);
}
