// generated by dasVulkan for GLFW 3.3.2 and Vulkan 1.2.162
#include "..\include\dasVulkan\module.h"

using namespace das;

//
// opaque structs
//

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkRenderPass, VkRenderPass)
IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDescriptorSetLayout, VkDescriptorSetLayout)
IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkSampler, VkSampler)

//
// structs
//


IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayModeCreateInfoKHR, VkDisplayModeCreateInfoKHR);

struct VkDisplayModeCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayModeCreateInfoKHR,true,true> {
    VkDisplayModeCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayModeCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(parameters)>("parameters");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayModePropertiesKHR, VkDisplayModePropertiesKHR);

struct VkDisplayModePropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayModePropertiesKHR,true,true> {
    VkDisplayModePropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayModePropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(displayMode)>("displayMode");
        addField<DAS_BIND_MANAGED_FIELD(parameters)>("parameters");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayPlaneCapabilitiesKHR, VkDisplayPlaneCapabilitiesKHR);

struct VkDisplayPlaneCapabilitiesKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPlaneCapabilitiesKHR,true,true> {
    VkDisplayPlaneCapabilitiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPlaneCapabilitiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(supportedAlpha)>("supportedAlpha");
        addField<DAS_BIND_MANAGED_FIELD(minSrcPosition)>("minSrcPosition");
        addField<DAS_BIND_MANAGED_FIELD(maxSrcPosition)>("maxSrcPosition");
        addField<DAS_BIND_MANAGED_FIELD(minSrcExtent)>("minSrcExtent");
        addField<DAS_BIND_MANAGED_FIELD(maxSrcExtent)>("maxSrcExtent");
        addField<DAS_BIND_MANAGED_FIELD(minDstPosition)>("minDstPosition");
        addField<DAS_BIND_MANAGED_FIELD(maxDstPosition)>("maxDstPosition");
        addField<DAS_BIND_MANAGED_FIELD(minDstExtent)>("minDstExtent");
        addField<DAS_BIND_MANAGED_FIELD(maxDstExtent)>("maxDstExtent");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayPlanePropertiesKHR, VkDisplayPlanePropertiesKHR);

struct VkDisplayPlanePropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPlanePropertiesKHR,true,true> {
    VkDisplayPlanePropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPlanePropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(currentDisplay)>("currentDisplay");
        addField<DAS_BIND_MANAGED_FIELD(currentStackIndex)>("currentStackIndex");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayPropertiesKHR, VkDisplayPropertiesKHR);

struct VkDisplayPropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPropertiesKHR,true,true> {
    VkDisplayPropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(display)>("display");
        addField<DAS_BIND_MANAGED_FIELD(displayName)>("displayName");
        addField<DAS_BIND_MANAGED_FIELD(physicalDimensions)>("physicalDimensions");
        addField<DAS_BIND_MANAGED_FIELD(physicalResolution)>("physicalResolution");
        addField<DAS_BIND_MANAGED_FIELD(supportedTransforms)>("supportedTransforms");
        addField<DAS_BIND_MANAGED_FIELD(planeReorderPossible)>("planeReorderPossible");
        addField<DAS_BIND_MANAGED_FIELD(persistentContent)>("persistentContent");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplaySurfaceCreateInfoKHR, VkDisplaySurfaceCreateInfoKHR);

struct VkDisplaySurfaceCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkDisplaySurfaceCreateInfoKHR,true,true> {
    VkDisplaySurfaceCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplaySurfaceCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(displayMode)>("displayMode");
        addField<DAS_BIND_MANAGED_FIELD(planeIndex)>("planeIndex");
        addField<DAS_BIND_MANAGED_FIELD(planeStackIndex)>("planeStackIndex");
        addField<DAS_BIND_MANAGED_FIELD(transform)>("transform");
        addField<DAS_BIND_MANAGED_FIELD(globalAlpha)>("globalAlpha");
        addField<DAS_BIND_MANAGED_FIELD(alphaMode)>("alphaMode");
        addField<DAS_BIND_MANAGED_FIELD(imageExtent)>("imageExtent");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayPresentInfoKHR, VkDisplayPresentInfoKHR);

struct VkDisplayPresentInfoKHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPresentInfoKHR,true,true> {
    VkDisplayPresentInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPresentInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(srcRect)>("srcRect");
        addField<DAS_BIND_MANAGED_FIELD(dstRect)>("dstRect");
        addField<DAS_BIND_MANAGED_FIELD(persistent)>("persistent");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImportMemoryFdInfoKHR, VkImportMemoryFdInfoKHR);

struct VkImportMemoryFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkImportMemoryFdInfoKHR,true,true> {
    VkImportMemoryFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImportMemoryFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
        addField<DAS_BIND_MANAGED_FIELD(fd)>("fd");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkMemoryFdPropertiesKHR, VkMemoryFdPropertiesKHR);

struct VkMemoryFdPropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkMemoryFdPropertiesKHR,true,true> {
    VkMemoryFdPropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryFdPropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(memoryTypeBits)>("memoryTypeBits");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkMemoryGetFdInfoKHR, VkMemoryGetFdInfoKHR);

struct VkMemoryGetFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkMemoryGetFdInfoKHR,true,true> {
    VkMemoryGetFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkMemoryGetFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(memory)>("memory");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImportSemaphoreFdInfoKHR, VkImportSemaphoreFdInfoKHR);

struct VkImportSemaphoreFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkImportSemaphoreFdInfoKHR,true,true> {
    VkImportSemaphoreFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImportSemaphoreFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(semaphore)>("semaphore");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
        addField<DAS_BIND_MANAGED_FIELD(fd)>("fd");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkSemaphoreGetFdInfoKHR, VkSemaphoreGetFdInfoKHR);

struct VkSemaphoreGetFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkSemaphoreGetFdInfoKHR,true,true> {
    VkSemaphoreGetFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSemaphoreGetFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(semaphore)>("semaphore");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePushDescriptorPropertiesKHR, VkPhysicalDevicePushDescriptorPropertiesKHR);

struct VkPhysicalDevicePushDescriptorPropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePushDescriptorPropertiesKHR,true,true> {
    VkPhysicalDevicePushDescriptorPropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePushDescriptorPropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(maxPushDescriptors)>("maxPushDescriptors");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkRectLayerKHR, VkRectLayerKHR);

struct VkRectLayerKHRAnnotation
: public ManagedStructureAnnotation<VkRectLayerKHR,true,true> {
    VkRectLayerKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkRectLayerKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(offset)>("offset");
        addField<DAS_BIND_MANAGED_FIELD(extent)>("extent");
        addField<DAS_BIND_MANAGED_FIELD(layer)>("layer");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPresentRegionKHR, VkPresentRegionKHR);

struct VkPresentRegionKHRAnnotation
: public ManagedStructureAnnotation<VkPresentRegionKHR,true,true> {
    VkPresentRegionKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPresentRegionKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(rectangleCount)>("rectangleCount");
        addField<DAS_BIND_MANAGED_FIELD(pRectangles)>("pRectangles");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPresentRegionsKHR, VkPresentRegionsKHR);

struct VkPresentRegionsKHRAnnotation
: public ManagedStructureAnnotation<VkPresentRegionsKHR,true,true> {
    VkPresentRegionsKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPresentRegionsKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(swapchainCount)>("swapchainCount");
        addField<DAS_BIND_MANAGED_FIELD(pRegions)>("pRegions");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkSharedPresentSurfaceCapabilitiesKHR, VkSharedPresentSurfaceCapabilitiesKHR);

struct VkSharedPresentSurfaceCapabilitiesKHRAnnotation
: public ManagedStructureAnnotation<VkSharedPresentSurfaceCapabilitiesKHR,true,true> {
    VkSharedPresentSurfaceCapabilitiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSharedPresentSurfaceCapabilitiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(sharedPresentSupportedUsageFlags)>("sharedPresentSupportedUsageFlags");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkImportFenceFdInfoKHR, VkImportFenceFdInfoKHR);

struct VkImportFenceFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkImportFenceFdInfoKHR,true,true> {
    VkImportFenceFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkImportFenceFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(fence)>("fence");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
        addField<DAS_BIND_MANAGED_FIELD(fd)>("fd");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkFenceGetFdInfoKHR, VkFenceGetFdInfoKHR);

struct VkFenceGetFdInfoKHRAnnotation
: public ManagedStructureAnnotation<VkFenceGetFdInfoKHR,true,true> {
    VkFenceGetFdInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkFenceGetFdInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(fence)>("fence");
        addField<DAS_BIND_MANAGED_FIELD(handleType)>("handleType");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePerformanceQueryFeaturesKHR, VkPhysicalDevicePerformanceQueryFeaturesKHR);

struct VkPhysicalDevicePerformanceQueryFeaturesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePerformanceQueryFeaturesKHR,true,true> {
    VkPhysicalDevicePerformanceQueryFeaturesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePerformanceQueryFeaturesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(performanceCounterQueryPools)>("performanceCounterQueryPools");
        addField<DAS_BIND_MANAGED_FIELD(performanceCounterMultipleQueryPools)>("performanceCounterMultipleQueryPools");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePerformanceQueryPropertiesKHR, VkPhysicalDevicePerformanceQueryPropertiesKHR);

struct VkPhysicalDevicePerformanceQueryPropertiesKHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDevicePerformanceQueryPropertiesKHR,true,true> {
    VkPhysicalDevicePerformanceQueryPropertiesKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDevicePerformanceQueryPropertiesKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(allowCommandBufferQueryCopies)>("allowCommandBufferQueryCopies");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPerformanceCounterKHR, VkPerformanceCounterKHR);

struct VkPerformanceCounterKHRAnnotation
: public ManagedStructureAnnotation<VkPerformanceCounterKHR,true,true> {
    VkPerformanceCounterKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceCounterKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(unit)>("unit");
        addField<DAS_BIND_MANAGED_FIELD(scope)>("scope");
        addField<DAS_BIND_MANAGED_FIELD(storage)>("storage");
        addField<DAS_BIND_MANAGED_FIELD(uuid)>("uuid");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPerformanceCounterDescriptionKHR, VkPerformanceCounterDescriptionKHR);

struct VkPerformanceCounterDescriptionKHRAnnotation
: public ManagedStructureAnnotation<VkPerformanceCounterDescriptionKHR,true,true> {
    VkPerformanceCounterDescriptionKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceCounterDescriptionKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(name)>("name");
        addField<DAS_BIND_MANAGED_FIELD(category)>("category");
        addField<DAS_BIND_MANAGED_FIELD(description)>("description");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkQueryPoolPerformanceCreateInfoKHR, VkQueryPoolPerformanceCreateInfoKHR);

struct VkQueryPoolPerformanceCreateInfoKHRAnnotation
: public ManagedStructureAnnotation<VkQueryPoolPerformanceCreateInfoKHR,true,true> {
    VkQueryPoolPerformanceCreateInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkQueryPoolPerformanceCreateInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(queueFamilyIndex)>("queueFamilyIndex");
        addField<DAS_BIND_MANAGED_FIELD(counterIndexCount)>("counterIndexCount");
        addField<DAS_BIND_MANAGED_FIELD(pCounterIndices)>("pCounterIndices");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPerformanceCounterResultKHR, VkPerformanceCounterResultKHR);

struct VkPerformanceCounterResultKHRAnnotation
: public ManagedStructureAnnotation<VkPerformanceCounterResultKHR,true,true> {
    VkPerformanceCounterResultKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceCounterResultKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(int32)>("int32");
        addField<DAS_BIND_MANAGED_FIELD(int64)>("int64_");
        addField<DAS_BIND_MANAGED_FIELD(uint32)>("uint32");
        addField<DAS_BIND_MANAGED_FIELD(uint64)>("uint64_");
        addField<DAS_BIND_MANAGED_FIELD(float32)>("float32");
        addField<DAS_BIND_MANAGED_FIELD(float64)>("float64");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkAcquireProfilingLockInfoKHR, VkAcquireProfilingLockInfoKHR);

struct VkAcquireProfilingLockInfoKHRAnnotation
: public ManagedStructureAnnotation<VkAcquireProfilingLockInfoKHR,true,true> {
    VkAcquireProfilingLockInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkAcquireProfilingLockInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(flags)>("flags");
        addField<DAS_BIND_MANAGED_FIELD(timeout)>("timeout");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPerformanceQuerySubmitInfoKHR, VkPerformanceQuerySubmitInfoKHR);

struct VkPerformanceQuerySubmitInfoKHRAnnotation
: public ManagedStructureAnnotation<VkPerformanceQuerySubmitInfoKHR,true,true> {
    VkPerformanceQuerySubmitInfoKHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPerformanceQuerySubmitInfoKHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(counterPassIndex)>("counterPassIndex");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceSurfaceInfo2KHR, VkPhysicalDeviceSurfaceInfo2KHR);

struct VkPhysicalDeviceSurfaceInfo2KHRAnnotation
: public ManagedStructureAnnotation<VkPhysicalDeviceSurfaceInfo2KHR,true,true> {
    VkPhysicalDeviceSurfaceInfo2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkPhysicalDeviceSurfaceInfo2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(surface)>("surface");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkSurfaceCapabilities2KHR, VkSurfaceCapabilities2KHR);

struct VkSurfaceCapabilities2KHRAnnotation
: public ManagedStructureAnnotation<VkSurfaceCapabilities2KHR,true,true> {
    VkSurfaceCapabilities2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSurfaceCapabilities2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(surfaceCapabilities)>("surfaceCapabilities");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkSurfaceFormat2KHR, VkSurfaceFormat2KHR);

struct VkSurfaceFormat2KHRAnnotation
: public ManagedStructureAnnotation<VkSurfaceFormat2KHR,true,true> {
    VkSurfaceFormat2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkSurfaceFormat2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(surfaceFormat)>("surfaceFormat");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayProperties2KHR, VkDisplayProperties2KHR);

struct VkDisplayProperties2KHRAnnotation
: public ManagedStructureAnnotation<VkDisplayProperties2KHR,true,true> {
    VkDisplayProperties2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayProperties2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(displayProperties)>("displayProperties");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayPlaneProperties2KHR, VkDisplayPlaneProperties2KHR);

struct VkDisplayPlaneProperties2KHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPlaneProperties2KHR,true,true> {
    VkDisplayPlaneProperties2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPlaneProperties2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(displayPlaneProperties)>("displayPlaneProperties");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayModeProperties2KHR, VkDisplayModeProperties2KHR);

struct VkDisplayModeProperties2KHRAnnotation
: public ManagedStructureAnnotation<VkDisplayModeProperties2KHR,true,true> {
    VkDisplayModeProperties2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayModeProperties2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(displayModeProperties)>("displayModeProperties");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

IMPLEMENT_EXTERNAL_TYPE_FACTORY(VkDisplayPlaneInfo2KHR, VkDisplayPlaneInfo2KHR);

struct VkDisplayPlaneInfo2KHRAnnotation
: public ManagedStructureAnnotation<VkDisplayPlaneInfo2KHR,true,true> {
    VkDisplayPlaneInfo2KHRAnnotation(ModuleLibrary & ml)
    : ManagedStructureAnnotation ("VkDisplayPlaneInfo2KHR", ml) {
        addField<DAS_BIND_MANAGED_FIELD(sType)>("sType");
        addField<DAS_BIND_MANAGED_FIELD(pNext)>("pNext");
        addField<DAS_BIND_MANAGED_FIELD(mode)>("mode");
        addField<DAS_BIND_MANAGED_FIELD(planeIndex)>("planeIndex");
    }
    void init() {
    }
    virtual bool isLocal() const override { return true; }
    virtual bool canCopy() const override { return true; }
    virtual bool canMove() const override { return true; }
    virtual bool canClone() const override { return true; }
    virtual SimNode * simulateCopy ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return context.code->makeNode<SimNode_CopyRefValue>(at, l, r, getSizeOf());
    }
    virtual SimNode * simulateClone ( Context & context, const LineInfo & at, SimNode * l, SimNode * r ) const override {
        return simulateCopy(context, at, l, r);
    }
};

void addVulkanGenerated_7(Module & module, ModuleLibrary & lib) {

    //
    // enums
    //

    module.addEnumeration(make_smart<EnumerationVkPointClippingBehavior>());
    module.addEnumeration(make_smart<EnumerationVkTessellationDomainOrigin>());
    module.addEnumeration(make_smart<EnumerationVkSamplerYcbcrModelConversion>());
    module.addEnumeration(make_smart<EnumerationVkSamplerYcbcrRange>());
    module.addEnumeration(make_smart<EnumerationVkChromaLocation>());
    module.addEnumeration(make_smart<EnumerationVkDescriptorUpdateTemplateType>());
    module.addEnumeration(make_smart<EnumerationVkSubgroupFeatureFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkPeerMemoryFeatureFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkMemoryAllocateFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkExternalMemoryHandleTypeFlagBits>());
    module.addEnumeration(make_smart<EnumerationVkExternalMemoryFeatureFlagBits>());

    //
    // opaque structs
    //

    module.addAnnotation(make_smart<VkHandleAnnotation<VkRenderPass>>("VkRenderPass", "VkRenderPass"));
    module.addAnnotation(make_smart<VkHandleAnnotation<VkDescriptorSetLayout>>("VkDescriptorSetLayout", "VkDescriptorSetLayout"));
    module.addAnnotation(make_smart<VkHandleAnnotation<VkSampler>>("VkSampler", "VkSampler"));

    //
    // structs
    //

    module.addAnnotation(make_smart<VkDisplayModeCreateInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayModePropertiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayPlaneCapabilitiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayPlanePropertiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayPropertiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplaySurfaceCreateInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayPresentInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkImportMemoryFdInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkMemoryFdPropertiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkMemoryGetFdInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkImportSemaphoreFdInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkSemaphoreGetFdInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDevicePushDescriptorPropertiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkRectLayerKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPresentRegionKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPresentRegionsKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkSharedPresentSurfaceCapabilitiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkImportFenceFdInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkFenceGetFdInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDevicePerformanceQueryFeaturesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDevicePerformanceQueryPropertiesKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPerformanceCounterKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPerformanceCounterDescriptionKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkQueryPoolPerformanceCreateInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPerformanceCounterResultKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkAcquireProfilingLockInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPerformanceQuerySubmitInfoKHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkPhysicalDeviceSurfaceInfo2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkSurfaceCapabilities2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkSurfaceFormat2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayProperties2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayPlaneProperties2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayModeProperties2KHRAnnotation>(lib));
    module.addAnnotation(make_smart<VkDisplayPlaneInfo2KHRAnnotation>(lib));

    //
    // functions
    //

    addExtern<DAS_BIND_FUN(vkCmdWaitEvents)>(module, lib, "vkCmdWaitEvents",
        SideEffects::worstDefault, "vkCmdWaitEvents");
    addExtern<DAS_BIND_FUN(vkCmdPipelineBarrier)>(module, lib, "vkCmdPipelineBarrier",
        SideEffects::worstDefault, "vkCmdPipelineBarrier");
    addExtern<DAS_BIND_FUN(vkCmdBeginQuery)>(module, lib, "vkCmdBeginQuery",
        SideEffects::worstDefault, "vkCmdBeginQuery");
    addExtern<DAS_BIND_FUN(vkCmdEndQuery)>(module, lib, "vkCmdEndQuery",
        SideEffects::worstDefault, "vkCmdEndQuery");
    addExtern<DAS_BIND_FUN(vkCmdResetQueryPool)>(module, lib, "vkCmdResetQueryPool",
        SideEffects::worstDefault, "vkCmdResetQueryPool");
    addExtern<DAS_BIND_FUN(vkCmdWriteTimestamp)>(module, lib, "vkCmdWriteTimestamp",
        SideEffects::worstDefault, "vkCmdWriteTimestamp");
    addExtern<DAS_BIND_FUN(vkCmdCopyQueryPoolResults)>(module, lib, "vkCmdCopyQueryPoolResults",
        SideEffects::worstDefault, "vkCmdCopyQueryPoolResults");
    addExtern<DAS_BIND_FUN(vkCmdPushConstants)>(module, lib, "vkCmdPushConstants",
        SideEffects::worstDefault, "vkCmdPushConstants");
    addExtern<DAS_BIND_FUN(vkCmdBeginRenderPass)>(module, lib, "vkCmdBeginRenderPass",
        SideEffects::worstDefault, "vkCmdBeginRenderPass");
    addExtern<DAS_BIND_FUN(vkCmdNextSubpass)>(module, lib, "vkCmdNextSubpass",
        SideEffects::worstDefault, "vkCmdNextSubpass");
    addExtern<DAS_BIND_FUN(vkCmdEndRenderPass)>(module, lib, "vkCmdEndRenderPass",
        SideEffects::worstDefault, "vkCmdEndRenderPass");
    addExtern<DAS_BIND_FUN(vkCmdExecuteCommands)>(module, lib, "vkCmdExecuteCommands",
        SideEffects::worstDefault, "vkCmdExecuteCommands");
    addExtern<DAS_BIND_FUN(vkEnumerateInstanceVersion)>(module, lib, "vkEnumerateInstanceVersion",
        SideEffects::worstDefault, "vkEnumerateInstanceVersion");
    addExtern<DAS_BIND_FUN(vkBindBufferMemory2)>(module, lib, "vkBindBufferMemory2",
        SideEffects::worstDefault, "vkBindBufferMemory2");
    addExtern<DAS_BIND_FUN(vkBindImageMemory2)>(module, lib, "vkBindImageMemory2",
        SideEffects::worstDefault, "vkBindImageMemory2");
    addExtern<DAS_BIND_FUN(vkGetDeviceGroupPeerMemoryFeatures)>(module, lib, "vkGetDeviceGroupPeerMemoryFeatures",
        SideEffects::worstDefault, "vkGetDeviceGroupPeerMemoryFeatures");
    addExtern<DAS_BIND_FUN(vkCmdSetDeviceMask)>(module, lib, "vkCmdSetDeviceMask",
        SideEffects::worstDefault, "vkCmdSetDeviceMask");
    addExtern<DAS_BIND_FUN(vkCmdDispatchBase)>(module, lib, "vkCmdDispatchBase",
        SideEffects::worstDefault, "vkCmdDispatchBase");

    //
    // macro constants
    //

    addConstant(module, "VK_VERSION_1_2", 1);
    addConstant(module, "VK_API_VERSION_1_2", VK_MAKE_VERSION(1, 2, 0));
    addConstant(module, "VK_MAX_DRIVER_NAME_SIZE", 256);
    addConstant(module, "VK_MAX_DRIVER_INFO_SIZE", 256);
    addConstant(module, "VK_KHR_surface", 1);
    addConstant(module, "VK_KHR_SURFACE_SPEC_VERSION", 25);
    addConstant(module, "VK_KHR_swapchain", 1);
    addConstant(module, "VK_KHR_SWAPCHAIN_SPEC_VERSION", 70);
    addConstant(module, "VK_KHR_display", 1);
    addConstant(module, "VK_KHR_DISPLAY_SPEC_VERSION", 23);
    addConstant(module, "VK_KHR_display_swapchain", 1);
    addConstant(module, "VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION", 10);
    addConstant(module, "VK_KHR_sampler_mirror_clamp_to_edge", 1);
    addConstant(module, "VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION", 3);
    addConstant(module, "VK_KHR_multiview", 1);
    addConstant(module, "VK_KHR_MULTIVIEW_SPEC_VERSION", 1);
    addConstant(module, "VK_KHR_get_physical_device_properties2", 1);
    addConstant(module, "VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION", 2);
    addConstant(module, "VK_KHR_device_group", 1);
    addConstant(module, "VK_KHR_DEVICE_GROUP_SPEC_VERSION", 4);
    addConstant(module, "VK_KHR_shader_draw_parameters", 1);
    addConstant(module, "VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION", 1);
    addConstant(module, "VK_KHR_maintenance1", 1);
    addConstant(module, "VK_KHR_MAINTENANCE1_SPEC_VERSION", 2);
    addConstant(module, "VK_KHR_device_group_creation", 1);
    addConstant(module, "VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION", 1);
    addConstant(module, "VK_MAX_DEVICE_GROUP_SIZE_KHR", VK_MAX_DEVICE_GROUP_SIZE);
    addConstant(module, "VK_KHR_external_memory_capabilities", 1);
    addConstant(module, "VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION", 1);
    addConstant(module, "VK_LUID_SIZE_KHR", VK_LUID_SIZE);
    addConstant(module, "VK_KHR_external_memory", 1);
    addConstant(module, "VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION", 1);
    addConstant(module, "VK_QUEUE_FAMILY_EXTERNAL_KHR", VK_QUEUE_FAMILY_EXTERNAL);
    addConstant(module, "VK_KHR_external_memory_fd", 1);
    addConstant(module, "VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION", 1);
    addConstant(module, "VK_KHR_external_semaphore_capabilities", 1);
    addConstant(module, "VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION", 1);
    addConstant(module, "VK_KHR_external_semaphore", 1);
    addConstant(module, "VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION", 1);
    addConstant(module, "VK_KHR_external_semaphore_fd", 1);
    addConstant(module, "VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION", 1);
    addConstant(module, "VK_KHR_push_descriptor", 1);
    addConstant(module, "VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION", 2);
    addConstant(module, "VK_KHR_shader_float16_int8", 1);
    addConstant(module, "VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION", 1);
};
