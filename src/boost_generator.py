from das_shared.object_base import LoggingObject


class BoostGenerator(LoggingObject):

    def __init__(self, context):
        self.__context = context
        self.__handles = []

        self.enums = dict((x.name, x)
            for x in self.__context.main_c_header.enums)
        self.structs = dict((x.name, x)
            for x in self.__context.main_c_header.structs)
        self.opaque_structs = dict((x.name, x)
            for x in self.__context.main_c_header.opaque_structs)
        self.functions = dict((x.name, x)
            for x in self.__context.main_c_header.functions)

        self.__add_vk_handles()

    def __add_vk_handles(self):
        self.__add_handle(name='VkPhysicalDevice',
            fn_create='vkEnumeratePhysicalDevices',
            p_count='pPhysicalDeviceCount',
            p_handles='pPhysicalDevices')

    def __add_vk_handle(self, **kwargs):
        handle = VkHandle(generator=self, **kwargs)
        self.__handles.append(handle)
        return handle

    def write(self):
        self.__context.write_to_file(
            fpath='../daslib/internal/generated.das',
            content='\n'.join(self.__generate() + ['']))

    def __generate(self):
        return [
            '// generated by dasVulkan',
            '',
            'options indenting = 4',
            'options no_aot = true',
        ] + [
            line for handle in self.__handles for line in handle.generate()
        ]


class VkHandle(object):

    def __init__(self, generator, name, fn_create,
        fn_destroy=None, params=None, p_count=None, p_items=None
    ):
        self.__generator = generator
        self.__name = name
        self.__fn_create = fn_create
        self.__fn_destroy = fn_destroy
        self.__params = params or []
        self.__p_count = p_count
        self.__p_items = p_items

    def __is_batched(self):
        

    def generate(self):
        return []


class FuncCreateBase(object):

    def __init__(name):
        self.name = name

    @property
    def is_batched(self):
        return False


class FuncCreateBatch(FuncCreateBase):

    def __init__(name, p_count, p_handles):
        self.__name = name
        self.__p_count = p_count
        self.__p_handles = p_handles

    @property
    def is_batch(self):
        return True
