from das_shared.object_base import LoggingObject


class BoostGenerator(LoggingObject):

    def __init__(self, context):
        self.__context = context
        self.__handles = []
        self.__add_handles()

    def __add_handles(self):
        self.__add_handle(name='VkPhysicalDevice',
            fn_create=FuncCreateBatch(
                name='vkEnumeratePhysicalDevices',
                p_count='pPhysicalDeviceCount',
                p_handles='pPhysicalDevices'))

    def __add_handle(self, **kwargs):
        handle = Handle(**kwargs)
        self.__handles.append(handle)
        return handle

    def write(self):
        self.__context.write_to_file(
            fpath='../daslib/internal/generated.das',
            content='\n'.join(self.__generate() + ['']))

    def __generate(self):
        return [
            '// generated by dasVulkan',
            '',
            'options indenting = 4',
            'options no_aot = true',
        ] + [
            line for handle in self.__handles for line in handle.generate()
        ]


class Handle(object):

    def __init__(self, name, fn_create, fn_destroy=None, params=None):
        self.__name = name
        self.__fn_create = fn_create
        self.__fn_destroy = fn_destroy
        self.__params = params or []

    def generate(self):
        return []


class FuncCreateBatch(object):

    def __init__(name, p_count, p_handles):
        self.__name = name
        self.__p_count = p_count
        self.__p_handles = p_handles
