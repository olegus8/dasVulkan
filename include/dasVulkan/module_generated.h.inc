// generated by dasVulkan for Vulkan 1.2.162

//
// enums
//

namespace das
{
    template <> struct cast < VkResult > : cast_enum < VkResult > {};
};

class EnumerationVkResult : public das::Enumeration {
public:
    EnumerationVkResult() : das::Enumeration("VkResult") {
        external = true;
        cppName = "VkResult";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkResult >::type >::type;
        VkResult enumArray[] = {
            VkResult::VK_SUCCESS,
            VkResult::VK_NOT_READY,
            VkResult::VK_TIMEOUT,
            VkResult::VK_EVENT_SET,
            VkResult::VK_EVENT_RESET,
            VkResult::VK_INCOMPLETE,
            VkResult::VK_ERROR_OUT_OF_HOST_MEMORY,
            VkResult::VK_ERROR_OUT_OF_DEVICE_MEMORY,
            VkResult::VK_ERROR_INITIALIZATION_FAILED,
            VkResult::VK_ERROR_DEVICE_LOST,
            VkResult::VK_ERROR_MEMORY_MAP_FAILED,
            VkResult::VK_ERROR_LAYER_NOT_PRESENT,
            VkResult::VK_ERROR_EXTENSION_NOT_PRESENT,
            VkResult::VK_ERROR_FEATURE_NOT_PRESENT,
            VkResult::VK_ERROR_INCOMPATIBLE_DRIVER,
            VkResult::VK_ERROR_TOO_MANY_OBJECTS,
            VkResult::VK_ERROR_FORMAT_NOT_SUPPORTED,
            VkResult::VK_ERROR_FRAGMENTED_POOL,
            VkResult::VK_ERROR_UNKNOWN,
            VkResult::VK_ERROR_OUT_OF_POOL_MEMORY,
            VkResult::VK_ERROR_INVALID_EXTERNAL_HANDLE,
            VkResult::VK_ERROR_FRAGMENTATION,
            VkResult::VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
            VkResult::VK_ERROR_SURFACE_LOST_KHR,
            VkResult::VK_ERROR_NATIVE_WINDOW_IN_USE_KHR,
            VkResult::VK_SUBOPTIMAL_KHR,
            VkResult::VK_ERROR_OUT_OF_DATE_KHR,
            VkResult::VK_ERROR_INCOMPATIBLE_DISPLAY_KHR,
            VkResult::VK_ERROR_VALIDATION_FAILED_EXT,
            VkResult::VK_ERROR_INVALID_SHADER_NV,
            VkResult::VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT,
            VkResult::VK_ERROR_NOT_PERMITTED_EXT,
            VkResult::VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT,
            VkResult::VK_THREAD_IDLE_KHR,
            VkResult::VK_THREAD_DONE_KHR,
            VkResult::VK_OPERATION_DEFERRED_KHR,
            VkResult::VK_OPERATION_NOT_DEFERRED_KHR,
            VkResult::VK_PIPELINE_COMPILE_REQUIRED_EXT,
            VkResult::VK_ERROR_OUT_OF_POOL_MEMORY_KHR,
            VkResult::VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR,
            VkResult::VK_ERROR_FRAGMENTATION_EXT,
            VkResult::VK_ERROR_INVALID_DEVICE_ADDRESS_EXT,
            VkResult::VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR,
            VkResult::VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT,
            VkResult::VK_RESULT_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SUCCESS",
            "VK_NOT_READY",
            "VK_TIMEOUT",
            "VK_EVENT_SET",
            "VK_EVENT_RESET",
            "VK_INCOMPLETE",
            "VK_ERROR_OUT_OF_HOST_MEMORY",
            "VK_ERROR_OUT_OF_DEVICE_MEMORY",
            "VK_ERROR_INITIALIZATION_FAILED",
            "VK_ERROR_DEVICE_LOST",
            "VK_ERROR_MEMORY_MAP_FAILED",
            "VK_ERROR_LAYER_NOT_PRESENT",
            "VK_ERROR_EXTENSION_NOT_PRESENT",
            "VK_ERROR_FEATURE_NOT_PRESENT",
            "VK_ERROR_INCOMPATIBLE_DRIVER",
            "VK_ERROR_TOO_MANY_OBJECTS",
            "VK_ERROR_FORMAT_NOT_SUPPORTED",
            "VK_ERROR_FRAGMENTED_POOL",
            "VK_ERROR_UNKNOWN",
            "VK_ERROR_OUT_OF_POOL_MEMORY",
            "VK_ERROR_INVALID_EXTERNAL_HANDLE",
            "VK_ERROR_FRAGMENTATION",
            "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS",
            "VK_ERROR_SURFACE_LOST_KHR",
            "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR",
            "VK_SUBOPTIMAL_KHR",
            "VK_ERROR_OUT_OF_DATE_KHR",
            "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR",
            "VK_ERROR_VALIDATION_FAILED_EXT",
            "VK_ERROR_INVALID_SHADER_NV",
            "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT",
            "VK_ERROR_NOT_PERMITTED_EXT",
            "VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT",
            "VK_THREAD_IDLE_KHR",
            "VK_THREAD_DONE_KHR",
            "VK_OPERATION_DEFERRED_KHR",
            "VK_OPERATION_NOT_DEFERRED_KHR",
            "VK_PIPELINE_COMPILE_REQUIRED_EXT",
            "VK_ERROR_OUT_OF_POOL_MEMORY_KHR",
            "VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR",
            "VK_ERROR_FRAGMENTATION_EXT",
            "VK_ERROR_INVALID_DEVICE_ADDRESS_EXT",
            "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR",
            "VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT",
            "VK_RESULT_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 45; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkResult > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkResult");
        }
    };
}
namespace das
{
    template <> struct cast < VkStructureType > : cast_enum < VkStructureType > {};
};

class EnumerationVkStructureType : public das::Enumeration {
public:
    EnumerationVkStructureType() : das::Enumeration("VkStructureType") {
        external = true;
        cppName = "VkStructureType";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkStructureType >::type >::type;
        VkStructureType enumArray[] = {
            VkStructureType::VK_STRUCTURE_TYPE_APPLICATION_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_SUBMIT_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE,
            VkStructureType::VK_STRUCTURE_TYPE_BIND_SPARSE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_FENCE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_EVENT_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
            VkStructureType::VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET,
            VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_BARRIER,
            VkStructureType::VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
            VkStructureType::VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
            VkStructureType::VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
            VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
            VkStructureType::VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2,
            VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
            VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
            VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
            VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
            VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
            VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
            VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
            VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
            VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PRESENT_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD,
            VkStructureType::VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX,
            VkStructureType::VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD,
            VkStructureType::VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_HDR_METADATA_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK,
            VkStructureType::VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK,
            VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID,
            VkStructureType::VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID,
            VkStructureType::VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID,
            VkStructureType::VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
            VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_GEOMETRY_NV,
            VkStructureType::VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV,
            VkStructureType::VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV,
            VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD,
            VkStructureType::VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV,
            VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL,
            VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
            VkStructureType::VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL,
            VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL,
            VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL,
            VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL,
            VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD,
            VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV,
            VkStructureType::VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM,
            VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES,
            VkStructureType::VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR,
            VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT,
            VkStructureType::VK_STRUCTURE_TYPE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_STRUCTURE_TYPE_APPLICATION_INFO",
            "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_SUBMIT_INFO",
            "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO",
            "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE",
            "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO",
            "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO",
            "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO",
            "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO",
            "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO",
            "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO",
            "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO",
            "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO",
            "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO",
            "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO",
            "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO",
            "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET",
            "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET",
            "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO",
            "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO",
            "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO",
            "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO",
            "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO",
            "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO",
            "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO",
            "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER",
            "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER",
            "VK_STRUCTURE_TYPE_MEMORY_BARRIER",
            "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES",
            "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO",
            "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES",
            "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS",
            "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO",
            "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO",
            "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO",
            "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO",
            "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO",
            "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO",
            "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO",
            "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES",
            "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2",
            "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2",
            "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2",
            "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2",
            "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2",
            "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2",
            "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2",
            "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2",
            "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES",
            "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO",
            "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES",
            "VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES",
            "VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2",
            "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO",
            "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO",
            "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO",
            "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES",
            "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES",
            "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO",
            "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO",
            "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES",
            "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO",
            "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO",
            "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES",
            "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO",
            "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES",
            "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES",
            "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO",
            "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2",
            "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2",
            "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2",
            "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2",
            "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2",
            "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO",
            "VK_STRUCTURE_TYPE_SUBPASS_END_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES",
            "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES",
            "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO",
            "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES",
            "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES",
            "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES",
            "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES",
            "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO",
            "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO",
            "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES",
            "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT",
            "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES",
            "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO",
            "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO",
            "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO",
            "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES",
            "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO",
            "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO",
            "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO",
            "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO",
            "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR",
            "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR",
            "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR",
            "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR",
            "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR",
            "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR",
            "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD",
            "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT",
            "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT",
            "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT",
            "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX",
            "VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX",
            "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD",
            "VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV",
            "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV",
            "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV",
            "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV",
            "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV",
            "VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT",
            "VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR",
            "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR",
            "VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR",
            "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR",
            "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR",
            "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR",
            "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR",
            "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR",
            "VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR",
            "VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR",
            "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR",
            "VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT",
            "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR",
            "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT",
            "VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT",
            "VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT",
            "VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT",
            "VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX",
            "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_HDR_METADATA_EXT",
            "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR",
            "VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR",
            "VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR",
            "VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR",
            "VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR",
            "VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR",
            "VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR",
            "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR",
            "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR",
            "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR",
            "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR",
            "VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR",
            "VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR",
            "VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR",
            "VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR",
            "VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR",
            "VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK",
            "VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK",
            "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT",
            "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT",
            "VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT",
            "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT",
            "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID",
            "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID",
            "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID",
            "VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID",
            "VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID",
            "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT",
            "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT",
            "VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT",
            "VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR",
            "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR",
            "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR",
            "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR",
            "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR",
            "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR",
            "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR",
            "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR",
            "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR",
            "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR",
            "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV",
            "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT",
            "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV",
            "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_GEOMETRY_NV",
            "VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV",
            "VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV",
            "VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV",
            "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV",
            "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV",
            "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV",
            "VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT",
            "VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT",
            "VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD",
            "VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD",
            "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP",
            "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV",
            "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV",
            "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV",
            "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL",
            "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL",
            "VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL",
            "VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL",
            "VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL",
            "VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL",
            "VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD",
            "VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD",
            "VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR",
            "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV",
            "VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV",
            "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT",
            "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT",
            "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT",
            "VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR",
            "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV",
            "VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV",
            "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV",
            "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM",
            "VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV",
            "VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV",
            "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR",
            "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR",
            "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR",
            "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR",
            "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR",
            "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR",
            "VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR",
            "VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR",
            "VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR",
            "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR",
            "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES",
            "VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR",
            "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR",
            "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR",
            "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR",
            "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR",
            "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR",
            "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR",
            "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR",
            "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR",
            "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR",
            "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR",
            "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR",
            "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR",
            "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR",
            "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR",
            "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR",
            "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR",
            "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR",
            "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR",
            "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR",
            "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR",
            "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR",
            "VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR",
            "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR",
            "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR",
            "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR",
            "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR",
            "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR",
            "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR",
            "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR",
            "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR",
            "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR",
            "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR",
            "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT",
            "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR",
            "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR",
            "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR",
            "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR",
            "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR",
            "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT",
            "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR",
            "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR",
            "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR",
            "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR",
            "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT",
            "VK_STRUCTURE_TYPE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 586; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkStructureType > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkStructureType");
        }
    };
}
namespace das
{
    template <> struct cast < VkImageLayout > : cast_enum < VkImageLayout > {};
};

class EnumerationVkImageLayout : public das::Enumeration {
public:
    EnumerationVkImageLayout() : das::Enumeration("VkImageLayout") {
        external = true;
        cppName = "VkImageLayout";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkImageLayout >::type >::type;
        VkImageLayout enumArray[] = {
            VkImageLayout::VK_IMAGE_LAYOUT_UNDEFINED,
            VkImageLayout::VK_IMAGE_LAYOUT_GENERAL,
            VkImageLayout::VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
            VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
            VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
            VkImageLayout::VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
            VkImageLayout::VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL,
            VkImageLayout::VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
            VkImageLayout::VK_IMAGE_LAYOUT_PREINITIALIZED,
            VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
            VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
            VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
            VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
            VkImageLayout::VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
            VkImageLayout::VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
            VkImageLayout::VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,
            VkImageLayout::VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR,
            VkImageLayout::VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV,
            VkImageLayout::VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT,
            VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR,
            VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR,
            VkImageLayout::VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR,
            VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR,
            VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR,
            VkImageLayout::VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR,
            VkImageLayout::VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR,
            VkImageLayout::VK_IMAGE_LAYOUT_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_IMAGE_LAYOUT_UNDEFINED",
            "VK_IMAGE_LAYOUT_GENERAL",
            "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL",
            "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL",
            "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL",
            "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL",
            "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL",
            "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL",
            "VK_IMAGE_LAYOUT_PREINITIALIZED",
            "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL",
            "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL",
            "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL",
            "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL",
            "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL",
            "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL",
            "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR",
            "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR",
            "VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV",
            "VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT",
            "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR",
            "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR",
            "VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR",
            "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR",
            "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR",
            "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR",
            "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR",
            "VK_IMAGE_LAYOUT_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 27; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkImageLayout > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkImageLayout");
        }
    };
}
namespace das
{
    template <> struct cast < VkObjectType > : cast_enum < VkObjectType > {};
};

class EnumerationVkObjectType : public das::Enumeration {
public:
    EnumerationVkObjectType() : das::Enumeration("VkObjectType") {
        external = true;
        cppName = "VkObjectType";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkObjectType >::type >::type;
        VkObjectType enumArray[] = {
            VkObjectType::VK_OBJECT_TYPE_UNKNOWN,
            VkObjectType::VK_OBJECT_TYPE_INSTANCE,
            VkObjectType::VK_OBJECT_TYPE_PHYSICAL_DEVICE,
            VkObjectType::VK_OBJECT_TYPE_DEVICE,
            VkObjectType::VK_OBJECT_TYPE_QUEUE,
            VkObjectType::VK_OBJECT_TYPE_SEMAPHORE,
            VkObjectType::VK_OBJECT_TYPE_COMMAND_BUFFER,
            VkObjectType::VK_OBJECT_TYPE_FENCE,
            VkObjectType::VK_OBJECT_TYPE_DEVICE_MEMORY,
            VkObjectType::VK_OBJECT_TYPE_BUFFER,
            VkObjectType::VK_OBJECT_TYPE_IMAGE,
            VkObjectType::VK_OBJECT_TYPE_EVENT,
            VkObjectType::VK_OBJECT_TYPE_QUERY_POOL,
            VkObjectType::VK_OBJECT_TYPE_BUFFER_VIEW,
            VkObjectType::VK_OBJECT_TYPE_IMAGE_VIEW,
            VkObjectType::VK_OBJECT_TYPE_SHADER_MODULE,
            VkObjectType::VK_OBJECT_TYPE_PIPELINE_CACHE,
            VkObjectType::VK_OBJECT_TYPE_PIPELINE_LAYOUT,
            VkObjectType::VK_OBJECT_TYPE_RENDER_PASS,
            VkObjectType::VK_OBJECT_TYPE_PIPELINE,
            VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT,
            VkObjectType::VK_OBJECT_TYPE_SAMPLER,
            VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_POOL,
            VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_SET,
            VkObjectType::VK_OBJECT_TYPE_FRAMEBUFFER,
            VkObjectType::VK_OBJECT_TYPE_COMMAND_POOL,
            VkObjectType::VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
            VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
            VkObjectType::VK_OBJECT_TYPE_SURFACE_KHR,
            VkObjectType::VK_OBJECT_TYPE_SWAPCHAIN_KHR,
            VkObjectType::VK_OBJECT_TYPE_DISPLAY_KHR,
            VkObjectType::VK_OBJECT_TYPE_DISPLAY_MODE_KHR,
            VkObjectType::VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT,
            VkObjectType::VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT,
            VkObjectType::VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR,
            VkObjectType::VK_OBJECT_TYPE_VALIDATION_CACHE_EXT,
            VkObjectType::VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV,
            VkObjectType::VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL,
            VkObjectType::VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR,
            VkObjectType::VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV,
            VkObjectType::VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT,
            VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR,
            VkObjectType::VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR,
            VkObjectType::VK_OBJECT_TYPE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_OBJECT_TYPE_UNKNOWN",
            "VK_OBJECT_TYPE_INSTANCE",
            "VK_OBJECT_TYPE_PHYSICAL_DEVICE",
            "VK_OBJECT_TYPE_DEVICE",
            "VK_OBJECT_TYPE_QUEUE",
            "VK_OBJECT_TYPE_SEMAPHORE",
            "VK_OBJECT_TYPE_COMMAND_BUFFER",
            "VK_OBJECT_TYPE_FENCE",
            "VK_OBJECT_TYPE_DEVICE_MEMORY",
            "VK_OBJECT_TYPE_BUFFER",
            "VK_OBJECT_TYPE_IMAGE",
            "VK_OBJECT_TYPE_EVENT",
            "VK_OBJECT_TYPE_QUERY_POOL",
            "VK_OBJECT_TYPE_BUFFER_VIEW",
            "VK_OBJECT_TYPE_IMAGE_VIEW",
            "VK_OBJECT_TYPE_SHADER_MODULE",
            "VK_OBJECT_TYPE_PIPELINE_CACHE",
            "VK_OBJECT_TYPE_PIPELINE_LAYOUT",
            "VK_OBJECT_TYPE_RENDER_PASS",
            "VK_OBJECT_TYPE_PIPELINE",
            "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT",
            "VK_OBJECT_TYPE_SAMPLER",
            "VK_OBJECT_TYPE_DESCRIPTOR_POOL",
            "VK_OBJECT_TYPE_DESCRIPTOR_SET",
            "VK_OBJECT_TYPE_FRAMEBUFFER",
            "VK_OBJECT_TYPE_COMMAND_POOL",
            "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION",
            "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE",
            "VK_OBJECT_TYPE_SURFACE_KHR",
            "VK_OBJECT_TYPE_SWAPCHAIN_KHR",
            "VK_OBJECT_TYPE_DISPLAY_KHR",
            "VK_OBJECT_TYPE_DISPLAY_MODE_KHR",
            "VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT",
            "VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT",
            "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR",
            "VK_OBJECT_TYPE_VALIDATION_CACHE_EXT",
            "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV",
            "VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL",
            "VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR",
            "VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV",
            "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT",
            "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR",
            "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR",
            "VK_OBJECT_TYPE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 44; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkObjectType > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkObjectType");
        }
    };
}
namespace das
{
    template <> struct cast < VkVendorId > : cast_enum < VkVendorId > {};
};

class EnumerationVkVendorId : public das::Enumeration {
public:
    EnumerationVkVendorId() : das::Enumeration("VkVendorId") {
        external = true;
        cppName = "VkVendorId";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkVendorId >::type >::type;
        VkVendorId enumArray[] = {
            VkVendorId::VK_VENDOR_ID_VIV,
            VkVendorId::VK_VENDOR_ID_VSI,
            VkVendorId::VK_VENDOR_ID_KAZAN,
            VkVendorId::VK_VENDOR_ID_CODEPLAY,
            VkVendorId::VK_VENDOR_ID_MESA,
            VkVendorId::VK_VENDOR_ID_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_VENDOR_ID_VIV",
            "VK_VENDOR_ID_VSI",
            "VK_VENDOR_ID_KAZAN",
            "VK_VENDOR_ID_CODEPLAY",
            "VK_VENDOR_ID_MESA",
            "VK_VENDOR_ID_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 6; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkVendorId > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkVendorId");
        }
    };
}
namespace das
{
    template <> struct cast < VkPipelineCacheHeaderVersion > : cast_enum < VkPipelineCacheHeaderVersion > {};
};

class EnumerationVkPipelineCacheHeaderVersion : public das::Enumeration {
public:
    EnumerationVkPipelineCacheHeaderVersion() : das::Enumeration("VkPipelineCacheHeaderVersion") {
        external = true;
        cppName = "VkPipelineCacheHeaderVersion";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPipelineCacheHeaderVersion >::type >::type;
        VkPipelineCacheHeaderVersion enumArray[] = {
            VkPipelineCacheHeaderVersion::VK_PIPELINE_CACHE_HEADER_VERSION_ONE,
            VkPipelineCacheHeaderVersion::VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_PIPELINE_CACHE_HEADER_VERSION_ONE",
            "VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPipelineCacheHeaderVersion > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPipelineCacheHeaderVersion");
        }
    };
}
namespace das
{
    template <> struct cast < VkSystemAllocationScope > : cast_enum < VkSystemAllocationScope > {};
};

class EnumerationVkSystemAllocationScope : public das::Enumeration {
public:
    EnumerationVkSystemAllocationScope() : das::Enumeration("VkSystemAllocationScope") {
        external = true;
        cppName = "VkSystemAllocationScope";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSystemAllocationScope >::type >::type;
        VkSystemAllocationScope enumArray[] = {
            VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_COMMAND,
            VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_OBJECT,
            VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_CACHE,
            VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_DEVICE,
            VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE,
            VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND",
            "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT",
            "VK_SYSTEM_ALLOCATION_SCOPE_CACHE",
            "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE",
            "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE",
            "VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 6; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSystemAllocationScope > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSystemAllocationScope");
        }
    };
}
namespace das
{
    template <> struct cast < VkInternalAllocationType > : cast_enum < VkInternalAllocationType > {};
};

class EnumerationVkInternalAllocationType : public das::Enumeration {
public:
    EnumerationVkInternalAllocationType() : das::Enumeration("VkInternalAllocationType") {
        external = true;
        cppName = "VkInternalAllocationType";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkInternalAllocationType >::type >::type;
        VkInternalAllocationType enumArray[] = {
            VkInternalAllocationType::VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE,
            VkInternalAllocationType::VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE",
            "VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkInternalAllocationType > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkInternalAllocationType");
        }
    };
}
namespace das
{
    template <> struct cast < VkFormat > : cast_enum < VkFormat > {};
};

class EnumerationVkFormat : public das::Enumeration {
public:
    EnumerationVkFormat() : das::Enumeration("VkFormat") {
        external = true;
        cppName = "VkFormat";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkFormat >::type >::type;
        VkFormat enumArray[] = {
            VkFormat::VK_FORMAT_UNDEFINED,
            VkFormat::VK_FORMAT_R4G4_UNORM_PACK8,
            VkFormat::VK_FORMAT_R4G4B4A4_UNORM_PACK16,
            VkFormat::VK_FORMAT_B4G4R4A4_UNORM_PACK16,
            VkFormat::VK_FORMAT_R5G6B5_UNORM_PACK16,
            VkFormat::VK_FORMAT_B5G6R5_UNORM_PACK16,
            VkFormat::VK_FORMAT_R5G5B5A1_UNORM_PACK16,
            VkFormat::VK_FORMAT_B5G5R5A1_UNORM_PACK16,
            VkFormat::VK_FORMAT_A1R5G5B5_UNORM_PACK16,
            VkFormat::VK_FORMAT_R8_UNORM,
            VkFormat::VK_FORMAT_R8_SNORM,
            VkFormat::VK_FORMAT_R8_USCALED,
            VkFormat::VK_FORMAT_R8_SSCALED,
            VkFormat::VK_FORMAT_R8_UINT,
            VkFormat::VK_FORMAT_R8_SINT,
            VkFormat::VK_FORMAT_R8_SRGB,
            VkFormat::VK_FORMAT_R8G8_UNORM,
            VkFormat::VK_FORMAT_R8G8_SNORM,
            VkFormat::VK_FORMAT_R8G8_USCALED,
            VkFormat::VK_FORMAT_R8G8_SSCALED,
            VkFormat::VK_FORMAT_R8G8_UINT,
            VkFormat::VK_FORMAT_R8G8_SINT,
            VkFormat::VK_FORMAT_R8G8_SRGB,
            VkFormat::VK_FORMAT_R8G8B8_UNORM,
            VkFormat::VK_FORMAT_R8G8B8_SNORM,
            VkFormat::VK_FORMAT_R8G8B8_USCALED,
            VkFormat::VK_FORMAT_R8G8B8_SSCALED,
            VkFormat::VK_FORMAT_R8G8B8_UINT,
            VkFormat::VK_FORMAT_R8G8B8_SINT,
            VkFormat::VK_FORMAT_R8G8B8_SRGB,
            VkFormat::VK_FORMAT_B8G8R8_UNORM,
            VkFormat::VK_FORMAT_B8G8R8_SNORM,
            VkFormat::VK_FORMAT_B8G8R8_USCALED,
            VkFormat::VK_FORMAT_B8G8R8_SSCALED,
            VkFormat::VK_FORMAT_B8G8R8_UINT,
            VkFormat::VK_FORMAT_B8G8R8_SINT,
            VkFormat::VK_FORMAT_B8G8R8_SRGB,
            VkFormat::VK_FORMAT_R8G8B8A8_UNORM,
            VkFormat::VK_FORMAT_R8G8B8A8_SNORM,
            VkFormat::VK_FORMAT_R8G8B8A8_USCALED,
            VkFormat::VK_FORMAT_R8G8B8A8_SSCALED,
            VkFormat::VK_FORMAT_R8G8B8A8_UINT,
            VkFormat::VK_FORMAT_R8G8B8A8_SINT,
            VkFormat::VK_FORMAT_R8G8B8A8_SRGB,
            VkFormat::VK_FORMAT_B8G8R8A8_UNORM,
            VkFormat::VK_FORMAT_B8G8R8A8_SNORM,
            VkFormat::VK_FORMAT_B8G8R8A8_USCALED,
            VkFormat::VK_FORMAT_B8G8R8A8_SSCALED,
            VkFormat::VK_FORMAT_B8G8R8A8_UINT,
            VkFormat::VK_FORMAT_B8G8R8A8_SINT,
            VkFormat::VK_FORMAT_B8G8R8A8_SRGB,
            VkFormat::VK_FORMAT_A8B8G8R8_UNORM_PACK32,
            VkFormat::VK_FORMAT_A8B8G8R8_SNORM_PACK32,
            VkFormat::VK_FORMAT_A8B8G8R8_USCALED_PACK32,
            VkFormat::VK_FORMAT_A8B8G8R8_SSCALED_PACK32,
            VkFormat::VK_FORMAT_A8B8G8R8_UINT_PACK32,
            VkFormat::VK_FORMAT_A8B8G8R8_SINT_PACK32,
            VkFormat::VK_FORMAT_A8B8G8R8_SRGB_PACK32,
            VkFormat::VK_FORMAT_A2R10G10B10_UNORM_PACK32,
            VkFormat::VK_FORMAT_A2R10G10B10_SNORM_PACK32,
            VkFormat::VK_FORMAT_A2R10G10B10_USCALED_PACK32,
            VkFormat::VK_FORMAT_A2R10G10B10_SSCALED_PACK32,
            VkFormat::VK_FORMAT_A2R10G10B10_UINT_PACK32,
            VkFormat::VK_FORMAT_A2R10G10B10_SINT_PACK32,
            VkFormat::VK_FORMAT_A2B10G10R10_UNORM_PACK32,
            VkFormat::VK_FORMAT_A2B10G10R10_SNORM_PACK32,
            VkFormat::VK_FORMAT_A2B10G10R10_USCALED_PACK32,
            VkFormat::VK_FORMAT_A2B10G10R10_SSCALED_PACK32,
            VkFormat::VK_FORMAT_A2B10G10R10_UINT_PACK32,
            VkFormat::VK_FORMAT_A2B10G10R10_SINT_PACK32,
            VkFormat::VK_FORMAT_R16_UNORM,
            VkFormat::VK_FORMAT_R16_SNORM,
            VkFormat::VK_FORMAT_R16_USCALED,
            VkFormat::VK_FORMAT_R16_SSCALED,
            VkFormat::VK_FORMAT_R16_UINT,
            VkFormat::VK_FORMAT_R16_SINT,
            VkFormat::VK_FORMAT_R16_SFLOAT,
            VkFormat::VK_FORMAT_R16G16_UNORM,
            VkFormat::VK_FORMAT_R16G16_SNORM,
            VkFormat::VK_FORMAT_R16G16_USCALED,
            VkFormat::VK_FORMAT_R16G16_SSCALED,
            VkFormat::VK_FORMAT_R16G16_UINT,
            VkFormat::VK_FORMAT_R16G16_SINT,
            VkFormat::VK_FORMAT_R16G16_SFLOAT,
            VkFormat::VK_FORMAT_R16G16B16_UNORM,
            VkFormat::VK_FORMAT_R16G16B16_SNORM,
            VkFormat::VK_FORMAT_R16G16B16_USCALED,
            VkFormat::VK_FORMAT_R16G16B16_SSCALED,
            VkFormat::VK_FORMAT_R16G16B16_UINT,
            VkFormat::VK_FORMAT_R16G16B16_SINT,
            VkFormat::VK_FORMAT_R16G16B16_SFLOAT,
            VkFormat::VK_FORMAT_R16G16B16A16_UNORM,
            VkFormat::VK_FORMAT_R16G16B16A16_SNORM,
            VkFormat::VK_FORMAT_R16G16B16A16_USCALED,
            VkFormat::VK_FORMAT_R16G16B16A16_SSCALED,
            VkFormat::VK_FORMAT_R16G16B16A16_UINT,
            VkFormat::VK_FORMAT_R16G16B16A16_SINT,
            VkFormat::VK_FORMAT_R16G16B16A16_SFLOAT,
            VkFormat::VK_FORMAT_R32_UINT,
            VkFormat::VK_FORMAT_R32_SINT,
            VkFormat::VK_FORMAT_R32_SFLOAT,
            VkFormat::VK_FORMAT_R32G32_UINT,
            VkFormat::VK_FORMAT_R32G32_SINT,
            VkFormat::VK_FORMAT_R32G32_SFLOAT,
            VkFormat::VK_FORMAT_R32G32B32_UINT,
            VkFormat::VK_FORMAT_R32G32B32_SINT,
            VkFormat::VK_FORMAT_R32G32B32_SFLOAT,
            VkFormat::VK_FORMAT_R32G32B32A32_UINT,
            VkFormat::VK_FORMAT_R32G32B32A32_SINT,
            VkFormat::VK_FORMAT_R32G32B32A32_SFLOAT,
            VkFormat::VK_FORMAT_R64_UINT,
            VkFormat::VK_FORMAT_R64_SINT,
            VkFormat::VK_FORMAT_R64_SFLOAT,
            VkFormat::VK_FORMAT_R64G64_UINT,
            VkFormat::VK_FORMAT_R64G64_SINT,
            VkFormat::VK_FORMAT_R64G64_SFLOAT,
            VkFormat::VK_FORMAT_R64G64B64_UINT,
            VkFormat::VK_FORMAT_R64G64B64_SINT,
            VkFormat::VK_FORMAT_R64G64B64_SFLOAT,
            VkFormat::VK_FORMAT_R64G64B64A64_UINT,
            VkFormat::VK_FORMAT_R64G64B64A64_SINT,
            VkFormat::VK_FORMAT_R64G64B64A64_SFLOAT,
            VkFormat::VK_FORMAT_B10G11R11_UFLOAT_PACK32,
            VkFormat::VK_FORMAT_E5B9G9R9_UFLOAT_PACK32,
            VkFormat::VK_FORMAT_D16_UNORM,
            VkFormat::VK_FORMAT_X8_D24_UNORM_PACK32,
            VkFormat::VK_FORMAT_D32_SFLOAT,
            VkFormat::VK_FORMAT_S8_UINT,
            VkFormat::VK_FORMAT_D16_UNORM_S8_UINT,
            VkFormat::VK_FORMAT_D24_UNORM_S8_UINT,
            VkFormat::VK_FORMAT_D32_SFLOAT_S8_UINT,
            VkFormat::VK_FORMAT_BC1_RGB_UNORM_BLOCK,
            VkFormat::VK_FORMAT_BC1_RGB_SRGB_BLOCK,
            VkFormat::VK_FORMAT_BC1_RGBA_UNORM_BLOCK,
            VkFormat::VK_FORMAT_BC1_RGBA_SRGB_BLOCK,
            VkFormat::VK_FORMAT_BC2_UNORM_BLOCK,
            VkFormat::VK_FORMAT_BC2_SRGB_BLOCK,
            VkFormat::VK_FORMAT_BC3_UNORM_BLOCK,
            VkFormat::VK_FORMAT_BC3_SRGB_BLOCK,
            VkFormat::VK_FORMAT_BC4_UNORM_BLOCK,
            VkFormat::VK_FORMAT_BC4_SNORM_BLOCK,
            VkFormat::VK_FORMAT_BC5_UNORM_BLOCK,
            VkFormat::VK_FORMAT_BC5_SNORM_BLOCK,
            VkFormat::VK_FORMAT_BC6H_UFLOAT_BLOCK,
            VkFormat::VK_FORMAT_BC6H_SFLOAT_BLOCK,
            VkFormat::VK_FORMAT_BC7_UNORM_BLOCK,
            VkFormat::VK_FORMAT_BC7_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK,
            VkFormat::VK_FORMAT_EAC_R11_UNORM_BLOCK,
            VkFormat::VK_FORMAT_EAC_R11_SNORM_BLOCK,
            VkFormat::VK_FORMAT_EAC_R11G11_UNORM_BLOCK,
            VkFormat::VK_FORMAT_EAC_R11G11_SNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_4x4_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_4x4_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ASTC_5x4_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_5x4_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ASTC_5x5_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_5x5_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ASTC_6x5_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_6x5_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ASTC_6x6_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_6x6_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ASTC_8x5_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_8x5_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ASTC_8x6_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_8x6_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ASTC_8x8_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_8x8_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ASTC_10x5_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_10x5_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ASTC_10x6_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_10x6_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ASTC_10x8_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_10x8_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ASTC_10x10_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_10x10_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ASTC_12x10_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_12x10_SRGB_BLOCK,
            VkFormat::VK_FORMAT_ASTC_12x12_UNORM_BLOCK,
            VkFormat::VK_FORMAT_ASTC_12x12_SRGB_BLOCK,
            VkFormat::VK_FORMAT_G8B8G8R8_422_UNORM,
            VkFormat::VK_FORMAT_B8G8R8G8_422_UNORM,
            VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
            VkFormat::VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
            VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
            VkFormat::VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
            VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
            VkFormat::VK_FORMAT_R10X6_UNORM_PACK16,
            VkFormat::VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
            VkFormat::VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
            VkFormat::VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
            VkFormat::VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
            VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
            VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
            VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
            VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
            VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
            VkFormat::VK_FORMAT_R12X4_UNORM_PACK16,
            VkFormat::VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
            VkFormat::VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
            VkFormat::VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
            VkFormat::VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
            VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
            VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
            VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
            VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
            VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
            VkFormat::VK_FORMAT_G16B16G16R16_422_UNORM,
            VkFormat::VK_FORMAT_B16G16R16G16_422_UNORM,
            VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
            VkFormat::VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
            VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
            VkFormat::VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
            VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
            VkFormat::VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG,
            VkFormat::VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG,
            VkFormat::VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG,
            VkFormat::VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG,
            VkFormat::VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG,
            VkFormat::VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG,
            VkFormat::VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG,
            VkFormat::VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG,
            VkFormat::VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT,
            VkFormat::VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT,
            VkFormat::VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT,
            VkFormat::VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT,
            VkFormat::VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT,
            VkFormat::VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT,
            VkFormat::VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT,
            VkFormat::VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT,
            VkFormat::VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT,
            VkFormat::VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT,
            VkFormat::VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT,
            VkFormat::VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT,
            VkFormat::VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT,
            VkFormat::VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT,
            VkFormat::VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT,
            VkFormat::VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT,
            VkFormat::VK_FORMAT_G8B8G8R8_422_UNORM_KHR,
            VkFormat::VK_FORMAT_B8G8R8G8_422_UNORM_KHR,
            VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR,
            VkFormat::VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR,
            VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR,
            VkFormat::VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR,
            VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR,
            VkFormat::VK_FORMAT_R10X6_UNORM_PACK16_KHR,
            VkFormat::VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR,
            VkFormat::VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR,
            VkFormat::VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR,
            VkFormat::VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR,
            VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR,
            VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR,
            VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR,
            VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR,
            VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR,
            VkFormat::VK_FORMAT_R12X4_UNORM_PACK16_KHR,
            VkFormat::VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR,
            VkFormat::VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR,
            VkFormat::VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR,
            VkFormat::VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR,
            VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR,
            VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR,
            VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR,
            VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR,
            VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR,
            VkFormat::VK_FORMAT_G16B16G16R16_422_UNORM_KHR,
            VkFormat::VK_FORMAT_B16G16R16G16_422_UNORM_KHR,
            VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR,
            VkFormat::VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR,
            VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR,
            VkFormat::VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR,
            VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR,
            VkFormat::VK_FORMAT_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_FORMAT_UNDEFINED",
            "VK_FORMAT_R4G4_UNORM_PACK8",
            "VK_FORMAT_R4G4B4A4_UNORM_PACK16",
            "VK_FORMAT_B4G4R4A4_UNORM_PACK16",
            "VK_FORMAT_R5G6B5_UNORM_PACK16",
            "VK_FORMAT_B5G6R5_UNORM_PACK16",
            "VK_FORMAT_R5G5B5A1_UNORM_PACK16",
            "VK_FORMAT_B5G5R5A1_UNORM_PACK16",
            "VK_FORMAT_A1R5G5B5_UNORM_PACK16",
            "VK_FORMAT_R8_UNORM",
            "VK_FORMAT_R8_SNORM",
            "VK_FORMAT_R8_USCALED",
            "VK_FORMAT_R8_SSCALED",
            "VK_FORMAT_R8_UINT",
            "VK_FORMAT_R8_SINT",
            "VK_FORMAT_R8_SRGB",
            "VK_FORMAT_R8G8_UNORM",
            "VK_FORMAT_R8G8_SNORM",
            "VK_FORMAT_R8G8_USCALED",
            "VK_FORMAT_R8G8_SSCALED",
            "VK_FORMAT_R8G8_UINT",
            "VK_FORMAT_R8G8_SINT",
            "VK_FORMAT_R8G8_SRGB",
            "VK_FORMAT_R8G8B8_UNORM",
            "VK_FORMAT_R8G8B8_SNORM",
            "VK_FORMAT_R8G8B8_USCALED",
            "VK_FORMAT_R8G8B8_SSCALED",
            "VK_FORMAT_R8G8B8_UINT",
            "VK_FORMAT_R8G8B8_SINT",
            "VK_FORMAT_R8G8B8_SRGB",
            "VK_FORMAT_B8G8R8_UNORM",
            "VK_FORMAT_B8G8R8_SNORM",
            "VK_FORMAT_B8G8R8_USCALED",
            "VK_FORMAT_B8G8R8_SSCALED",
            "VK_FORMAT_B8G8R8_UINT",
            "VK_FORMAT_B8G8R8_SINT",
            "VK_FORMAT_B8G8R8_SRGB",
            "VK_FORMAT_R8G8B8A8_UNORM",
            "VK_FORMAT_R8G8B8A8_SNORM",
            "VK_FORMAT_R8G8B8A8_USCALED",
            "VK_FORMAT_R8G8B8A8_SSCALED",
            "VK_FORMAT_R8G8B8A8_UINT",
            "VK_FORMAT_R8G8B8A8_SINT",
            "VK_FORMAT_R8G8B8A8_SRGB",
            "VK_FORMAT_B8G8R8A8_UNORM",
            "VK_FORMAT_B8G8R8A8_SNORM",
            "VK_FORMAT_B8G8R8A8_USCALED",
            "VK_FORMAT_B8G8R8A8_SSCALED",
            "VK_FORMAT_B8G8R8A8_UINT",
            "VK_FORMAT_B8G8R8A8_SINT",
            "VK_FORMAT_B8G8R8A8_SRGB",
            "VK_FORMAT_A8B8G8R8_UNORM_PACK32",
            "VK_FORMAT_A8B8G8R8_SNORM_PACK32",
            "VK_FORMAT_A8B8G8R8_USCALED_PACK32",
            "VK_FORMAT_A8B8G8R8_SSCALED_PACK32",
            "VK_FORMAT_A8B8G8R8_UINT_PACK32",
            "VK_FORMAT_A8B8G8R8_SINT_PACK32",
            "VK_FORMAT_A8B8G8R8_SRGB_PACK32",
            "VK_FORMAT_A2R10G10B10_UNORM_PACK32",
            "VK_FORMAT_A2R10G10B10_SNORM_PACK32",
            "VK_FORMAT_A2R10G10B10_USCALED_PACK32",
            "VK_FORMAT_A2R10G10B10_SSCALED_PACK32",
            "VK_FORMAT_A2R10G10B10_UINT_PACK32",
            "VK_FORMAT_A2R10G10B10_SINT_PACK32",
            "VK_FORMAT_A2B10G10R10_UNORM_PACK32",
            "VK_FORMAT_A2B10G10R10_SNORM_PACK32",
            "VK_FORMAT_A2B10G10R10_USCALED_PACK32",
            "VK_FORMAT_A2B10G10R10_SSCALED_PACK32",
            "VK_FORMAT_A2B10G10R10_UINT_PACK32",
            "VK_FORMAT_A2B10G10R10_SINT_PACK32",
            "VK_FORMAT_R16_UNORM",
            "VK_FORMAT_R16_SNORM",
            "VK_FORMAT_R16_USCALED",
            "VK_FORMAT_R16_SSCALED",
            "VK_FORMAT_R16_UINT",
            "VK_FORMAT_R16_SINT",
            "VK_FORMAT_R16_SFLOAT",
            "VK_FORMAT_R16G16_UNORM",
            "VK_FORMAT_R16G16_SNORM",
            "VK_FORMAT_R16G16_USCALED",
            "VK_FORMAT_R16G16_SSCALED",
            "VK_FORMAT_R16G16_UINT",
            "VK_FORMAT_R16G16_SINT",
            "VK_FORMAT_R16G16_SFLOAT",
            "VK_FORMAT_R16G16B16_UNORM",
            "VK_FORMAT_R16G16B16_SNORM",
            "VK_FORMAT_R16G16B16_USCALED",
            "VK_FORMAT_R16G16B16_SSCALED",
            "VK_FORMAT_R16G16B16_UINT",
            "VK_FORMAT_R16G16B16_SINT",
            "VK_FORMAT_R16G16B16_SFLOAT",
            "VK_FORMAT_R16G16B16A16_UNORM",
            "VK_FORMAT_R16G16B16A16_SNORM",
            "VK_FORMAT_R16G16B16A16_USCALED",
            "VK_FORMAT_R16G16B16A16_SSCALED",
            "VK_FORMAT_R16G16B16A16_UINT",
            "VK_FORMAT_R16G16B16A16_SINT",
            "VK_FORMAT_R16G16B16A16_SFLOAT",
            "VK_FORMAT_R32_UINT",
            "VK_FORMAT_R32_SINT",
            "VK_FORMAT_R32_SFLOAT",
            "VK_FORMAT_R32G32_UINT",
            "VK_FORMAT_R32G32_SINT",
            "VK_FORMAT_R32G32_SFLOAT",
            "VK_FORMAT_R32G32B32_UINT",
            "VK_FORMAT_R32G32B32_SINT",
            "VK_FORMAT_R32G32B32_SFLOAT",
            "VK_FORMAT_R32G32B32A32_UINT",
            "VK_FORMAT_R32G32B32A32_SINT",
            "VK_FORMAT_R32G32B32A32_SFLOAT",
            "VK_FORMAT_R64_UINT",
            "VK_FORMAT_R64_SINT",
            "VK_FORMAT_R64_SFLOAT",
            "VK_FORMAT_R64G64_UINT",
            "VK_FORMAT_R64G64_SINT",
            "VK_FORMAT_R64G64_SFLOAT",
            "VK_FORMAT_R64G64B64_UINT",
            "VK_FORMAT_R64G64B64_SINT",
            "VK_FORMAT_R64G64B64_SFLOAT",
            "VK_FORMAT_R64G64B64A64_UINT",
            "VK_FORMAT_R64G64B64A64_SINT",
            "VK_FORMAT_R64G64B64A64_SFLOAT",
            "VK_FORMAT_B10G11R11_UFLOAT_PACK32",
            "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32",
            "VK_FORMAT_D16_UNORM",
            "VK_FORMAT_X8_D24_UNORM_PACK32",
            "VK_FORMAT_D32_SFLOAT",
            "VK_FORMAT_S8_UINT",
            "VK_FORMAT_D16_UNORM_S8_UINT",
            "VK_FORMAT_D24_UNORM_S8_UINT",
            "VK_FORMAT_D32_SFLOAT_S8_UINT",
            "VK_FORMAT_BC1_RGB_UNORM_BLOCK",
            "VK_FORMAT_BC1_RGB_SRGB_BLOCK",
            "VK_FORMAT_BC1_RGBA_UNORM_BLOCK",
            "VK_FORMAT_BC1_RGBA_SRGB_BLOCK",
            "VK_FORMAT_BC2_UNORM_BLOCK",
            "VK_FORMAT_BC2_SRGB_BLOCK",
            "VK_FORMAT_BC3_UNORM_BLOCK",
            "VK_FORMAT_BC3_SRGB_BLOCK",
            "VK_FORMAT_BC4_UNORM_BLOCK",
            "VK_FORMAT_BC4_SNORM_BLOCK",
            "VK_FORMAT_BC5_UNORM_BLOCK",
            "VK_FORMAT_BC5_SNORM_BLOCK",
            "VK_FORMAT_BC6H_UFLOAT_BLOCK",
            "VK_FORMAT_BC6H_SFLOAT_BLOCK",
            "VK_FORMAT_BC7_UNORM_BLOCK",
            "VK_FORMAT_BC7_SRGB_BLOCK",
            "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK",
            "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK",
            "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK",
            "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK",
            "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK",
            "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK",
            "VK_FORMAT_EAC_R11_UNORM_BLOCK",
            "VK_FORMAT_EAC_R11_SNORM_BLOCK",
            "VK_FORMAT_EAC_R11G11_UNORM_BLOCK",
            "VK_FORMAT_EAC_R11G11_SNORM_BLOCK",
            "VK_FORMAT_ASTC_4x4_UNORM_BLOCK",
            "VK_FORMAT_ASTC_4x4_SRGB_BLOCK",
            "VK_FORMAT_ASTC_5x4_UNORM_BLOCK",
            "VK_FORMAT_ASTC_5x4_SRGB_BLOCK",
            "VK_FORMAT_ASTC_5x5_UNORM_BLOCK",
            "VK_FORMAT_ASTC_5x5_SRGB_BLOCK",
            "VK_FORMAT_ASTC_6x5_UNORM_BLOCK",
            "VK_FORMAT_ASTC_6x5_SRGB_BLOCK",
            "VK_FORMAT_ASTC_6x6_UNORM_BLOCK",
            "VK_FORMAT_ASTC_6x6_SRGB_BLOCK",
            "VK_FORMAT_ASTC_8x5_UNORM_BLOCK",
            "VK_FORMAT_ASTC_8x5_SRGB_BLOCK",
            "VK_FORMAT_ASTC_8x6_UNORM_BLOCK",
            "VK_FORMAT_ASTC_8x6_SRGB_BLOCK",
            "VK_FORMAT_ASTC_8x8_UNORM_BLOCK",
            "VK_FORMAT_ASTC_8x8_SRGB_BLOCK",
            "VK_FORMAT_ASTC_10x5_UNORM_BLOCK",
            "VK_FORMAT_ASTC_10x5_SRGB_BLOCK",
            "VK_FORMAT_ASTC_10x6_UNORM_BLOCK",
            "VK_FORMAT_ASTC_10x6_SRGB_BLOCK",
            "VK_FORMAT_ASTC_10x8_UNORM_BLOCK",
            "VK_FORMAT_ASTC_10x8_SRGB_BLOCK",
            "VK_FORMAT_ASTC_10x10_UNORM_BLOCK",
            "VK_FORMAT_ASTC_10x10_SRGB_BLOCK",
            "VK_FORMAT_ASTC_12x10_UNORM_BLOCK",
            "VK_FORMAT_ASTC_12x10_SRGB_BLOCK",
            "VK_FORMAT_ASTC_12x12_UNORM_BLOCK",
            "VK_FORMAT_ASTC_12x12_SRGB_BLOCK",
            "VK_FORMAT_G8B8G8R8_422_UNORM",
            "VK_FORMAT_B8G8R8G8_422_UNORM",
            "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM",
            "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM",
            "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM",
            "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM",
            "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM",
            "VK_FORMAT_R10X6_UNORM_PACK16",
            "VK_FORMAT_R10X6G10X6_UNORM_2PACK16",
            "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16",
            "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16",
            "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16",
            "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16",
            "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16",
            "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16",
            "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16",
            "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16",
            "VK_FORMAT_R12X4_UNORM_PACK16",
            "VK_FORMAT_R12X4G12X4_UNORM_2PACK16",
            "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16",
            "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16",
            "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16",
            "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16",
            "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16",
            "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16",
            "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16",
            "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16",
            "VK_FORMAT_G16B16G16R16_422_UNORM",
            "VK_FORMAT_B16G16R16G16_422_UNORM",
            "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM",
            "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM",
            "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM",
            "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM",
            "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM",
            "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG",
            "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG",
            "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG",
            "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG",
            "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG",
            "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG",
            "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG",
            "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG",
            "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT",
            "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT",
            "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT",
            "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT",
            "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT",
            "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT",
            "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT",
            "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT",
            "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT",
            "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT",
            "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT",
            "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT",
            "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT",
            "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT",
            "VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT",
            "VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT",
            "VK_FORMAT_G8B8G8R8_422_UNORM_KHR",
            "VK_FORMAT_B8G8R8G8_422_UNORM_KHR",
            "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR",
            "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR",
            "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR",
            "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR",
            "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR",
            "VK_FORMAT_R10X6_UNORM_PACK16_KHR",
            "VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR",
            "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR",
            "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR",
            "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR",
            "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR",
            "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR",
            "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR",
            "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR",
            "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR",
            "VK_FORMAT_R12X4_UNORM_PACK16_KHR",
            "VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR",
            "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR",
            "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR",
            "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR",
            "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR",
            "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR",
            "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR",
            "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR",
            "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR",
            "VK_FORMAT_G16B16G16R16_422_UNORM_KHR",
            "VK_FORMAT_B16G16R16G16_422_UNORM_KHR",
            "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR",
            "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR",
            "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR",
            "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR",
            "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR",
            "VK_FORMAT_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 278; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkFormat > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkFormat");
        }
    };
}
namespace das
{
    template <> struct cast < VkImageTiling > : cast_enum < VkImageTiling > {};
};

class EnumerationVkImageTiling : public das::Enumeration {
public:
    EnumerationVkImageTiling() : das::Enumeration("VkImageTiling") {
        external = true;
        cppName = "VkImageTiling";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkImageTiling >::type >::type;
        VkImageTiling enumArray[] = {
            VkImageTiling::VK_IMAGE_TILING_OPTIMAL,
            VkImageTiling::VK_IMAGE_TILING_LINEAR,
            VkImageTiling::VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT,
            VkImageTiling::VK_IMAGE_TILING_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_IMAGE_TILING_OPTIMAL",
            "VK_IMAGE_TILING_LINEAR",
            "VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT",
            "VK_IMAGE_TILING_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkImageTiling > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkImageTiling");
        }
    };
}
namespace das
{
    template <> struct cast < VkImageType > : cast_enum < VkImageType > {};
};

class EnumerationVkImageType : public das::Enumeration {
public:
    EnumerationVkImageType() : das::Enumeration("VkImageType") {
        external = true;
        cppName = "VkImageType";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkImageType >::type >::type;
        VkImageType enumArray[] = {
            VkImageType::VK_IMAGE_TYPE_1D,
            VkImageType::VK_IMAGE_TYPE_2D,
            VkImageType::VK_IMAGE_TYPE_3D,
            VkImageType::VK_IMAGE_TYPE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_IMAGE_TYPE_1D",
            "VK_IMAGE_TYPE_2D",
            "VK_IMAGE_TYPE_3D",
            "VK_IMAGE_TYPE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkImageType > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkImageType");
        }
    };
}
namespace das
{
    template <> struct cast < VkPhysicalDeviceType > : cast_enum < VkPhysicalDeviceType > {};
};

class EnumerationVkPhysicalDeviceType : public das::Enumeration {
public:
    EnumerationVkPhysicalDeviceType() : das::Enumeration("VkPhysicalDeviceType") {
        external = true;
        cppName = "VkPhysicalDeviceType";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPhysicalDeviceType >::type >::type;
        VkPhysicalDeviceType enumArray[] = {
            VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_OTHER,
            VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU,
            VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU,
            VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU,
            VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_CPU,
            VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_PHYSICAL_DEVICE_TYPE_OTHER",
            "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU",
            "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU",
            "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU",
            "VK_PHYSICAL_DEVICE_TYPE_CPU",
            "VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 6; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPhysicalDeviceType > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPhysicalDeviceType");
        }
    };
}
namespace das
{
    template <> struct cast < VkQueryType > : cast_enum < VkQueryType > {};
};

class EnumerationVkQueryType : public das::Enumeration {
public:
    EnumerationVkQueryType() : das::Enumeration("VkQueryType") {
        external = true;
        cppName = "VkQueryType";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkQueryType >::type >::type;
        VkQueryType enumArray[] = {
            VkQueryType::VK_QUERY_TYPE_OCCLUSION,
            VkQueryType::VK_QUERY_TYPE_PIPELINE_STATISTICS,
            VkQueryType::VK_QUERY_TYPE_TIMESTAMP,
            VkQueryType::VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT,
            VkQueryType::VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR,
            VkQueryType::VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR,
            VkQueryType::VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR,
            VkQueryType::VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV,
            VkQueryType::VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL,
            VkQueryType::VK_QUERY_TYPE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_QUERY_TYPE_OCCLUSION",
            "VK_QUERY_TYPE_PIPELINE_STATISTICS",
            "VK_QUERY_TYPE_TIMESTAMP",
            "VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT",
            "VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR",
            "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR",
            "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR",
            "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV",
            "VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL",
            "VK_QUERY_TYPE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 10; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkQueryType > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkQueryType");
        }
    };
}
namespace das
{
    template <> struct cast < VkSharingMode > : cast_enum < VkSharingMode > {};
};

class EnumerationVkSharingMode : public das::Enumeration {
public:
    EnumerationVkSharingMode() : das::Enumeration("VkSharingMode") {
        external = true;
        cppName = "VkSharingMode";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSharingMode >::type >::type;
        VkSharingMode enumArray[] = {
            VkSharingMode::VK_SHARING_MODE_EXCLUSIVE,
            VkSharingMode::VK_SHARING_MODE_CONCURRENT,
            VkSharingMode::VK_SHARING_MODE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SHARING_MODE_EXCLUSIVE",
            "VK_SHARING_MODE_CONCURRENT",
            "VK_SHARING_MODE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSharingMode > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSharingMode");
        }
    };
}
namespace das
{
    template <> struct cast < VkComponentSwizzle > : cast_enum < VkComponentSwizzle > {};
};

class EnumerationVkComponentSwizzle : public das::Enumeration {
public:
    EnumerationVkComponentSwizzle() : das::Enumeration("VkComponentSwizzle") {
        external = true;
        cppName = "VkComponentSwizzle";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkComponentSwizzle >::type >::type;
        VkComponentSwizzle enumArray[] = {
            VkComponentSwizzle::VK_COMPONENT_SWIZZLE_IDENTITY,
            VkComponentSwizzle::VK_COMPONENT_SWIZZLE_ZERO,
            VkComponentSwizzle::VK_COMPONENT_SWIZZLE_ONE,
            VkComponentSwizzle::VK_COMPONENT_SWIZZLE_R,
            VkComponentSwizzle::VK_COMPONENT_SWIZZLE_G,
            VkComponentSwizzle::VK_COMPONENT_SWIZZLE_B,
            VkComponentSwizzle::VK_COMPONENT_SWIZZLE_A,
            VkComponentSwizzle::VK_COMPONENT_SWIZZLE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_COMPONENT_SWIZZLE_IDENTITY",
            "VK_COMPONENT_SWIZZLE_ZERO",
            "VK_COMPONENT_SWIZZLE_ONE",
            "VK_COMPONENT_SWIZZLE_R",
            "VK_COMPONENT_SWIZZLE_G",
            "VK_COMPONENT_SWIZZLE_B",
            "VK_COMPONENT_SWIZZLE_A",
            "VK_COMPONENT_SWIZZLE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 8; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkComponentSwizzle > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkComponentSwizzle");
        }
    };
}
namespace das
{
    template <> struct cast < VkImageViewType > : cast_enum < VkImageViewType > {};
};

class EnumerationVkImageViewType : public das::Enumeration {
public:
    EnumerationVkImageViewType() : das::Enumeration("VkImageViewType") {
        external = true;
        cppName = "VkImageViewType";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkImageViewType >::type >::type;
        VkImageViewType enumArray[] = {
            VkImageViewType::VK_IMAGE_VIEW_TYPE_1D,
            VkImageViewType::VK_IMAGE_VIEW_TYPE_2D,
            VkImageViewType::VK_IMAGE_VIEW_TYPE_3D,
            VkImageViewType::VK_IMAGE_VIEW_TYPE_CUBE,
            VkImageViewType::VK_IMAGE_VIEW_TYPE_1D_ARRAY,
            VkImageViewType::VK_IMAGE_VIEW_TYPE_2D_ARRAY,
            VkImageViewType::VK_IMAGE_VIEW_TYPE_CUBE_ARRAY,
            VkImageViewType::VK_IMAGE_VIEW_TYPE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_IMAGE_VIEW_TYPE_1D",
            "VK_IMAGE_VIEW_TYPE_2D",
            "VK_IMAGE_VIEW_TYPE_3D",
            "VK_IMAGE_VIEW_TYPE_CUBE",
            "VK_IMAGE_VIEW_TYPE_1D_ARRAY",
            "VK_IMAGE_VIEW_TYPE_2D_ARRAY",
            "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY",
            "VK_IMAGE_VIEW_TYPE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 8; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkImageViewType > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkImageViewType");
        }
    };
}
namespace das
{
    template <> struct cast < VkBlendFactor > : cast_enum < VkBlendFactor > {};
};

class EnumerationVkBlendFactor : public das::Enumeration {
public:
    EnumerationVkBlendFactor() : das::Enumeration("VkBlendFactor") {
        external = true;
        cppName = "VkBlendFactor";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkBlendFactor >::type >::type;
        VkBlendFactor enumArray[] = {
            VkBlendFactor::VK_BLEND_FACTOR_ZERO,
            VkBlendFactor::VK_BLEND_FACTOR_ONE,
            VkBlendFactor::VK_BLEND_FACTOR_SRC_COLOR,
            VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR,
            VkBlendFactor::VK_BLEND_FACTOR_DST_COLOR,
            VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR,
            VkBlendFactor::VK_BLEND_FACTOR_SRC_ALPHA,
            VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
            VkBlendFactor::VK_BLEND_FACTOR_DST_ALPHA,
            VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA,
            VkBlendFactor::VK_BLEND_FACTOR_CONSTANT_COLOR,
            VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR,
            VkBlendFactor::VK_BLEND_FACTOR_CONSTANT_ALPHA,
            VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA,
            VkBlendFactor::VK_BLEND_FACTOR_SRC_ALPHA_SATURATE,
            VkBlendFactor::VK_BLEND_FACTOR_SRC1_COLOR,
            VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR,
            VkBlendFactor::VK_BLEND_FACTOR_SRC1_ALPHA,
            VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA,
            VkBlendFactor::VK_BLEND_FACTOR_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_BLEND_FACTOR_ZERO",
            "VK_BLEND_FACTOR_ONE",
            "VK_BLEND_FACTOR_SRC_COLOR",
            "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR",
            "VK_BLEND_FACTOR_DST_COLOR",
            "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR",
            "VK_BLEND_FACTOR_SRC_ALPHA",
            "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA",
            "VK_BLEND_FACTOR_DST_ALPHA",
            "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA",
            "VK_BLEND_FACTOR_CONSTANT_COLOR",
            "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR",
            "VK_BLEND_FACTOR_CONSTANT_ALPHA",
            "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA",
            "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE",
            "VK_BLEND_FACTOR_SRC1_COLOR",
            "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR",
            "VK_BLEND_FACTOR_SRC1_ALPHA",
            "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA",
            "VK_BLEND_FACTOR_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 20; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkBlendFactor > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkBlendFactor");
        }
    };
}
namespace das
{
    template <> struct cast < VkBlendOp > : cast_enum < VkBlendOp > {};
};

class EnumerationVkBlendOp : public das::Enumeration {
public:
    EnumerationVkBlendOp() : das::Enumeration("VkBlendOp") {
        external = true;
        cppName = "VkBlendOp";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkBlendOp >::type >::type;
        VkBlendOp enumArray[] = {
            VkBlendOp::VK_BLEND_OP_ADD,
            VkBlendOp::VK_BLEND_OP_SUBTRACT,
            VkBlendOp::VK_BLEND_OP_REVERSE_SUBTRACT,
            VkBlendOp::VK_BLEND_OP_MIN,
            VkBlendOp::VK_BLEND_OP_MAX,
            VkBlendOp::VK_BLEND_OP_ZERO_EXT,
            VkBlendOp::VK_BLEND_OP_SRC_EXT,
            VkBlendOp::VK_BLEND_OP_DST_EXT,
            VkBlendOp::VK_BLEND_OP_SRC_OVER_EXT,
            VkBlendOp::VK_BLEND_OP_DST_OVER_EXT,
            VkBlendOp::VK_BLEND_OP_SRC_IN_EXT,
            VkBlendOp::VK_BLEND_OP_DST_IN_EXT,
            VkBlendOp::VK_BLEND_OP_SRC_OUT_EXT,
            VkBlendOp::VK_BLEND_OP_DST_OUT_EXT,
            VkBlendOp::VK_BLEND_OP_SRC_ATOP_EXT,
            VkBlendOp::VK_BLEND_OP_DST_ATOP_EXT,
            VkBlendOp::VK_BLEND_OP_XOR_EXT,
            VkBlendOp::VK_BLEND_OP_MULTIPLY_EXT,
            VkBlendOp::VK_BLEND_OP_SCREEN_EXT,
            VkBlendOp::VK_BLEND_OP_OVERLAY_EXT,
            VkBlendOp::VK_BLEND_OP_DARKEN_EXT,
            VkBlendOp::VK_BLEND_OP_LIGHTEN_EXT,
            VkBlendOp::VK_BLEND_OP_COLORDODGE_EXT,
            VkBlendOp::VK_BLEND_OP_COLORBURN_EXT,
            VkBlendOp::VK_BLEND_OP_HARDLIGHT_EXT,
            VkBlendOp::VK_BLEND_OP_SOFTLIGHT_EXT,
            VkBlendOp::VK_BLEND_OP_DIFFERENCE_EXT,
            VkBlendOp::VK_BLEND_OP_EXCLUSION_EXT,
            VkBlendOp::VK_BLEND_OP_INVERT_EXT,
            VkBlendOp::VK_BLEND_OP_INVERT_RGB_EXT,
            VkBlendOp::VK_BLEND_OP_LINEARDODGE_EXT,
            VkBlendOp::VK_BLEND_OP_LINEARBURN_EXT,
            VkBlendOp::VK_BLEND_OP_VIVIDLIGHT_EXT,
            VkBlendOp::VK_BLEND_OP_LINEARLIGHT_EXT,
            VkBlendOp::VK_BLEND_OP_PINLIGHT_EXT,
            VkBlendOp::VK_BLEND_OP_HARDMIX_EXT,
            VkBlendOp::VK_BLEND_OP_HSL_HUE_EXT,
            VkBlendOp::VK_BLEND_OP_HSL_SATURATION_EXT,
            VkBlendOp::VK_BLEND_OP_HSL_COLOR_EXT,
            VkBlendOp::VK_BLEND_OP_HSL_LUMINOSITY_EXT,
            VkBlendOp::VK_BLEND_OP_PLUS_EXT,
            VkBlendOp::VK_BLEND_OP_PLUS_CLAMPED_EXT,
            VkBlendOp::VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT,
            VkBlendOp::VK_BLEND_OP_PLUS_DARKER_EXT,
            VkBlendOp::VK_BLEND_OP_MINUS_EXT,
            VkBlendOp::VK_BLEND_OP_MINUS_CLAMPED_EXT,
            VkBlendOp::VK_BLEND_OP_CONTRAST_EXT,
            VkBlendOp::VK_BLEND_OP_INVERT_OVG_EXT,
            VkBlendOp::VK_BLEND_OP_RED_EXT,
            VkBlendOp::VK_BLEND_OP_GREEN_EXT,
            VkBlendOp::VK_BLEND_OP_BLUE_EXT,
            VkBlendOp::VK_BLEND_OP_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_BLEND_OP_ADD",
            "VK_BLEND_OP_SUBTRACT",
            "VK_BLEND_OP_REVERSE_SUBTRACT",
            "VK_BLEND_OP_MIN",
            "VK_BLEND_OP_MAX",
            "VK_BLEND_OP_ZERO_EXT",
            "VK_BLEND_OP_SRC_EXT",
            "VK_BLEND_OP_DST_EXT",
            "VK_BLEND_OP_SRC_OVER_EXT",
            "VK_BLEND_OP_DST_OVER_EXT",
            "VK_BLEND_OP_SRC_IN_EXT",
            "VK_BLEND_OP_DST_IN_EXT",
            "VK_BLEND_OP_SRC_OUT_EXT",
            "VK_BLEND_OP_DST_OUT_EXT",
            "VK_BLEND_OP_SRC_ATOP_EXT",
            "VK_BLEND_OP_DST_ATOP_EXT",
            "VK_BLEND_OP_XOR_EXT",
            "VK_BLEND_OP_MULTIPLY_EXT",
            "VK_BLEND_OP_SCREEN_EXT",
            "VK_BLEND_OP_OVERLAY_EXT",
            "VK_BLEND_OP_DARKEN_EXT",
            "VK_BLEND_OP_LIGHTEN_EXT",
            "VK_BLEND_OP_COLORDODGE_EXT",
            "VK_BLEND_OP_COLORBURN_EXT",
            "VK_BLEND_OP_HARDLIGHT_EXT",
            "VK_BLEND_OP_SOFTLIGHT_EXT",
            "VK_BLEND_OP_DIFFERENCE_EXT",
            "VK_BLEND_OP_EXCLUSION_EXT",
            "VK_BLEND_OP_INVERT_EXT",
            "VK_BLEND_OP_INVERT_RGB_EXT",
            "VK_BLEND_OP_LINEARDODGE_EXT",
            "VK_BLEND_OP_LINEARBURN_EXT",
            "VK_BLEND_OP_VIVIDLIGHT_EXT",
            "VK_BLEND_OP_LINEARLIGHT_EXT",
            "VK_BLEND_OP_PINLIGHT_EXT",
            "VK_BLEND_OP_HARDMIX_EXT",
            "VK_BLEND_OP_HSL_HUE_EXT",
            "VK_BLEND_OP_HSL_SATURATION_EXT",
            "VK_BLEND_OP_HSL_COLOR_EXT",
            "VK_BLEND_OP_HSL_LUMINOSITY_EXT",
            "VK_BLEND_OP_PLUS_EXT",
            "VK_BLEND_OP_PLUS_CLAMPED_EXT",
            "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT",
            "VK_BLEND_OP_PLUS_DARKER_EXT",
            "VK_BLEND_OP_MINUS_EXT",
            "VK_BLEND_OP_MINUS_CLAMPED_EXT",
            "VK_BLEND_OP_CONTRAST_EXT",
            "VK_BLEND_OP_INVERT_OVG_EXT",
            "VK_BLEND_OP_RED_EXT",
            "VK_BLEND_OP_GREEN_EXT",
            "VK_BLEND_OP_BLUE_EXT",
            "VK_BLEND_OP_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 52; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkBlendOp > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkBlendOp");
        }
    };
}
namespace das
{
    template <> struct cast < VkCompareOp > : cast_enum < VkCompareOp > {};
};

class EnumerationVkCompareOp : public das::Enumeration {
public:
    EnumerationVkCompareOp() : das::Enumeration("VkCompareOp") {
        external = true;
        cppName = "VkCompareOp";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkCompareOp >::type >::type;
        VkCompareOp enumArray[] = {
            VkCompareOp::VK_COMPARE_OP_NEVER,
            VkCompareOp::VK_COMPARE_OP_LESS,
            VkCompareOp::VK_COMPARE_OP_EQUAL,
            VkCompareOp::VK_COMPARE_OP_LESS_OR_EQUAL,
            VkCompareOp::VK_COMPARE_OP_GREATER,
            VkCompareOp::VK_COMPARE_OP_NOT_EQUAL,
            VkCompareOp::VK_COMPARE_OP_GREATER_OR_EQUAL,
            VkCompareOp::VK_COMPARE_OP_ALWAYS,
            VkCompareOp::VK_COMPARE_OP_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_COMPARE_OP_NEVER",
            "VK_COMPARE_OP_LESS",
            "VK_COMPARE_OP_EQUAL",
            "VK_COMPARE_OP_LESS_OR_EQUAL",
            "VK_COMPARE_OP_GREATER",
            "VK_COMPARE_OP_NOT_EQUAL",
            "VK_COMPARE_OP_GREATER_OR_EQUAL",
            "VK_COMPARE_OP_ALWAYS",
            "VK_COMPARE_OP_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 9; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkCompareOp > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkCompareOp");
        }
    };
}
namespace das
{
    template <> struct cast < VkDynamicState > : cast_enum < VkDynamicState > {};
};

class EnumerationVkDynamicState : public das::Enumeration {
public:
    EnumerationVkDynamicState() : das::Enumeration("VkDynamicState") {
        external = true;
        cppName = "VkDynamicState";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDynamicState >::type >::type;
        VkDynamicState enumArray[] = {
            VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT,
            VkDynamicState::VK_DYNAMIC_STATE_SCISSOR,
            VkDynamicState::VK_DYNAMIC_STATE_LINE_WIDTH,
            VkDynamicState::VK_DYNAMIC_STATE_DEPTH_BIAS,
            VkDynamicState::VK_DYNAMIC_STATE_BLEND_CONSTANTS,
            VkDynamicState::VK_DYNAMIC_STATE_DEPTH_BOUNDS,
            VkDynamicState::VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK,
            VkDynamicState::VK_DYNAMIC_STATE_STENCIL_WRITE_MASK,
            VkDynamicState::VK_DYNAMIC_STATE_STENCIL_REFERENCE,
            VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV,
            VkDynamicState::VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR,
            VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV,
            VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV,
            VkDynamicState::VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV,
            VkDynamicState::VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR,
            VkDynamicState::VK_DYNAMIC_STATE_LINE_STIPPLE_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_CULL_MODE_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_FRONT_FACE_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_STENCIL_OP_EXT,
            VkDynamicState::VK_DYNAMIC_STATE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_DYNAMIC_STATE_VIEWPORT",
            "VK_DYNAMIC_STATE_SCISSOR",
            "VK_DYNAMIC_STATE_LINE_WIDTH",
            "VK_DYNAMIC_STATE_DEPTH_BIAS",
            "VK_DYNAMIC_STATE_BLEND_CONSTANTS",
            "VK_DYNAMIC_STATE_DEPTH_BOUNDS",
            "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK",
            "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK",
            "VK_DYNAMIC_STATE_STENCIL_REFERENCE",
            "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV",
            "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT",
            "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT",
            "VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR",
            "VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV",
            "VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV",
            "VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV",
            "VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR",
            "VK_DYNAMIC_STATE_LINE_STIPPLE_EXT",
            "VK_DYNAMIC_STATE_CULL_MODE_EXT",
            "VK_DYNAMIC_STATE_FRONT_FACE_EXT",
            "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT",
            "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT",
            "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT",
            "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT",
            "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT",
            "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT",
            "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT",
            "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT",
            "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT",
            "VK_DYNAMIC_STATE_STENCIL_OP_EXT",
            "VK_DYNAMIC_STATE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 31; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDynamicState > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDynamicState");
        }
    };
}
namespace das
{
    template <> struct cast < VkFrontFace > : cast_enum < VkFrontFace > {};
};

class EnumerationVkFrontFace : public das::Enumeration {
public:
    EnumerationVkFrontFace() : das::Enumeration("VkFrontFace") {
        external = true;
        cppName = "VkFrontFace";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkFrontFace >::type >::type;
        VkFrontFace enumArray[] = {
            VkFrontFace::VK_FRONT_FACE_COUNTER_CLOCKWISE,
            VkFrontFace::VK_FRONT_FACE_CLOCKWISE,
            VkFrontFace::VK_FRONT_FACE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_FRONT_FACE_COUNTER_CLOCKWISE",
            "VK_FRONT_FACE_CLOCKWISE",
            "VK_FRONT_FACE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkFrontFace > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkFrontFace");
        }
    };
}
namespace das
{
    template <> struct cast < VkVertexInputRate > : cast_enum < VkVertexInputRate > {};
};

class EnumerationVkVertexInputRate : public das::Enumeration {
public:
    EnumerationVkVertexInputRate() : das::Enumeration("VkVertexInputRate") {
        external = true;
        cppName = "VkVertexInputRate";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkVertexInputRate >::type >::type;
        VkVertexInputRate enumArray[] = {
            VkVertexInputRate::VK_VERTEX_INPUT_RATE_VERTEX,
            VkVertexInputRate::VK_VERTEX_INPUT_RATE_INSTANCE,
            VkVertexInputRate::VK_VERTEX_INPUT_RATE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_VERTEX_INPUT_RATE_VERTEX",
            "VK_VERTEX_INPUT_RATE_INSTANCE",
            "VK_VERTEX_INPUT_RATE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkVertexInputRate > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkVertexInputRate");
        }
    };
}
namespace das
{
    template <> struct cast < VkPrimitiveTopology > : cast_enum < VkPrimitiveTopology > {};
};

class EnumerationVkPrimitiveTopology : public das::Enumeration {
public:
    EnumerationVkPrimitiveTopology() : das::Enumeration("VkPrimitiveTopology") {
        external = true;
        cppName = "VkPrimitiveTopology";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPrimitiveTopology >::type >::type;
        VkPrimitiveTopology enumArray[] = {
            VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
            VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_LINE_LIST,
            VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_LINE_STRIP,
            VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
            VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP,
            VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN,
            VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY,
            VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY,
            VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY,
            VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY,
            VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_PATCH_LIST,
            VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_PRIMITIVE_TOPOLOGY_POINT_LIST",
            "VK_PRIMITIVE_TOPOLOGY_LINE_LIST",
            "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP",
            "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST",
            "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP",
            "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN",
            "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY",
            "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY",
            "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY",
            "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY",
            "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST",
            "VK_PRIMITIVE_TOPOLOGY_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 12; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPrimitiveTopology > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPrimitiveTopology");
        }
    };
}
namespace das
{
    template <> struct cast < VkPolygonMode > : cast_enum < VkPolygonMode > {};
};

class EnumerationVkPolygonMode : public das::Enumeration {
public:
    EnumerationVkPolygonMode() : das::Enumeration("VkPolygonMode") {
        external = true;
        cppName = "VkPolygonMode";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPolygonMode >::type >::type;
        VkPolygonMode enumArray[] = {
            VkPolygonMode::VK_POLYGON_MODE_FILL,
            VkPolygonMode::VK_POLYGON_MODE_LINE,
            VkPolygonMode::VK_POLYGON_MODE_POINT,
            VkPolygonMode::VK_POLYGON_MODE_FILL_RECTANGLE_NV,
            VkPolygonMode::VK_POLYGON_MODE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_POLYGON_MODE_FILL",
            "VK_POLYGON_MODE_LINE",
            "VK_POLYGON_MODE_POINT",
            "VK_POLYGON_MODE_FILL_RECTANGLE_NV",
            "VK_POLYGON_MODE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPolygonMode > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPolygonMode");
        }
    };
}
namespace das
{
    template <> struct cast < VkStencilOp > : cast_enum < VkStencilOp > {};
};

class EnumerationVkStencilOp : public das::Enumeration {
public:
    EnumerationVkStencilOp() : das::Enumeration("VkStencilOp") {
        external = true;
        cppName = "VkStencilOp";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkStencilOp >::type >::type;
        VkStencilOp enumArray[] = {
            VkStencilOp::VK_STENCIL_OP_KEEP,
            VkStencilOp::VK_STENCIL_OP_ZERO,
            VkStencilOp::VK_STENCIL_OP_REPLACE,
            VkStencilOp::VK_STENCIL_OP_INCREMENT_AND_CLAMP,
            VkStencilOp::VK_STENCIL_OP_DECREMENT_AND_CLAMP,
            VkStencilOp::VK_STENCIL_OP_INVERT,
            VkStencilOp::VK_STENCIL_OP_INCREMENT_AND_WRAP,
            VkStencilOp::VK_STENCIL_OP_DECREMENT_AND_WRAP,
            VkStencilOp::VK_STENCIL_OP_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_STENCIL_OP_KEEP",
            "VK_STENCIL_OP_ZERO",
            "VK_STENCIL_OP_REPLACE",
            "VK_STENCIL_OP_INCREMENT_AND_CLAMP",
            "VK_STENCIL_OP_DECREMENT_AND_CLAMP",
            "VK_STENCIL_OP_INVERT",
            "VK_STENCIL_OP_INCREMENT_AND_WRAP",
            "VK_STENCIL_OP_DECREMENT_AND_WRAP",
            "VK_STENCIL_OP_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 9; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkStencilOp > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkStencilOp");
        }
    };
}
namespace das
{
    template <> struct cast < VkLogicOp > : cast_enum < VkLogicOp > {};
};

class EnumerationVkLogicOp : public das::Enumeration {
public:
    EnumerationVkLogicOp() : das::Enumeration("VkLogicOp") {
        external = true;
        cppName = "VkLogicOp";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkLogicOp >::type >::type;
        VkLogicOp enumArray[] = {
            VkLogicOp::VK_LOGIC_OP_CLEAR,
            VkLogicOp::VK_LOGIC_OP_AND,
            VkLogicOp::VK_LOGIC_OP_AND_REVERSE,
            VkLogicOp::VK_LOGIC_OP_COPY,
            VkLogicOp::VK_LOGIC_OP_AND_INVERTED,
            VkLogicOp::VK_LOGIC_OP_NO_OP,
            VkLogicOp::VK_LOGIC_OP_XOR,
            VkLogicOp::VK_LOGIC_OP_OR,
            VkLogicOp::VK_LOGIC_OP_NOR,
            VkLogicOp::VK_LOGIC_OP_EQUIVALENT,
            VkLogicOp::VK_LOGIC_OP_INVERT,
            VkLogicOp::VK_LOGIC_OP_OR_REVERSE,
            VkLogicOp::VK_LOGIC_OP_COPY_INVERTED,
            VkLogicOp::VK_LOGIC_OP_OR_INVERTED,
            VkLogicOp::VK_LOGIC_OP_NAND,
            VkLogicOp::VK_LOGIC_OP_SET,
            VkLogicOp::VK_LOGIC_OP_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_LOGIC_OP_CLEAR",
            "VK_LOGIC_OP_AND",
            "VK_LOGIC_OP_AND_REVERSE",
            "VK_LOGIC_OP_COPY",
            "VK_LOGIC_OP_AND_INVERTED",
            "VK_LOGIC_OP_NO_OP",
            "VK_LOGIC_OP_XOR",
            "VK_LOGIC_OP_OR",
            "VK_LOGIC_OP_NOR",
            "VK_LOGIC_OP_EQUIVALENT",
            "VK_LOGIC_OP_INVERT",
            "VK_LOGIC_OP_OR_REVERSE",
            "VK_LOGIC_OP_COPY_INVERTED",
            "VK_LOGIC_OP_OR_INVERTED",
            "VK_LOGIC_OP_NAND",
            "VK_LOGIC_OP_SET",
            "VK_LOGIC_OP_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 17; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkLogicOp > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkLogicOp");
        }
    };
}
namespace das
{
    template <> struct cast < VkBorderColor > : cast_enum < VkBorderColor > {};
};

class EnumerationVkBorderColor : public das::Enumeration {
public:
    EnumerationVkBorderColor() : das::Enumeration("VkBorderColor") {
        external = true;
        cppName = "VkBorderColor";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkBorderColor >::type >::type;
        VkBorderColor enumArray[] = {
            VkBorderColor::VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK,
            VkBorderColor::VK_BORDER_COLOR_INT_TRANSPARENT_BLACK,
            VkBorderColor::VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK,
            VkBorderColor::VK_BORDER_COLOR_INT_OPAQUE_BLACK,
            VkBorderColor::VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE,
            VkBorderColor::VK_BORDER_COLOR_INT_OPAQUE_WHITE,
            VkBorderColor::VK_BORDER_COLOR_FLOAT_CUSTOM_EXT,
            VkBorderColor::VK_BORDER_COLOR_INT_CUSTOM_EXT,
            VkBorderColor::VK_BORDER_COLOR_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK",
            "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK",
            "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK",
            "VK_BORDER_COLOR_INT_OPAQUE_BLACK",
            "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE",
            "VK_BORDER_COLOR_INT_OPAQUE_WHITE",
            "VK_BORDER_COLOR_FLOAT_CUSTOM_EXT",
            "VK_BORDER_COLOR_INT_CUSTOM_EXT",
            "VK_BORDER_COLOR_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 9; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkBorderColor > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkBorderColor");
        }
    };
}
namespace das
{
    template <> struct cast < VkFilter > : cast_enum < VkFilter > {};
};

class EnumerationVkFilter : public das::Enumeration {
public:
    EnumerationVkFilter() : das::Enumeration("VkFilter") {
        external = true;
        cppName = "VkFilter";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkFilter >::type >::type;
        VkFilter enumArray[] = {
            VkFilter::VK_FILTER_NEAREST,
            VkFilter::VK_FILTER_LINEAR,
            VkFilter::VK_FILTER_CUBIC_IMG,
            VkFilter::VK_FILTER_CUBIC_EXT,
            VkFilter::VK_FILTER_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_FILTER_NEAREST",
            "VK_FILTER_LINEAR",
            "VK_FILTER_CUBIC_IMG",
            "VK_FILTER_CUBIC_EXT",
            "VK_FILTER_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkFilter > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkFilter");
        }
    };
}
namespace das
{
    template <> struct cast < VkSamplerAddressMode > : cast_enum < VkSamplerAddressMode > {};
};

class EnumerationVkSamplerAddressMode : public das::Enumeration {
public:
    EnumerationVkSamplerAddressMode() : das::Enumeration("VkSamplerAddressMode") {
        external = true;
        cppName = "VkSamplerAddressMode";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSamplerAddressMode >::type >::type;
        VkSamplerAddressMode enumArray[] = {
            VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_REPEAT,
            VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT,
            VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE,
            VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER,
            VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
            VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR,
            VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SAMPLER_ADDRESS_MODE_REPEAT",
            "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT",
            "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE",
            "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER",
            "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE",
            "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR",
            "VK_SAMPLER_ADDRESS_MODE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 7; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSamplerAddressMode > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSamplerAddressMode");
        }
    };
}
namespace das
{
    template <> struct cast < VkSamplerMipmapMode > : cast_enum < VkSamplerMipmapMode > {};
};

class EnumerationVkSamplerMipmapMode : public das::Enumeration {
public:
    EnumerationVkSamplerMipmapMode() : das::Enumeration("VkSamplerMipmapMode") {
        external = true;
        cppName = "VkSamplerMipmapMode";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSamplerMipmapMode >::type >::type;
        VkSamplerMipmapMode enumArray[] = {
            VkSamplerMipmapMode::VK_SAMPLER_MIPMAP_MODE_NEAREST,
            VkSamplerMipmapMode::VK_SAMPLER_MIPMAP_MODE_LINEAR,
            VkSamplerMipmapMode::VK_SAMPLER_MIPMAP_MODE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SAMPLER_MIPMAP_MODE_NEAREST",
            "VK_SAMPLER_MIPMAP_MODE_LINEAR",
            "VK_SAMPLER_MIPMAP_MODE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSamplerMipmapMode > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSamplerMipmapMode");
        }
    };
}
namespace das
{
    template <> struct cast < VkDescriptorType > : cast_enum < VkDescriptorType > {};
};

class EnumerationVkDescriptorType : public das::Enumeration {
public:
    EnumerationVkDescriptorType() : das::Enumeration("VkDescriptorType") {
        external = true;
        cppName = "VkDescriptorType";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDescriptorType >::type >::type;
        VkDescriptorType enumArray[] = {
            VkDescriptorType::VK_DESCRIPTOR_TYPE_SAMPLER,
            VkDescriptorType::VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
            VkDescriptorType::VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE,
            VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_IMAGE,
            VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER,
            VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER,
            VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
            VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_BUFFER,
            VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC,
            VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC,
            VkDescriptorType::VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT,
            VkDescriptorType::VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT,
            VkDescriptorType::VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR,
            VkDescriptorType::VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV,
            VkDescriptorType::VK_DESCRIPTOR_TYPE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_DESCRIPTOR_TYPE_SAMPLER",
            "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER",
            "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE",
            "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE",
            "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER",
            "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER",
            "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER",
            "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER",
            "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC",
            "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC",
            "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT",
            "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT",
            "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR",
            "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV",
            "VK_DESCRIPTOR_TYPE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 15; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDescriptorType > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDescriptorType");
        }
    };
}
namespace das
{
    template <> struct cast < VkAttachmentLoadOp > : cast_enum < VkAttachmentLoadOp > {};
};

class EnumerationVkAttachmentLoadOp : public das::Enumeration {
public:
    EnumerationVkAttachmentLoadOp() : das::Enumeration("VkAttachmentLoadOp") {
        external = true;
        cppName = "VkAttachmentLoadOp";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkAttachmentLoadOp >::type >::type;
        VkAttachmentLoadOp enumArray[] = {
            VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_LOAD,
            VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_CLEAR,
            VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_DONT_CARE,
            VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_ATTACHMENT_LOAD_OP_LOAD",
            "VK_ATTACHMENT_LOAD_OP_CLEAR",
            "VK_ATTACHMENT_LOAD_OP_DONT_CARE",
            "VK_ATTACHMENT_LOAD_OP_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkAttachmentLoadOp > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkAttachmentLoadOp");
        }
    };
}
namespace das
{
    template <> struct cast < VkAttachmentStoreOp > : cast_enum < VkAttachmentStoreOp > {};
};

class EnumerationVkAttachmentStoreOp : public das::Enumeration {
public:
    EnumerationVkAttachmentStoreOp() : das::Enumeration("VkAttachmentStoreOp") {
        external = true;
        cppName = "VkAttachmentStoreOp";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkAttachmentStoreOp >::type >::type;
        VkAttachmentStoreOp enumArray[] = {
            VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_STORE,
            VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_DONT_CARE,
            VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_NONE_QCOM,
            VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_ATTACHMENT_STORE_OP_STORE",
            "VK_ATTACHMENT_STORE_OP_DONT_CARE",
            "VK_ATTACHMENT_STORE_OP_NONE_QCOM",
            "VK_ATTACHMENT_STORE_OP_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkAttachmentStoreOp > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkAttachmentStoreOp");
        }
    };
}
namespace das
{
    template <> struct cast < VkPipelineBindPoint > : cast_enum < VkPipelineBindPoint > {};
};

class EnumerationVkPipelineBindPoint : public das::Enumeration {
public:
    EnumerationVkPipelineBindPoint() : das::Enumeration("VkPipelineBindPoint") {
        external = true;
        cppName = "VkPipelineBindPoint";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPipelineBindPoint >::type >::type;
        VkPipelineBindPoint enumArray[] = {
            VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_GRAPHICS,
            VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_COMPUTE,
            VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,
            VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_RAY_TRACING_NV,
            VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_PIPELINE_BIND_POINT_GRAPHICS",
            "VK_PIPELINE_BIND_POINT_COMPUTE",
            "VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR",
            "VK_PIPELINE_BIND_POINT_RAY_TRACING_NV",
            "VK_PIPELINE_BIND_POINT_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPipelineBindPoint > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPipelineBindPoint");
        }
    };
}
namespace das
{
    template <> struct cast < VkCommandBufferLevel > : cast_enum < VkCommandBufferLevel > {};
};

class EnumerationVkCommandBufferLevel : public das::Enumeration {
public:
    EnumerationVkCommandBufferLevel() : das::Enumeration("VkCommandBufferLevel") {
        external = true;
        cppName = "VkCommandBufferLevel";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkCommandBufferLevel >::type >::type;
        VkCommandBufferLevel enumArray[] = {
            VkCommandBufferLevel::VK_COMMAND_BUFFER_LEVEL_PRIMARY,
            VkCommandBufferLevel::VK_COMMAND_BUFFER_LEVEL_SECONDARY,
            VkCommandBufferLevel::VK_COMMAND_BUFFER_LEVEL_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_COMMAND_BUFFER_LEVEL_PRIMARY",
            "VK_COMMAND_BUFFER_LEVEL_SECONDARY",
            "VK_COMMAND_BUFFER_LEVEL_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkCommandBufferLevel > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkCommandBufferLevel");
        }
    };
}
namespace das
{
    template <> struct cast < VkIndexType > : cast_enum < VkIndexType > {};
};

class EnumerationVkIndexType : public das::Enumeration {
public:
    EnumerationVkIndexType() : das::Enumeration("VkIndexType") {
        external = true;
        cppName = "VkIndexType";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkIndexType >::type >::type;
        VkIndexType enumArray[] = {
            VkIndexType::VK_INDEX_TYPE_UINT16,
            VkIndexType::VK_INDEX_TYPE_UINT32,
            VkIndexType::VK_INDEX_TYPE_NONE_KHR,
            VkIndexType::VK_INDEX_TYPE_UINT8_EXT,
            VkIndexType::VK_INDEX_TYPE_NONE_NV,
            VkIndexType::VK_INDEX_TYPE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_INDEX_TYPE_UINT16",
            "VK_INDEX_TYPE_UINT32",
            "VK_INDEX_TYPE_NONE_KHR",
            "VK_INDEX_TYPE_UINT8_EXT",
            "VK_INDEX_TYPE_NONE_NV",
            "VK_INDEX_TYPE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 6; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkIndexType > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkIndexType");
        }
    };
}
namespace das
{
    template <> struct cast < VkSubpassContents > : cast_enum < VkSubpassContents > {};
};

class EnumerationVkSubpassContents : public das::Enumeration {
public:
    EnumerationVkSubpassContents() : das::Enumeration("VkSubpassContents") {
        external = true;
        cppName = "VkSubpassContents";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSubpassContents >::type >::type;
        VkSubpassContents enumArray[] = {
            VkSubpassContents::VK_SUBPASS_CONTENTS_INLINE,
            VkSubpassContents::VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS,
            VkSubpassContents::VK_SUBPASS_CONTENTS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SUBPASS_CONTENTS_INLINE",
            "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS",
            "VK_SUBPASS_CONTENTS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSubpassContents > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSubpassContents");
        }
    };
}
namespace das
{
    template <> struct cast < VkAccessFlagBits > : cast_enum < VkAccessFlagBits > {};
};

class EnumerationVkAccessFlagBits : public das::Enumeration {
public:
    EnumerationVkAccessFlagBits() : das::Enumeration("VkAccessFlagBits") {
        external = true;
        cppName = "VkAccessFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkAccessFlagBits >::type >::type;
        VkAccessFlagBits enumArray[] = {
            VkAccessFlagBits::VK_ACCESS_INDIRECT_COMMAND_READ_BIT,
            VkAccessFlagBits::VK_ACCESS_INDEX_READ_BIT,
            VkAccessFlagBits::VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT,
            VkAccessFlagBits::VK_ACCESS_UNIFORM_READ_BIT,
            VkAccessFlagBits::VK_ACCESS_INPUT_ATTACHMENT_READ_BIT,
            VkAccessFlagBits::VK_ACCESS_SHADER_READ_BIT,
            VkAccessFlagBits::VK_ACCESS_SHADER_WRITE_BIT,
            VkAccessFlagBits::VK_ACCESS_COLOR_ATTACHMENT_READ_BIT,
            VkAccessFlagBits::VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT,
            VkAccessFlagBits::VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT,
            VkAccessFlagBits::VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT,
            VkAccessFlagBits::VK_ACCESS_TRANSFER_READ_BIT,
            VkAccessFlagBits::VK_ACCESS_TRANSFER_WRITE_BIT,
            VkAccessFlagBits::VK_ACCESS_HOST_READ_BIT,
            VkAccessFlagBits::VK_ACCESS_HOST_WRITE_BIT,
            VkAccessFlagBits::VK_ACCESS_MEMORY_READ_BIT,
            VkAccessFlagBits::VK_ACCESS_MEMORY_WRITE_BIT,
            VkAccessFlagBits::VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT,
            VkAccessFlagBits::VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT,
            VkAccessFlagBits::VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT,
            VkAccessFlagBits::VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT,
            VkAccessFlagBits::VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT,
            VkAccessFlagBits::VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
            VkAccessFlagBits::VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
            VkAccessFlagBits::VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV,
            VkAccessFlagBits::VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT,
            VkAccessFlagBits::VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV,
            VkAccessFlagBits::VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV,
            VkAccessFlagBits::VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV,
            VkAccessFlagBits::VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV,
            VkAccessFlagBits::VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR,
            VkAccessFlagBits::VK_ACCESS_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_ACCESS_INDIRECT_COMMAND_READ_BIT",
            "VK_ACCESS_INDEX_READ_BIT",
            "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT",
            "VK_ACCESS_UNIFORM_READ_BIT",
            "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT",
            "VK_ACCESS_SHADER_READ_BIT",
            "VK_ACCESS_SHADER_WRITE_BIT",
            "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT",
            "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT",
            "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT",
            "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT",
            "VK_ACCESS_TRANSFER_READ_BIT",
            "VK_ACCESS_TRANSFER_WRITE_BIT",
            "VK_ACCESS_HOST_READ_BIT",
            "VK_ACCESS_HOST_WRITE_BIT",
            "VK_ACCESS_MEMORY_READ_BIT",
            "VK_ACCESS_MEMORY_WRITE_BIT",
            "VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT",
            "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT",
            "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT",
            "VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT",
            "VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT",
            "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR",
            "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR",
            "VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV",
            "VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT",
            "VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV",
            "VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV",
            "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV",
            "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV",
            "VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR",
            "VK_ACCESS_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 32; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkAccessFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkAccessFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkImageAspectFlagBits > : cast_enum < VkImageAspectFlagBits > {};
};

class EnumerationVkImageAspectFlagBits : public das::Enumeration {
public:
    EnumerationVkImageAspectFlagBits() : das::Enumeration("VkImageAspectFlagBits") {
        external = true;
        cppName = "VkImageAspectFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkImageAspectFlagBits >::type >::type;
        VkImageAspectFlagBits enumArray[] = {
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_COLOR_BIT,
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_DEPTH_BIT,
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_STENCIL_BIT,
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_METADATA_BIT,
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_0_BIT,
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_1_BIT,
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_2_BIT,
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT,
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT,
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT,
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT,
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_0_BIT_KHR,
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_1_BIT_KHR,
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_2_BIT_KHR,
            VkImageAspectFlagBits::VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_IMAGE_ASPECT_COLOR_BIT",
            "VK_IMAGE_ASPECT_DEPTH_BIT",
            "VK_IMAGE_ASPECT_STENCIL_BIT",
            "VK_IMAGE_ASPECT_METADATA_BIT",
            "VK_IMAGE_ASPECT_PLANE_0_BIT",
            "VK_IMAGE_ASPECT_PLANE_1_BIT",
            "VK_IMAGE_ASPECT_PLANE_2_BIT",
            "VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT",
            "VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT",
            "VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT",
            "VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT",
            "VK_IMAGE_ASPECT_PLANE_0_BIT_KHR",
            "VK_IMAGE_ASPECT_PLANE_1_BIT_KHR",
            "VK_IMAGE_ASPECT_PLANE_2_BIT_KHR",
            "VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 15; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkImageAspectFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkImageAspectFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkFormatFeatureFlagBits > : cast_enum < VkFormatFeatureFlagBits > {};
};

class EnumerationVkFormatFeatureFlagBits : public das::Enumeration {
public:
    EnumerationVkFormatFeatureFlagBits() : das::Enumeration("VkFormatFeatureFlagBits") {
        external = true;
        cppName = "VkFormatFeatureFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkFormatFeatureFlagBits >::type >::type;
        VkFormatFeatureFlagBits enumArray[] = {
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_BLIT_SRC_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_BLIT_DST_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_DISJOINT_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_DISJOINT_BIT_KHR,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT,
            VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT",
            "VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT",
            "VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT",
            "VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT",
            "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT",
            "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT",
            "VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT",
            "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT",
            "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT",
            "VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT",
            "VK_FORMAT_FEATURE_BLIT_SRC_BIT",
            "VK_FORMAT_FEATURE_BLIT_DST_BIT",
            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT",
            "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT",
            "VK_FORMAT_FEATURE_TRANSFER_DST_BIT",
            "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT",
            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT",
            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT",
            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT",
            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT",
            "VK_FORMAT_FEATURE_DISJOINT_BIT",
            "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT",
            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT",
            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG",
            "VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR",
            "VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT",
            "VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR",
            "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR",
            "VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR",
            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT",
            "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR",
            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR",
            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR",
            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR",
            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR",
            "VK_FORMAT_FEATURE_DISJOINT_BIT_KHR",
            "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR",
            "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT",
            "VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 39; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkFormatFeatureFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkFormatFeatureFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkImageCreateFlagBits > : cast_enum < VkImageCreateFlagBits > {};
};

class EnumerationVkImageCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkImageCreateFlagBits() : das::Enumeration("VkImageCreateFlagBits") {
        external = true;
        cppName = "VkImageCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkImageCreateFlagBits >::type >::type;
        VkImageCreateFlagBits enumArray[] = {
            VkImageCreateFlagBits::VK_IMAGE_CREATE_SPARSE_BINDING_BIT,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_SPARSE_ALIASED_BIT,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_ALIAS_BIT,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_PROTECTED_BIT,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_DISJOINT_BIT,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_DISJOINT_BIT_KHR,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_ALIAS_BIT_KHR,
            VkImageCreateFlagBits::VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_IMAGE_CREATE_SPARSE_BINDING_BIT",
            "VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT",
            "VK_IMAGE_CREATE_SPARSE_ALIASED_BIT",
            "VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT",
            "VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT",
            "VK_IMAGE_CREATE_ALIAS_BIT",
            "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT",
            "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT",
            "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT",
            "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT",
            "VK_IMAGE_CREATE_PROTECTED_BIT",
            "VK_IMAGE_CREATE_DISJOINT_BIT",
            "VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV",
            "VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT",
            "VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT",
            "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR",
            "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR",
            "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR",
            "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR",
            "VK_IMAGE_CREATE_DISJOINT_BIT_KHR",
            "VK_IMAGE_CREATE_ALIAS_BIT_KHR",
            "VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 22; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkImageCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkImageCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkSampleCountFlagBits > : cast_enum < VkSampleCountFlagBits > {};
};

class EnumerationVkSampleCountFlagBits : public das::Enumeration {
public:
    EnumerationVkSampleCountFlagBits() : das::Enumeration("VkSampleCountFlagBits") {
        external = true;
        cppName = "VkSampleCountFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSampleCountFlagBits >::type >::type;
        VkSampleCountFlagBits enumArray[] = {
            VkSampleCountFlagBits::VK_SAMPLE_COUNT_1_BIT,
            VkSampleCountFlagBits::VK_SAMPLE_COUNT_2_BIT,
            VkSampleCountFlagBits::VK_SAMPLE_COUNT_4_BIT,
            VkSampleCountFlagBits::VK_SAMPLE_COUNT_8_BIT,
            VkSampleCountFlagBits::VK_SAMPLE_COUNT_16_BIT,
            VkSampleCountFlagBits::VK_SAMPLE_COUNT_32_BIT,
            VkSampleCountFlagBits::VK_SAMPLE_COUNT_64_BIT,
            VkSampleCountFlagBits::VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SAMPLE_COUNT_1_BIT",
            "VK_SAMPLE_COUNT_2_BIT",
            "VK_SAMPLE_COUNT_4_BIT",
            "VK_SAMPLE_COUNT_8_BIT",
            "VK_SAMPLE_COUNT_16_BIT",
            "VK_SAMPLE_COUNT_32_BIT",
            "VK_SAMPLE_COUNT_64_BIT",
            "VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 8; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSampleCountFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSampleCountFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkImageUsageFlagBits > : cast_enum < VkImageUsageFlagBits > {};
};

class EnumerationVkImageUsageFlagBits : public das::Enumeration {
public:
    EnumerationVkImageUsageFlagBits() : das::Enumeration("VkImageUsageFlagBits") {
        external = true;
        cppName = "VkImageUsageFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkImageUsageFlagBits >::type >::type;
        VkImageUsageFlagBits enumArray[] = {
            VkImageUsageFlagBits::VK_IMAGE_USAGE_TRANSFER_SRC_BIT,
            VkImageUsageFlagBits::VK_IMAGE_USAGE_TRANSFER_DST_BIT,
            VkImageUsageFlagBits::VK_IMAGE_USAGE_SAMPLED_BIT,
            VkImageUsageFlagBits::VK_IMAGE_USAGE_STORAGE_BIT,
            VkImageUsageFlagBits::VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
            VkImageUsageFlagBits::VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT,
            VkImageUsageFlagBits::VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT,
            VkImageUsageFlagBits::VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT,
            VkImageUsageFlagBits::VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV,
            VkImageUsageFlagBits::VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT,
            VkImageUsageFlagBits::VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
            VkImageUsageFlagBits::VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_IMAGE_USAGE_TRANSFER_SRC_BIT",
            "VK_IMAGE_USAGE_TRANSFER_DST_BIT",
            "VK_IMAGE_USAGE_SAMPLED_BIT",
            "VK_IMAGE_USAGE_STORAGE_BIT",
            "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT",
            "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT",
            "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT",
            "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT",
            "VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV",
            "VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT",
            "VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR",
            "VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 12; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkImageUsageFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkImageUsageFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkMemoryHeapFlagBits > : cast_enum < VkMemoryHeapFlagBits > {};
};

class EnumerationVkMemoryHeapFlagBits : public das::Enumeration {
public:
    EnumerationVkMemoryHeapFlagBits() : das::Enumeration("VkMemoryHeapFlagBits") {
        external = true;
        cppName = "VkMemoryHeapFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkMemoryHeapFlagBits >::type >::type;
        VkMemoryHeapFlagBits enumArray[] = {
            VkMemoryHeapFlagBits::VK_MEMORY_HEAP_DEVICE_LOCAL_BIT,
            VkMemoryHeapFlagBits::VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
            VkMemoryHeapFlagBits::VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR,
            VkMemoryHeapFlagBits::VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT",
            "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT",
            "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR",
            "VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkMemoryHeapFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkMemoryHeapFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkMemoryPropertyFlagBits > : cast_enum < VkMemoryPropertyFlagBits > {};
};

class EnumerationVkMemoryPropertyFlagBits : public das::Enumeration {
public:
    EnumerationVkMemoryPropertyFlagBits() : das::Enumeration("VkMemoryPropertyFlagBits") {
        external = true;
        cppName = "VkMemoryPropertyFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkMemoryPropertyFlagBits >::type >::type;
        VkMemoryPropertyFlagBits enumArray[] = {
            VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
            VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT,
            VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
            VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_CACHED_BIT,
            VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT,
            VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_PROTECTED_BIT,
            VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD,
            VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD,
            VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT",
            "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT",
            "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT",
            "VK_MEMORY_PROPERTY_HOST_CACHED_BIT",
            "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT",
            "VK_MEMORY_PROPERTY_PROTECTED_BIT",
            "VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD",
            "VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD",
            "VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 9; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkMemoryPropertyFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkMemoryPropertyFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkQueueFlagBits > : cast_enum < VkQueueFlagBits > {};
};

class EnumerationVkQueueFlagBits : public das::Enumeration {
public:
    EnumerationVkQueueFlagBits() : das::Enumeration("VkQueueFlagBits") {
        external = true;
        cppName = "VkQueueFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkQueueFlagBits >::type >::type;
        VkQueueFlagBits enumArray[] = {
            VkQueueFlagBits::VK_QUEUE_GRAPHICS_BIT,
            VkQueueFlagBits::VK_QUEUE_COMPUTE_BIT,
            VkQueueFlagBits::VK_QUEUE_TRANSFER_BIT,
            VkQueueFlagBits::VK_QUEUE_SPARSE_BINDING_BIT,
            VkQueueFlagBits::VK_QUEUE_PROTECTED_BIT,
            VkQueueFlagBits::VK_QUEUE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_QUEUE_GRAPHICS_BIT",
            "VK_QUEUE_COMPUTE_BIT",
            "VK_QUEUE_TRANSFER_BIT",
            "VK_QUEUE_SPARSE_BINDING_BIT",
            "VK_QUEUE_PROTECTED_BIT",
            "VK_QUEUE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 6; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkQueueFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkQueueFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkDeviceQueueCreateFlagBits > : cast_enum < VkDeviceQueueCreateFlagBits > {};
};

class EnumerationVkDeviceQueueCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkDeviceQueueCreateFlagBits() : das::Enumeration("VkDeviceQueueCreateFlagBits") {
        external = true;
        cppName = "VkDeviceQueueCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDeviceQueueCreateFlagBits >::type >::type;
        VkDeviceQueueCreateFlagBits enumArray[] = {
            VkDeviceQueueCreateFlagBits::VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT,
            VkDeviceQueueCreateFlagBits::VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT",
            "VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDeviceQueueCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDeviceQueueCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkPipelineStageFlagBits > : cast_enum < VkPipelineStageFlagBits > {};
};

class EnumerationVkPipelineStageFlagBits : public das::Enumeration {
public:
    EnumerationVkPipelineStageFlagBits() : das::Enumeration("VkPipelineStageFlagBits") {
        external = true;
        cppName = "VkPipelineStageFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPipelineStageFlagBits >::type >::type;
        VkPipelineStageFlagBits enumArray[] = {
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_VERTEX_INPUT_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_VERTEX_SHADER_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TRANSFER_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_HOST_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ALL_COMMANDS_BIT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
            VkPipelineStageFlagBits::VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT",
            "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT",
            "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT",
            "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT",
            "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT",
            "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT",
            "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT",
            "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT",
            "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT",
            "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT",
            "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT",
            "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT",
            "VK_PIPELINE_STAGE_TRANSFER_BIT",
            "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT",
            "VK_PIPELINE_STAGE_HOST_BIT",
            "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT",
            "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT",
            "VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT",
            "VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT",
            "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR",
            "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR",
            "VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV",
            "VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV",
            "VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV",
            "VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT",
            "VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV",
            "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV",
            "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV",
            "VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR",
            "VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 30; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPipelineStageFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPipelineStageFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkSparseMemoryBindFlagBits > : cast_enum < VkSparseMemoryBindFlagBits > {};
};

class EnumerationVkSparseMemoryBindFlagBits : public das::Enumeration {
public:
    EnumerationVkSparseMemoryBindFlagBits() : das::Enumeration("VkSparseMemoryBindFlagBits") {
        external = true;
        cppName = "VkSparseMemoryBindFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSparseMemoryBindFlagBits >::type >::type;
        VkSparseMemoryBindFlagBits enumArray[] = {
            VkSparseMemoryBindFlagBits::VK_SPARSE_MEMORY_BIND_METADATA_BIT,
            VkSparseMemoryBindFlagBits::VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SPARSE_MEMORY_BIND_METADATA_BIT",
            "VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSparseMemoryBindFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSparseMemoryBindFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkSparseImageFormatFlagBits > : cast_enum < VkSparseImageFormatFlagBits > {};
};

class EnumerationVkSparseImageFormatFlagBits : public das::Enumeration {
public:
    EnumerationVkSparseImageFormatFlagBits() : das::Enumeration("VkSparseImageFormatFlagBits") {
        external = true;
        cppName = "VkSparseImageFormatFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSparseImageFormatFlagBits >::type >::type;
        VkSparseImageFormatFlagBits enumArray[] = {
            VkSparseImageFormatFlagBits::VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT,
            VkSparseImageFormatFlagBits::VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT,
            VkSparseImageFormatFlagBits::VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT,
            VkSparseImageFormatFlagBits::VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT",
            "VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT",
            "VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT",
            "VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSparseImageFormatFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSparseImageFormatFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkFenceCreateFlagBits > : cast_enum < VkFenceCreateFlagBits > {};
};

class EnumerationVkFenceCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkFenceCreateFlagBits() : das::Enumeration("VkFenceCreateFlagBits") {
        external = true;
        cppName = "VkFenceCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkFenceCreateFlagBits >::type >::type;
        VkFenceCreateFlagBits enumArray[] = {
            VkFenceCreateFlagBits::VK_FENCE_CREATE_SIGNALED_BIT,
            VkFenceCreateFlagBits::VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_FENCE_CREATE_SIGNALED_BIT",
            "VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkFenceCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkFenceCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkQueryPipelineStatisticFlagBits > : cast_enum < VkQueryPipelineStatisticFlagBits > {};
};

class EnumerationVkQueryPipelineStatisticFlagBits : public das::Enumeration {
public:
    EnumerationVkQueryPipelineStatisticFlagBits() : das::Enumeration("VkQueryPipelineStatisticFlagBits") {
        external = true;
        cppName = "VkQueryPipelineStatisticFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkQueryPipelineStatisticFlagBits >::type >::type;
        VkQueryPipelineStatisticFlagBits enumArray[] = {
            VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT,
            VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT,
            VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT,
            VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT,
            VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT,
            VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT,
            VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT,
            VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT,
            VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT,
            VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT,
            VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT,
            VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT",
            "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT",
            "VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT",
            "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT",
            "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT",
            "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT",
            "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT",
            "VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT",
            "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT",
            "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT",
            "VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT",
            "VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 12; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkQueryPipelineStatisticFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkQueryPipelineStatisticFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkQueryResultFlagBits > : cast_enum < VkQueryResultFlagBits > {};
};

class EnumerationVkQueryResultFlagBits : public das::Enumeration {
public:
    EnumerationVkQueryResultFlagBits() : das::Enumeration("VkQueryResultFlagBits") {
        external = true;
        cppName = "VkQueryResultFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkQueryResultFlagBits >::type >::type;
        VkQueryResultFlagBits enumArray[] = {
            VkQueryResultFlagBits::VK_QUERY_RESULT_64_BIT,
            VkQueryResultFlagBits::VK_QUERY_RESULT_WAIT_BIT,
            VkQueryResultFlagBits::VK_QUERY_RESULT_WITH_AVAILABILITY_BIT,
            VkQueryResultFlagBits::VK_QUERY_RESULT_PARTIAL_BIT,
            VkQueryResultFlagBits::VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_QUERY_RESULT_64_BIT",
            "VK_QUERY_RESULT_WAIT_BIT",
            "VK_QUERY_RESULT_WITH_AVAILABILITY_BIT",
            "VK_QUERY_RESULT_PARTIAL_BIT",
            "VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkQueryResultFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkQueryResultFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkBufferCreateFlagBits > : cast_enum < VkBufferCreateFlagBits > {};
};

class EnumerationVkBufferCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkBufferCreateFlagBits() : das::Enumeration("VkBufferCreateFlagBits") {
        external = true;
        cppName = "VkBufferCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkBufferCreateFlagBits >::type >::type;
        VkBufferCreateFlagBits enumArray[] = {
            VkBufferCreateFlagBits::VK_BUFFER_CREATE_SPARSE_BINDING_BIT,
            VkBufferCreateFlagBits::VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT,
            VkBufferCreateFlagBits::VK_BUFFER_CREATE_SPARSE_ALIASED_BIT,
            VkBufferCreateFlagBits::VK_BUFFER_CREATE_PROTECTED_BIT,
            VkBufferCreateFlagBits::VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
            VkBufferCreateFlagBits::VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT,
            VkBufferCreateFlagBits::VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR,
            VkBufferCreateFlagBits::VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_BUFFER_CREATE_SPARSE_BINDING_BIT",
            "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT",
            "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT",
            "VK_BUFFER_CREATE_PROTECTED_BIT",
            "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT",
            "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT",
            "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR",
            "VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 8; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkBufferCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkBufferCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkBufferUsageFlagBits > : cast_enum < VkBufferUsageFlagBits > {};
};

class EnumerationVkBufferUsageFlagBits : public das::Enumeration {
public:
    EnumerationVkBufferUsageFlagBits() : das::Enumeration("VkBufferUsageFlagBits") {
        external = true;
        cppName = "VkBufferUsageFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkBufferUsageFlagBits >::type >::type;
        VkBufferUsageFlagBits enumArray[] = {
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_DST_BIT,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_STORAGE_BUFFER_BIT,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_INDEX_BUFFER_BIT,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_RAY_TRACING_BIT_NV,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR,
            VkBufferUsageFlagBits::VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_BUFFER_USAGE_TRANSFER_SRC_BIT",
            "VK_BUFFER_USAGE_TRANSFER_DST_BIT",
            "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT",
            "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT",
            "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT",
            "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT",
            "VK_BUFFER_USAGE_INDEX_BUFFER_BIT",
            "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT",
            "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT",
            "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT",
            "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT",
            "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT",
            "VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT",
            "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR",
            "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR",
            "VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR",
            "VK_BUFFER_USAGE_RAY_TRACING_BIT_NV",
            "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT",
            "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR",
            "VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 20; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkBufferUsageFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkBufferUsageFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkImageViewCreateFlagBits > : cast_enum < VkImageViewCreateFlagBits > {};
};

class EnumerationVkImageViewCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkImageViewCreateFlagBits() : das::Enumeration("VkImageViewCreateFlagBits") {
        external = true;
        cppName = "VkImageViewCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkImageViewCreateFlagBits >::type >::type;
        VkImageViewCreateFlagBits enumArray[] = {
            VkImageViewCreateFlagBits::VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT,
            VkImageViewCreateFlagBits::VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT,
            VkImageViewCreateFlagBits::VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT",
            "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT",
            "VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkImageViewCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkImageViewCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkShaderModuleCreateFlagBits > : cast_enum < VkShaderModuleCreateFlagBits > {};
};

class EnumerationVkShaderModuleCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkShaderModuleCreateFlagBits() : das::Enumeration("VkShaderModuleCreateFlagBits") {
        external = true;
        cppName = "VkShaderModuleCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkShaderModuleCreateFlagBits >::type >::type;
        VkShaderModuleCreateFlagBits enumArray[] = {
            VkShaderModuleCreateFlagBits::VK_SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 1; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkShaderModuleCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkShaderModuleCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkPipelineCacheCreateFlagBits > : cast_enum < VkPipelineCacheCreateFlagBits > {};
};

class EnumerationVkPipelineCacheCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkPipelineCacheCreateFlagBits() : das::Enumeration("VkPipelineCacheCreateFlagBits") {
        external = true;
        cppName = "VkPipelineCacheCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPipelineCacheCreateFlagBits >::type >::type;
        VkPipelineCacheCreateFlagBits enumArray[] = {
            VkPipelineCacheCreateFlagBits::VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT,
            VkPipelineCacheCreateFlagBits::VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT",
            "VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPipelineCacheCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPipelineCacheCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkColorComponentFlagBits > : cast_enum < VkColorComponentFlagBits > {};
};

class EnumerationVkColorComponentFlagBits : public das::Enumeration {
public:
    EnumerationVkColorComponentFlagBits() : das::Enumeration("VkColorComponentFlagBits") {
        external = true;
        cppName = "VkColorComponentFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkColorComponentFlagBits >::type >::type;
        VkColorComponentFlagBits enumArray[] = {
            VkColorComponentFlagBits::VK_COLOR_COMPONENT_R_BIT,
            VkColorComponentFlagBits::VK_COLOR_COMPONENT_G_BIT,
            VkColorComponentFlagBits::VK_COLOR_COMPONENT_B_BIT,
            VkColorComponentFlagBits::VK_COLOR_COMPONENT_A_BIT,
            VkColorComponentFlagBits::VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_COLOR_COMPONENT_R_BIT",
            "VK_COLOR_COMPONENT_G_BIT",
            "VK_COLOR_COMPONENT_B_BIT",
            "VK_COLOR_COMPONENT_A_BIT",
            "VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkColorComponentFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkColorComponentFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkPipelineCreateFlagBits > : cast_enum < VkPipelineCreateFlagBits > {};
};

class EnumerationVkPipelineCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkPipelineCreateFlagBits() : das::Enumeration("VkPipelineCreateFlagBits") {
        external = true;
        cppName = "VkPipelineCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPipelineCreateFlagBits >::type >::type;
        VkPipelineCreateFlagBits enumArray[] = {
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DERIVATIVE_BIT,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_LIBRARY_BIT_KHR,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DISPATCH_BASE,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DISPATCH_BASE_KHR,
            VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT",
            "VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT",
            "VK_PIPELINE_CREATE_DERIVATIVE_BIT",
            "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT",
            "VK_PIPELINE_CREATE_DISPATCH_BASE_BIT",
            "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR",
            "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR",
            "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR",
            "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR",
            "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR",
            "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR",
            "VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR",
            "VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV",
            "VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR",
            "VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR",
            "VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV",
            "VK_PIPELINE_CREATE_LIBRARY_BIT_KHR",
            "VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT",
            "VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT",
            "VK_PIPELINE_CREATE_DISPATCH_BASE",
            "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR",
            "VK_PIPELINE_CREATE_DISPATCH_BASE_KHR",
            "VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 23; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPipelineCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPipelineCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkPipelineShaderStageCreateFlagBits > : cast_enum < VkPipelineShaderStageCreateFlagBits > {};
};

class EnumerationVkPipelineShaderStageCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkPipelineShaderStageCreateFlagBits() : das::Enumeration("VkPipelineShaderStageCreateFlagBits") {
        external = true;
        cppName = "VkPipelineShaderStageCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPipelineShaderStageCreateFlagBits >::type >::type;
        VkPipelineShaderStageCreateFlagBits enumArray[] = {
            VkPipelineShaderStageCreateFlagBits::VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT,
            VkPipelineShaderStageCreateFlagBits::VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT,
            VkPipelineShaderStageCreateFlagBits::VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT",
            "VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT",
            "VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPipelineShaderStageCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPipelineShaderStageCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkShaderStageFlagBits > : cast_enum < VkShaderStageFlagBits > {};
};

class EnumerationVkShaderStageFlagBits : public das::Enumeration {
public:
    EnumerationVkShaderStageFlagBits() : das::Enumeration("VkShaderStageFlagBits") {
        external = true;
        cppName = "VkShaderStageFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkShaderStageFlagBits >::type >::type;
        VkShaderStageFlagBits enumArray[] = {
            VkShaderStageFlagBits::VK_SHADER_STAGE_VERTEX_BIT,
            VkShaderStageFlagBits::VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT,
            VkShaderStageFlagBits::VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT,
            VkShaderStageFlagBits::VK_SHADER_STAGE_GEOMETRY_BIT,
            VkShaderStageFlagBits::VK_SHADER_STAGE_FRAGMENT_BIT,
            VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT,
            VkShaderStageFlagBits::VK_SHADER_STAGE_ALL_GRAPHICS,
            VkShaderStageFlagBits::VK_SHADER_STAGE_ALL,
            VkShaderStageFlagBits::VK_SHADER_STAGE_RAYGEN_BIT_KHR,
            VkShaderStageFlagBits::VK_SHADER_STAGE_ANY_HIT_BIT_KHR,
            VkShaderStageFlagBits::VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
            VkShaderStageFlagBits::VK_SHADER_STAGE_MISS_BIT_KHR,
            VkShaderStageFlagBits::VK_SHADER_STAGE_INTERSECTION_BIT_KHR,
            VkShaderStageFlagBits::VK_SHADER_STAGE_CALLABLE_BIT_KHR,
            VkShaderStageFlagBits::VK_SHADER_STAGE_TASK_BIT_NV,
            VkShaderStageFlagBits::VK_SHADER_STAGE_MESH_BIT_NV,
            VkShaderStageFlagBits::VK_SHADER_STAGE_RAYGEN_BIT_NV,
            VkShaderStageFlagBits::VK_SHADER_STAGE_ANY_HIT_BIT_NV,
            VkShaderStageFlagBits::VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV,
            VkShaderStageFlagBits::VK_SHADER_STAGE_MISS_BIT_NV,
            VkShaderStageFlagBits::VK_SHADER_STAGE_INTERSECTION_BIT_NV,
            VkShaderStageFlagBits::VK_SHADER_STAGE_CALLABLE_BIT_NV,
            VkShaderStageFlagBits::VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SHADER_STAGE_VERTEX_BIT",
            "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT",
            "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT",
            "VK_SHADER_STAGE_GEOMETRY_BIT",
            "VK_SHADER_STAGE_FRAGMENT_BIT",
            "VK_SHADER_STAGE_COMPUTE_BIT",
            "VK_SHADER_STAGE_ALL_GRAPHICS",
            "VK_SHADER_STAGE_ALL",
            "VK_SHADER_STAGE_RAYGEN_BIT_KHR",
            "VK_SHADER_STAGE_ANY_HIT_BIT_KHR",
            "VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR",
            "VK_SHADER_STAGE_MISS_BIT_KHR",
            "VK_SHADER_STAGE_INTERSECTION_BIT_KHR",
            "VK_SHADER_STAGE_CALLABLE_BIT_KHR",
            "VK_SHADER_STAGE_TASK_BIT_NV",
            "VK_SHADER_STAGE_MESH_BIT_NV",
            "VK_SHADER_STAGE_RAYGEN_BIT_NV",
            "VK_SHADER_STAGE_ANY_HIT_BIT_NV",
            "VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV",
            "VK_SHADER_STAGE_MISS_BIT_NV",
            "VK_SHADER_STAGE_INTERSECTION_BIT_NV",
            "VK_SHADER_STAGE_CALLABLE_BIT_NV",
            "VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 23; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkShaderStageFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkShaderStageFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkCullModeFlagBits > : cast_enum < VkCullModeFlagBits > {};
};

class EnumerationVkCullModeFlagBits : public das::Enumeration {
public:
    EnumerationVkCullModeFlagBits() : das::Enumeration("VkCullModeFlagBits") {
        external = true;
        cppName = "VkCullModeFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkCullModeFlagBits >::type >::type;
        VkCullModeFlagBits enumArray[] = {
            VkCullModeFlagBits::VK_CULL_MODE_NONE,
            VkCullModeFlagBits::VK_CULL_MODE_FRONT_BIT,
            VkCullModeFlagBits::VK_CULL_MODE_BACK_BIT,
            VkCullModeFlagBits::VK_CULL_MODE_FRONT_AND_BACK,
            VkCullModeFlagBits::VK_CULL_MODE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_CULL_MODE_NONE",
            "VK_CULL_MODE_FRONT_BIT",
            "VK_CULL_MODE_BACK_BIT",
            "VK_CULL_MODE_FRONT_AND_BACK",
            "VK_CULL_MODE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkCullModeFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkCullModeFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkSamplerCreateFlagBits > : cast_enum < VkSamplerCreateFlagBits > {};
};

class EnumerationVkSamplerCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkSamplerCreateFlagBits() : das::Enumeration("VkSamplerCreateFlagBits") {
        external = true;
        cppName = "VkSamplerCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSamplerCreateFlagBits >::type >::type;
        VkSamplerCreateFlagBits enumArray[] = {
            VkSamplerCreateFlagBits::VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT,
            VkSamplerCreateFlagBits::VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT,
            VkSamplerCreateFlagBits::VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT",
            "VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT",
            "VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSamplerCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSamplerCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkDescriptorPoolCreateFlagBits > : cast_enum < VkDescriptorPoolCreateFlagBits > {};
};

class EnumerationVkDescriptorPoolCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkDescriptorPoolCreateFlagBits() : das::Enumeration("VkDescriptorPoolCreateFlagBits") {
        external = true;
        cppName = "VkDescriptorPoolCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDescriptorPoolCreateFlagBits >::type >::type;
        VkDescriptorPoolCreateFlagBits enumArray[] = {
            VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT,
            VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT,
            VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT,
            VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT",
            "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT",
            "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT",
            "VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDescriptorPoolCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDescriptorPoolCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkDescriptorSetLayoutCreateFlagBits > : cast_enum < VkDescriptorSetLayoutCreateFlagBits > {};
};

class EnumerationVkDescriptorSetLayoutCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkDescriptorSetLayoutCreateFlagBits() : das::Enumeration("VkDescriptorSetLayoutCreateFlagBits") {
        external = true;
        cppName = "VkDescriptorSetLayoutCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDescriptorSetLayoutCreateFlagBits >::type >::type;
        VkDescriptorSetLayoutCreateFlagBits enumArray[] = {
            VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT,
            VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR,
            VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT,
            VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT",
            "VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR",
            "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT",
            "VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDescriptorSetLayoutCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDescriptorSetLayoutCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkAttachmentDescriptionFlagBits > : cast_enum < VkAttachmentDescriptionFlagBits > {};
};

class EnumerationVkAttachmentDescriptionFlagBits : public das::Enumeration {
public:
    EnumerationVkAttachmentDescriptionFlagBits() : das::Enumeration("VkAttachmentDescriptionFlagBits") {
        external = true;
        cppName = "VkAttachmentDescriptionFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkAttachmentDescriptionFlagBits >::type >::type;
        VkAttachmentDescriptionFlagBits enumArray[] = {
            VkAttachmentDescriptionFlagBits::VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT,
            VkAttachmentDescriptionFlagBits::VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT",
            "VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkAttachmentDescriptionFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkAttachmentDescriptionFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkDependencyFlagBits > : cast_enum < VkDependencyFlagBits > {};
};

class EnumerationVkDependencyFlagBits : public das::Enumeration {
public:
    EnumerationVkDependencyFlagBits() : das::Enumeration("VkDependencyFlagBits") {
        external = true;
        cppName = "VkDependencyFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDependencyFlagBits >::type >::type;
        VkDependencyFlagBits enumArray[] = {
            VkDependencyFlagBits::VK_DEPENDENCY_BY_REGION_BIT,
            VkDependencyFlagBits::VK_DEPENDENCY_DEVICE_GROUP_BIT,
            VkDependencyFlagBits::VK_DEPENDENCY_VIEW_LOCAL_BIT,
            VkDependencyFlagBits::VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR,
            VkDependencyFlagBits::VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR,
            VkDependencyFlagBits::VK_DEPENDENCY_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_DEPENDENCY_BY_REGION_BIT",
            "VK_DEPENDENCY_DEVICE_GROUP_BIT",
            "VK_DEPENDENCY_VIEW_LOCAL_BIT",
            "VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR",
            "VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR",
            "VK_DEPENDENCY_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 6; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDependencyFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDependencyFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkFramebufferCreateFlagBits > : cast_enum < VkFramebufferCreateFlagBits > {};
};

class EnumerationVkFramebufferCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkFramebufferCreateFlagBits() : das::Enumeration("VkFramebufferCreateFlagBits") {
        external = true;
        cppName = "VkFramebufferCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkFramebufferCreateFlagBits >::type >::type;
        VkFramebufferCreateFlagBits enumArray[] = {
            VkFramebufferCreateFlagBits::VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT,
            VkFramebufferCreateFlagBits::VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR,
            VkFramebufferCreateFlagBits::VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT",
            "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR",
            "VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkFramebufferCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkFramebufferCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkRenderPassCreateFlagBits > : cast_enum < VkRenderPassCreateFlagBits > {};
};

class EnumerationVkRenderPassCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkRenderPassCreateFlagBits() : das::Enumeration("VkRenderPassCreateFlagBits") {
        external = true;
        cppName = "VkRenderPassCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkRenderPassCreateFlagBits >::type >::type;
        VkRenderPassCreateFlagBits enumArray[] = {
            VkRenderPassCreateFlagBits::VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM,
            VkRenderPassCreateFlagBits::VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM",
            "VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkRenderPassCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkRenderPassCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkSubpassDescriptionFlagBits > : cast_enum < VkSubpassDescriptionFlagBits > {};
};

class EnumerationVkSubpassDescriptionFlagBits : public das::Enumeration {
public:
    EnumerationVkSubpassDescriptionFlagBits() : das::Enumeration("VkSubpassDescriptionFlagBits") {
        external = true;
        cppName = "VkSubpassDescriptionFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSubpassDescriptionFlagBits >::type >::type;
        VkSubpassDescriptionFlagBits enumArray[] = {
            VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX,
            VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX,
            VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM,
            VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM,
            VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX",
            "VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX",
            "VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM",
            "VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM",
            "VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSubpassDescriptionFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSubpassDescriptionFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkCommandPoolCreateFlagBits > : cast_enum < VkCommandPoolCreateFlagBits > {};
};

class EnumerationVkCommandPoolCreateFlagBits : public das::Enumeration {
public:
    EnumerationVkCommandPoolCreateFlagBits() : das::Enumeration("VkCommandPoolCreateFlagBits") {
        external = true;
        cppName = "VkCommandPoolCreateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkCommandPoolCreateFlagBits >::type >::type;
        VkCommandPoolCreateFlagBits enumArray[] = {
            VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_TRANSIENT_BIT,
            VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT,
            VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_PROTECTED_BIT,
            VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT",
            "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT",
            "VK_COMMAND_POOL_CREATE_PROTECTED_BIT",
            "VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkCommandPoolCreateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkCommandPoolCreateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkCommandPoolResetFlagBits > : cast_enum < VkCommandPoolResetFlagBits > {};
};

class EnumerationVkCommandPoolResetFlagBits : public das::Enumeration {
public:
    EnumerationVkCommandPoolResetFlagBits() : das::Enumeration("VkCommandPoolResetFlagBits") {
        external = true;
        cppName = "VkCommandPoolResetFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkCommandPoolResetFlagBits >::type >::type;
        VkCommandPoolResetFlagBits enumArray[] = {
            VkCommandPoolResetFlagBits::VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT,
            VkCommandPoolResetFlagBits::VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT",
            "VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkCommandPoolResetFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkCommandPoolResetFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkCommandBufferUsageFlagBits > : cast_enum < VkCommandBufferUsageFlagBits > {};
};

class EnumerationVkCommandBufferUsageFlagBits : public das::Enumeration {
public:
    EnumerationVkCommandBufferUsageFlagBits() : das::Enumeration("VkCommandBufferUsageFlagBits") {
        external = true;
        cppName = "VkCommandBufferUsageFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkCommandBufferUsageFlagBits >::type >::type;
        VkCommandBufferUsageFlagBits enumArray[] = {
            VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT,
            VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT,
            VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT,
            VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT",
            "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT",
            "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT",
            "VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkCommandBufferUsageFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkCommandBufferUsageFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkQueryControlFlagBits > : cast_enum < VkQueryControlFlagBits > {};
};

class EnumerationVkQueryControlFlagBits : public das::Enumeration {
public:
    EnumerationVkQueryControlFlagBits() : das::Enumeration("VkQueryControlFlagBits") {
        external = true;
        cppName = "VkQueryControlFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkQueryControlFlagBits >::type >::type;
        VkQueryControlFlagBits enumArray[] = {
            VkQueryControlFlagBits::VK_QUERY_CONTROL_PRECISE_BIT,
            VkQueryControlFlagBits::VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_QUERY_CONTROL_PRECISE_BIT",
            "VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkQueryControlFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkQueryControlFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkCommandBufferResetFlagBits > : cast_enum < VkCommandBufferResetFlagBits > {};
};

class EnumerationVkCommandBufferResetFlagBits : public das::Enumeration {
public:
    EnumerationVkCommandBufferResetFlagBits() : das::Enumeration("VkCommandBufferResetFlagBits") {
        external = true;
        cppName = "VkCommandBufferResetFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkCommandBufferResetFlagBits >::type >::type;
        VkCommandBufferResetFlagBits enumArray[] = {
            VkCommandBufferResetFlagBits::VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT,
            VkCommandBufferResetFlagBits::VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT",
            "VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkCommandBufferResetFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkCommandBufferResetFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkStencilFaceFlagBits > : cast_enum < VkStencilFaceFlagBits > {};
};

class EnumerationVkStencilFaceFlagBits : public das::Enumeration {
public:
    EnumerationVkStencilFaceFlagBits() : das::Enumeration("VkStencilFaceFlagBits") {
        external = true;
        cppName = "VkStencilFaceFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkStencilFaceFlagBits >::type >::type;
        VkStencilFaceFlagBits enumArray[] = {
            VkStencilFaceFlagBits::VK_STENCIL_FACE_FRONT_BIT,
            VkStencilFaceFlagBits::VK_STENCIL_FACE_BACK_BIT,
            VkStencilFaceFlagBits::VK_STENCIL_FACE_FRONT_AND_BACK,
            VkStencilFaceFlagBits::VK_STENCIL_FRONT_AND_BACK,
            VkStencilFaceFlagBits::VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_STENCIL_FACE_FRONT_BIT",
            "VK_STENCIL_FACE_BACK_BIT",
            "VK_STENCIL_FACE_FRONT_AND_BACK",
            "VK_STENCIL_FRONT_AND_BACK",
            "VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkStencilFaceFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkStencilFaceFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkPointClippingBehavior > : cast_enum < VkPointClippingBehavior > {};
};

class EnumerationVkPointClippingBehavior : public das::Enumeration {
public:
    EnumerationVkPointClippingBehavior() : das::Enumeration("VkPointClippingBehavior") {
        external = true;
        cppName = "VkPointClippingBehavior";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPointClippingBehavior >::type >::type;
        VkPointClippingBehavior enumArray[] = {
            VkPointClippingBehavior::VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
            VkPointClippingBehavior::VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
            VkPointClippingBehavior::VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR,
            VkPointClippingBehavior::VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR,
            VkPointClippingBehavior::VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES",
            "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY",
            "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR",
            "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR",
            "VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPointClippingBehavior > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPointClippingBehavior");
        }
    };
}
namespace das
{
    template <> struct cast < VkTessellationDomainOrigin > : cast_enum < VkTessellationDomainOrigin > {};
};

class EnumerationVkTessellationDomainOrigin : public das::Enumeration {
public:
    EnumerationVkTessellationDomainOrigin() : das::Enumeration("VkTessellationDomainOrigin") {
        external = true;
        cppName = "VkTessellationDomainOrigin";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkTessellationDomainOrigin >::type >::type;
        VkTessellationDomainOrigin enumArray[] = {
            VkTessellationDomainOrigin::VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
            VkTessellationDomainOrigin::VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
            VkTessellationDomainOrigin::VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR,
            VkTessellationDomainOrigin::VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR,
            VkTessellationDomainOrigin::VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT",
            "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT",
            "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR",
            "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR",
            "VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkTessellationDomainOrigin > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkTessellationDomainOrigin");
        }
    };
}
namespace das
{
    template <> struct cast < VkSamplerYcbcrModelConversion > : cast_enum < VkSamplerYcbcrModelConversion > {};
};

class EnumerationVkSamplerYcbcrModelConversion : public das::Enumeration {
public:
    EnumerationVkSamplerYcbcrModelConversion() : das::Enumeration("VkSamplerYcbcrModelConversion") {
        external = true;
        cppName = "VkSamplerYcbcrModelConversion";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSamplerYcbcrModelConversion >::type >::type;
        VkSamplerYcbcrModelConversion enumArray[] = {
            VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
            VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
            VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
            VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
            VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
            VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR,
            VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR,
            VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR,
            VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR,
            VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR,
            VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY",
            "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY",
            "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709",
            "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601",
            "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020",
            "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR",
            "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR",
            "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR",
            "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR",
            "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR",
            "VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 11; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSamplerYcbcrModelConversion > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSamplerYcbcrModelConversion");
        }
    };
}
namespace das
{
    template <> struct cast < VkSamplerYcbcrRange > : cast_enum < VkSamplerYcbcrRange > {};
};

class EnumerationVkSamplerYcbcrRange : public das::Enumeration {
public:
    EnumerationVkSamplerYcbcrRange() : das::Enumeration("VkSamplerYcbcrRange") {
        external = true;
        cppName = "VkSamplerYcbcrRange";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSamplerYcbcrRange >::type >::type;
        VkSamplerYcbcrRange enumArray[] = {
            VkSamplerYcbcrRange::VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
            VkSamplerYcbcrRange::VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
            VkSamplerYcbcrRange::VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR,
            VkSamplerYcbcrRange::VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR,
            VkSamplerYcbcrRange::VK_SAMPLER_YCBCR_RANGE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SAMPLER_YCBCR_RANGE_ITU_FULL",
            "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW",
            "VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR",
            "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR",
            "VK_SAMPLER_YCBCR_RANGE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSamplerYcbcrRange > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSamplerYcbcrRange");
        }
    };
}
namespace das
{
    template <> struct cast < VkChromaLocation > : cast_enum < VkChromaLocation > {};
};

class EnumerationVkChromaLocation : public das::Enumeration {
public:
    EnumerationVkChromaLocation() : das::Enumeration("VkChromaLocation") {
        external = true;
        cppName = "VkChromaLocation";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkChromaLocation >::type >::type;
        VkChromaLocation enumArray[] = {
            VkChromaLocation::VK_CHROMA_LOCATION_COSITED_EVEN,
            VkChromaLocation::VK_CHROMA_LOCATION_MIDPOINT,
            VkChromaLocation::VK_CHROMA_LOCATION_COSITED_EVEN_KHR,
            VkChromaLocation::VK_CHROMA_LOCATION_MIDPOINT_KHR,
            VkChromaLocation::VK_CHROMA_LOCATION_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_CHROMA_LOCATION_COSITED_EVEN",
            "VK_CHROMA_LOCATION_MIDPOINT",
            "VK_CHROMA_LOCATION_COSITED_EVEN_KHR",
            "VK_CHROMA_LOCATION_MIDPOINT_KHR",
            "VK_CHROMA_LOCATION_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkChromaLocation > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkChromaLocation");
        }
    };
}
namespace das
{
    template <> struct cast < VkDescriptorUpdateTemplateType > : cast_enum < VkDescriptorUpdateTemplateType > {};
};

class EnumerationVkDescriptorUpdateTemplateType : public das::Enumeration {
public:
    EnumerationVkDescriptorUpdateTemplateType() : das::Enumeration("VkDescriptorUpdateTemplateType") {
        external = true;
        cppName = "VkDescriptorUpdateTemplateType";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDescriptorUpdateTemplateType >::type >::type;
        VkDescriptorUpdateTemplateType enumArray[] = {
            VkDescriptorUpdateTemplateType::VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
            VkDescriptorUpdateTemplateType::VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR,
            VkDescriptorUpdateTemplateType::VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR,
            VkDescriptorUpdateTemplateType::VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET",
            "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR",
            "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR",
            "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDescriptorUpdateTemplateType > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDescriptorUpdateTemplateType");
        }
    };
}
namespace das
{
    template <> struct cast < VkSubgroupFeatureFlagBits > : cast_enum < VkSubgroupFeatureFlagBits > {};
};

class EnumerationVkSubgroupFeatureFlagBits : public das::Enumeration {
public:
    EnumerationVkSubgroupFeatureFlagBits() : das::Enumeration("VkSubgroupFeatureFlagBits") {
        external = true;
        cppName = "VkSubgroupFeatureFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSubgroupFeatureFlagBits >::type >::type;
        VkSubgroupFeatureFlagBits enumArray[] = {
            VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_BASIC_BIT,
            VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_VOTE_BIT,
            VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_ARITHMETIC_BIT,
            VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_BALLOT_BIT,
            VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_SHUFFLE_BIT,
            VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT,
            VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_CLUSTERED_BIT,
            VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_QUAD_BIT,
            VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV,
            VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SUBGROUP_FEATURE_BASIC_BIT",
            "VK_SUBGROUP_FEATURE_VOTE_BIT",
            "VK_SUBGROUP_FEATURE_ARITHMETIC_BIT",
            "VK_SUBGROUP_FEATURE_BALLOT_BIT",
            "VK_SUBGROUP_FEATURE_SHUFFLE_BIT",
            "VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT",
            "VK_SUBGROUP_FEATURE_CLUSTERED_BIT",
            "VK_SUBGROUP_FEATURE_QUAD_BIT",
            "VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV",
            "VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 10; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSubgroupFeatureFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSubgroupFeatureFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkPeerMemoryFeatureFlagBits > : cast_enum < VkPeerMemoryFeatureFlagBits > {};
};

class EnumerationVkPeerMemoryFeatureFlagBits : public das::Enumeration {
public:
    EnumerationVkPeerMemoryFeatureFlagBits() : das::Enumeration("VkPeerMemoryFeatureFlagBits") {
        external = true;
        cppName = "VkPeerMemoryFeatureFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPeerMemoryFeatureFlagBits >::type >::type;
        VkPeerMemoryFeatureFlagBits enumArray[] = {
            VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
            VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
            VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
            VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
            VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR,
            VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR,
            VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR,
            VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR,
            VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT",
            "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT",
            "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT",
            "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT",
            "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR",
            "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR",
            "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR",
            "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR",
            "VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 9; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPeerMemoryFeatureFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPeerMemoryFeatureFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkMemoryAllocateFlagBits > : cast_enum < VkMemoryAllocateFlagBits > {};
};

class EnumerationVkMemoryAllocateFlagBits : public das::Enumeration {
public:
    EnumerationVkMemoryAllocateFlagBits() : das::Enumeration("VkMemoryAllocateFlagBits") {
        external = true;
        cppName = "VkMemoryAllocateFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkMemoryAllocateFlagBits >::type >::type;
        VkMemoryAllocateFlagBits enumArray[] = {
            VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
            VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,
            VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
            VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR,
            VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR,
            VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR,
            VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT",
            "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT",
            "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT",
            "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR",
            "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR",
            "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR",
            "VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 7; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkMemoryAllocateFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkMemoryAllocateFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkExternalMemoryHandleTypeFlagBits > : cast_enum < VkExternalMemoryHandleTypeFlagBits > {};
};

class EnumerationVkExternalMemoryHandleTypeFlagBits : public das::Enumeration {
public:
    EnumerationVkExternalMemoryHandleTypeFlagBits() : das::Enumeration("VkExternalMemoryHandleTypeFlagBits") {
        external = true;
        cppName = "VkExternalMemoryHandleTypeFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkExternalMemoryHandleTypeFlagBits >::type >::type;
        VkExternalMemoryHandleTypeFlagBits enumArray[] = {
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR,
            VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 19; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkExternalMemoryHandleTypeFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkExternalMemoryHandleTypeFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkExternalMemoryFeatureFlagBits > : cast_enum < VkExternalMemoryFeatureFlagBits > {};
};

class EnumerationVkExternalMemoryFeatureFlagBits : public das::Enumeration {
public:
    EnumerationVkExternalMemoryFeatureFlagBits() : das::Enumeration("VkExternalMemoryFeatureFlagBits") {
        external = true;
        cppName = "VkExternalMemoryFeatureFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkExternalMemoryFeatureFlagBits >::type >::type;
        VkExternalMemoryFeatureFlagBits enumArray[] = {
            VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
            VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
            VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
            VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR,
            VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR,
            VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR,
            VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT",
            "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT",
            "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT",
            "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR",
            "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR",
            "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR",
            "VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 7; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkExternalMemoryFeatureFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkExternalMemoryFeatureFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkExternalFenceHandleTypeFlagBits > : cast_enum < VkExternalFenceHandleTypeFlagBits > {};
};

class EnumerationVkExternalFenceHandleTypeFlagBits : public das::Enumeration {
public:
    EnumerationVkExternalFenceHandleTypeFlagBits() : das::Enumeration("VkExternalFenceHandleTypeFlagBits") {
        external = true;
        cppName = "VkExternalFenceHandleTypeFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkExternalFenceHandleTypeFlagBits >::type >::type;
        VkExternalFenceHandleTypeFlagBits enumArray[] = {
            VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
            VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
            VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
            VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
            VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
            VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
            VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
            VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
            VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT",
            "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT",
            "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT",
            "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT",
            "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR",
            "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR",
            "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR",
            "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR",
            "VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 9; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkExternalFenceHandleTypeFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkExternalFenceHandleTypeFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkExternalFenceFeatureFlagBits > : cast_enum < VkExternalFenceFeatureFlagBits > {};
};

class EnumerationVkExternalFenceFeatureFlagBits : public das::Enumeration {
public:
    EnumerationVkExternalFenceFeatureFlagBits() : das::Enumeration("VkExternalFenceFeatureFlagBits") {
        external = true;
        cppName = "VkExternalFenceFeatureFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkExternalFenceFeatureFlagBits >::type >::type;
        VkExternalFenceFeatureFlagBits enumArray[] = {
            VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
            VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
            VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR,
            VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR,
            VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT",
            "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT",
            "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR",
            "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR",
            "VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkExternalFenceFeatureFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkExternalFenceFeatureFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkFenceImportFlagBits > : cast_enum < VkFenceImportFlagBits > {};
};

class EnumerationVkFenceImportFlagBits : public das::Enumeration {
public:
    EnumerationVkFenceImportFlagBits() : das::Enumeration("VkFenceImportFlagBits") {
        external = true;
        cppName = "VkFenceImportFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkFenceImportFlagBits >::type >::type;
        VkFenceImportFlagBits enumArray[] = {
            VkFenceImportFlagBits::VK_FENCE_IMPORT_TEMPORARY_BIT,
            VkFenceImportFlagBits::VK_FENCE_IMPORT_TEMPORARY_BIT_KHR,
            VkFenceImportFlagBits::VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_FENCE_IMPORT_TEMPORARY_BIT",
            "VK_FENCE_IMPORT_TEMPORARY_BIT_KHR",
            "VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkFenceImportFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkFenceImportFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkSemaphoreImportFlagBits > : cast_enum < VkSemaphoreImportFlagBits > {};
};

class EnumerationVkSemaphoreImportFlagBits : public das::Enumeration {
public:
    EnumerationVkSemaphoreImportFlagBits() : das::Enumeration("VkSemaphoreImportFlagBits") {
        external = true;
        cppName = "VkSemaphoreImportFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSemaphoreImportFlagBits >::type >::type;
        VkSemaphoreImportFlagBits enumArray[] = {
            VkSemaphoreImportFlagBits::VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
            VkSemaphoreImportFlagBits::VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR,
            VkSemaphoreImportFlagBits::VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT",
            "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR",
            "VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSemaphoreImportFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSemaphoreImportFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkExternalSemaphoreHandleTypeFlagBits > : cast_enum < VkExternalSemaphoreHandleTypeFlagBits > {};
};

class EnumerationVkExternalSemaphoreHandleTypeFlagBits : public das::Enumeration {
public:
    EnumerationVkExternalSemaphoreHandleTypeFlagBits() : das::Enumeration("VkExternalSemaphoreHandleTypeFlagBits") {
        external = true;
        cppName = "VkExternalSemaphoreHandleTypeFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkExternalSemaphoreHandleTypeFlagBits >::type >::type;
        VkExternalSemaphoreHandleTypeFlagBits enumArray[] = {
            VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
            VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
            VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
            VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
            VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
            VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT,
            VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR,
            VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR,
            VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR,
            VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR,
            VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR,
            VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT",
            "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT",
            "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT",
            "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT",
            "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT",
            "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT",
            "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR",
            "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR",
            "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR",
            "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR",
            "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR",
            "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 12; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkExternalSemaphoreHandleTypeFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkExternalSemaphoreHandleTypeFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkExternalSemaphoreFeatureFlagBits > : cast_enum < VkExternalSemaphoreFeatureFlagBits > {};
};

class EnumerationVkExternalSemaphoreFeatureFlagBits : public das::Enumeration {
public:
    EnumerationVkExternalSemaphoreFeatureFlagBits() : das::Enumeration("VkExternalSemaphoreFeatureFlagBits") {
        external = true;
        cppName = "VkExternalSemaphoreFeatureFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkExternalSemaphoreFeatureFlagBits >::type >::type;
        VkExternalSemaphoreFeatureFlagBits enumArray[] = {
            VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
            VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
            VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR,
            VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR,
            VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT",
            "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT",
            "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR",
            "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR",
            "VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkExternalSemaphoreFeatureFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkExternalSemaphoreFeatureFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkDriverId > : cast_enum < VkDriverId > {};
};

class EnumerationVkDriverId : public das::Enumeration {
public:
    EnumerationVkDriverId() : das::Enumeration("VkDriverId") {
        external = true;
        cppName = "VkDriverId";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDriverId >::type >::type;
        VkDriverId enumArray[] = {
            VkDriverId::VK_DRIVER_ID_AMD_PROPRIETARY,
            VkDriverId::VK_DRIVER_ID_AMD_OPEN_SOURCE,
            VkDriverId::VK_DRIVER_ID_MESA_RADV,
            VkDriverId::VK_DRIVER_ID_NVIDIA_PROPRIETARY,
            VkDriverId::VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
            VkDriverId::VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
            VkDriverId::VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
            VkDriverId::VK_DRIVER_ID_QUALCOMM_PROPRIETARY,
            VkDriverId::VK_DRIVER_ID_ARM_PROPRIETARY,
            VkDriverId::VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
            VkDriverId::VK_DRIVER_ID_GGP_PROPRIETARY,
            VkDriverId::VK_DRIVER_ID_BROADCOM_PROPRIETARY,
            VkDriverId::VK_DRIVER_ID_MESA_LLVMPIPE,
            VkDriverId::VK_DRIVER_ID_MOLTENVK,
            VkDriverId::VK_DRIVER_ID_AMD_PROPRIETARY_KHR,
            VkDriverId::VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR,
            VkDriverId::VK_DRIVER_ID_MESA_RADV_KHR,
            VkDriverId::VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR,
            VkDriverId::VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR,
            VkDriverId::VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR,
            VkDriverId::VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR,
            VkDriverId::VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR,
            VkDriverId::VK_DRIVER_ID_ARM_PROPRIETARY_KHR,
            VkDriverId::VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR,
            VkDriverId::VK_DRIVER_ID_GGP_PROPRIETARY_KHR,
            VkDriverId::VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR,
            VkDriverId::VK_DRIVER_ID_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_DRIVER_ID_AMD_PROPRIETARY",
            "VK_DRIVER_ID_AMD_OPEN_SOURCE",
            "VK_DRIVER_ID_MESA_RADV",
            "VK_DRIVER_ID_NVIDIA_PROPRIETARY",
            "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS",
            "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA",
            "VK_DRIVER_ID_IMAGINATION_PROPRIETARY",
            "VK_DRIVER_ID_QUALCOMM_PROPRIETARY",
            "VK_DRIVER_ID_ARM_PROPRIETARY",
            "VK_DRIVER_ID_GOOGLE_SWIFTSHADER",
            "VK_DRIVER_ID_GGP_PROPRIETARY",
            "VK_DRIVER_ID_BROADCOM_PROPRIETARY",
            "VK_DRIVER_ID_MESA_LLVMPIPE",
            "VK_DRIVER_ID_MOLTENVK",
            "VK_DRIVER_ID_AMD_PROPRIETARY_KHR",
            "VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR",
            "VK_DRIVER_ID_MESA_RADV_KHR",
            "VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR",
            "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR",
            "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR",
            "VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR",
            "VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR",
            "VK_DRIVER_ID_ARM_PROPRIETARY_KHR",
            "VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR",
            "VK_DRIVER_ID_GGP_PROPRIETARY_KHR",
            "VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR",
            "VK_DRIVER_ID_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 27; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDriverId > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDriverId");
        }
    };
}
namespace das
{
    template <> struct cast < VkShaderFloatControlsIndependence > : cast_enum < VkShaderFloatControlsIndependence > {};
};

class EnumerationVkShaderFloatControlsIndependence : public das::Enumeration {
public:
    EnumerationVkShaderFloatControlsIndependence() : das::Enumeration("VkShaderFloatControlsIndependence") {
        external = true;
        cppName = "VkShaderFloatControlsIndependence";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkShaderFloatControlsIndependence >::type >::type;
        VkShaderFloatControlsIndependence enumArray[] = {
            VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
            VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
            VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE,
            VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR,
            VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR,
            VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR,
            VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY",
            "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL",
            "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE",
            "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR",
            "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR",
            "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR",
            "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 7; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkShaderFloatControlsIndependence > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkShaderFloatControlsIndependence");
        }
    };
}
namespace das
{
    template <> struct cast < VkSamplerReductionMode > : cast_enum < VkSamplerReductionMode > {};
};

class EnumerationVkSamplerReductionMode : public das::Enumeration {
public:
    EnumerationVkSamplerReductionMode() : das::Enumeration("VkSamplerReductionMode") {
        external = true;
        cppName = "VkSamplerReductionMode";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSamplerReductionMode >::type >::type;
        VkSamplerReductionMode enumArray[] = {
            VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
            VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_MIN,
            VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_MAX,
            VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT,
            VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_MIN_EXT,
            VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_MAX_EXT,
            VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE",
            "VK_SAMPLER_REDUCTION_MODE_MIN",
            "VK_SAMPLER_REDUCTION_MODE_MAX",
            "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT",
            "VK_SAMPLER_REDUCTION_MODE_MIN_EXT",
            "VK_SAMPLER_REDUCTION_MODE_MAX_EXT",
            "VK_SAMPLER_REDUCTION_MODE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 7; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSamplerReductionMode > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSamplerReductionMode");
        }
    };
}
namespace das
{
    template <> struct cast < VkSemaphoreType > : cast_enum < VkSemaphoreType > {};
};

class EnumerationVkSemaphoreType : public das::Enumeration {
public:
    EnumerationVkSemaphoreType() : das::Enumeration("VkSemaphoreType") {
        external = true;
        cppName = "VkSemaphoreType";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSemaphoreType >::type >::type;
        VkSemaphoreType enumArray[] = {
            VkSemaphoreType::VK_SEMAPHORE_TYPE_BINARY,
            VkSemaphoreType::VK_SEMAPHORE_TYPE_TIMELINE,
            VkSemaphoreType::VK_SEMAPHORE_TYPE_BINARY_KHR,
            VkSemaphoreType::VK_SEMAPHORE_TYPE_TIMELINE_KHR,
            VkSemaphoreType::VK_SEMAPHORE_TYPE_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SEMAPHORE_TYPE_BINARY",
            "VK_SEMAPHORE_TYPE_TIMELINE",
            "VK_SEMAPHORE_TYPE_BINARY_KHR",
            "VK_SEMAPHORE_TYPE_TIMELINE_KHR",
            "VK_SEMAPHORE_TYPE_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSemaphoreType > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSemaphoreType");
        }
    };
}
namespace das
{
    template <> struct cast < VkResolveModeFlagBits > : cast_enum < VkResolveModeFlagBits > {};
};

class EnumerationVkResolveModeFlagBits : public das::Enumeration {
public:
    EnumerationVkResolveModeFlagBits() : das::Enumeration("VkResolveModeFlagBits") {
        external = true;
        cppName = "VkResolveModeFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkResolveModeFlagBits >::type >::type;
        VkResolveModeFlagBits enumArray[] = {
            VkResolveModeFlagBits::VK_RESOLVE_MODE_NONE,
            VkResolveModeFlagBits::VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,
            VkResolveModeFlagBits::VK_RESOLVE_MODE_AVERAGE_BIT,
            VkResolveModeFlagBits::VK_RESOLVE_MODE_MIN_BIT,
            VkResolveModeFlagBits::VK_RESOLVE_MODE_MAX_BIT,
            VkResolveModeFlagBits::VK_RESOLVE_MODE_NONE_KHR,
            VkResolveModeFlagBits::VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR,
            VkResolveModeFlagBits::VK_RESOLVE_MODE_AVERAGE_BIT_KHR,
            VkResolveModeFlagBits::VK_RESOLVE_MODE_MIN_BIT_KHR,
            VkResolveModeFlagBits::VK_RESOLVE_MODE_MAX_BIT_KHR,
            VkResolveModeFlagBits::VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_RESOLVE_MODE_NONE",
            "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT",
            "VK_RESOLVE_MODE_AVERAGE_BIT",
            "VK_RESOLVE_MODE_MIN_BIT",
            "VK_RESOLVE_MODE_MAX_BIT",
            "VK_RESOLVE_MODE_NONE_KHR",
            "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR",
            "VK_RESOLVE_MODE_AVERAGE_BIT_KHR",
            "VK_RESOLVE_MODE_MIN_BIT_KHR",
            "VK_RESOLVE_MODE_MAX_BIT_KHR",
            "VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 11; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkResolveModeFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkResolveModeFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkDescriptorBindingFlagBits > : cast_enum < VkDescriptorBindingFlagBits > {};
};

class EnumerationVkDescriptorBindingFlagBits : public das::Enumeration {
public:
    EnumerationVkDescriptorBindingFlagBits() : das::Enumeration("VkDescriptorBindingFlagBits") {
        external = true;
        cppName = "VkDescriptorBindingFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDescriptorBindingFlagBits >::type >::type;
        VkDescriptorBindingFlagBits enumArray[] = {
            VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,
            VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,
            VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,
            VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,
            VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT,
            VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT,
            VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT,
            VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT,
            VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT",
            "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT",
            "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT",
            "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT",
            "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT",
            "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT",
            "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT",
            "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT",
            "VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 9; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDescriptorBindingFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDescriptorBindingFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkSemaphoreWaitFlagBits > : cast_enum < VkSemaphoreWaitFlagBits > {};
};

class EnumerationVkSemaphoreWaitFlagBits : public das::Enumeration {
public:
    EnumerationVkSemaphoreWaitFlagBits() : das::Enumeration("VkSemaphoreWaitFlagBits") {
        external = true;
        cppName = "VkSemaphoreWaitFlagBits";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSemaphoreWaitFlagBits >::type >::type;
        VkSemaphoreWaitFlagBits enumArray[] = {
            VkSemaphoreWaitFlagBits::VK_SEMAPHORE_WAIT_ANY_BIT,
            VkSemaphoreWaitFlagBits::VK_SEMAPHORE_WAIT_ANY_BIT_KHR,
            VkSemaphoreWaitFlagBits::VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM
        };
        static const char *enumArrayName[] = {
            "VK_SEMAPHORE_WAIT_ANY_BIT",
            "VK_SEMAPHORE_WAIT_ANY_BIT_KHR",
            "VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSemaphoreWaitFlagBits > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSemaphoreWaitFlagBits");
        }
    };
}
namespace das
{
    template <> struct cast < VkPresentModeKHR > : cast_enum < VkPresentModeKHR > {};
};

class EnumerationVkPresentModeKHR : public das::Enumeration {
public:
    EnumerationVkPresentModeKHR() : das::Enumeration("VkPresentModeKHR") {
        external = true;
        cppName = "VkPresentModeKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPresentModeKHR >::type >::type;
        VkPresentModeKHR enumArray[] = {
            VkPresentModeKHR::VK_PRESENT_MODE_IMMEDIATE_KHR,
            VkPresentModeKHR::VK_PRESENT_MODE_MAILBOX_KHR,
            VkPresentModeKHR::VK_PRESENT_MODE_FIFO_KHR,
            VkPresentModeKHR::VK_PRESENT_MODE_FIFO_RELAXED_KHR,
            VkPresentModeKHR::VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR,
            VkPresentModeKHR::VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR,
            VkPresentModeKHR::VK_PRESENT_MODE_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_PRESENT_MODE_IMMEDIATE_KHR",
            "VK_PRESENT_MODE_MAILBOX_KHR",
            "VK_PRESENT_MODE_FIFO_KHR",
            "VK_PRESENT_MODE_FIFO_RELAXED_KHR",
            "VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR",
            "VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR",
            "VK_PRESENT_MODE_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 7; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPresentModeKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPresentModeKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkColorSpaceKHR > : cast_enum < VkColorSpaceKHR > {};
};

class EnumerationVkColorSpaceKHR : public das::Enumeration {
public:
    EnumerationVkColorSpaceKHR() : das::Enumeration("VkColorSpaceKHR") {
        external = true;
        cppName = "VkColorSpaceKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkColorSpaceKHR >::type >::type;
        VkColorSpaceKHR enumArray[] = {
            VkColorSpaceKHR::VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
            VkColorSpaceKHR::VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_BT709_LINEAR_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_BT709_NONLINEAR_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_BT2020_LINEAR_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_HDR10_ST2084_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_DOLBYVISION_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_HDR10_HLG_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_PASS_THROUGH_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_DISPLAY_NATIVE_AMD,
            VkColorSpaceKHR::VK_COLORSPACE_SRGB_NONLINEAR_KHR,
            VkColorSpaceKHR::VK_COLOR_SPACE_DCI_P3_LINEAR_EXT,
            VkColorSpaceKHR::VK_COLOR_SPACE_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR",
            "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT",
            "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT",
            "VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT",
            "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT",
            "VK_COLOR_SPACE_BT709_LINEAR_EXT",
            "VK_COLOR_SPACE_BT709_NONLINEAR_EXT",
            "VK_COLOR_SPACE_BT2020_LINEAR_EXT",
            "VK_COLOR_SPACE_HDR10_ST2084_EXT",
            "VK_COLOR_SPACE_DOLBYVISION_EXT",
            "VK_COLOR_SPACE_HDR10_HLG_EXT",
            "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT",
            "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT",
            "VK_COLOR_SPACE_PASS_THROUGH_EXT",
            "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT",
            "VK_COLOR_SPACE_DISPLAY_NATIVE_AMD",
            "VK_COLORSPACE_SRGB_NONLINEAR_KHR",
            "VK_COLOR_SPACE_DCI_P3_LINEAR_EXT",
            "VK_COLOR_SPACE_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 19; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkColorSpaceKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkColorSpaceKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkSurfaceTransformFlagBitsKHR > : cast_enum < VkSurfaceTransformFlagBitsKHR > {};
};

class EnumerationVkSurfaceTransformFlagBitsKHR : public das::Enumeration {
public:
    EnumerationVkSurfaceTransformFlagBitsKHR() : das::Enumeration("VkSurfaceTransformFlagBitsKHR") {
        external = true;
        cppName = "VkSurfaceTransformFlagBitsKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSurfaceTransformFlagBitsKHR >::type >::type;
        VkSurfaceTransformFlagBitsKHR enumArray[] = {
            VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR,
            VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR,
            VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR,
            VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR,
            VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR,
            VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR,
            VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR,
            VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR,
            VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR,
            VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR",
            "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR",
            "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR",
            "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR",
            "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR",
            "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR",
            "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR",
            "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR",
            "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR",
            "VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 10; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSurfaceTransformFlagBitsKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSurfaceTransformFlagBitsKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkCompositeAlphaFlagBitsKHR > : cast_enum < VkCompositeAlphaFlagBitsKHR > {};
};

class EnumerationVkCompositeAlphaFlagBitsKHR : public das::Enumeration {
public:
    EnumerationVkCompositeAlphaFlagBitsKHR() : das::Enumeration("VkCompositeAlphaFlagBitsKHR") {
        external = true;
        cppName = "VkCompositeAlphaFlagBitsKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkCompositeAlphaFlagBitsKHR >::type >::type;
        VkCompositeAlphaFlagBitsKHR enumArray[] = {
            VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR,
            VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR,
            VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR,
            VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR,
            VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR",
            "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR",
            "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR",
            "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR",
            "VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkCompositeAlphaFlagBitsKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkCompositeAlphaFlagBitsKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkSwapchainCreateFlagBitsKHR > : cast_enum < VkSwapchainCreateFlagBitsKHR > {};
};

class EnumerationVkSwapchainCreateFlagBitsKHR : public das::Enumeration {
public:
    EnumerationVkSwapchainCreateFlagBitsKHR() : das::Enumeration("VkSwapchainCreateFlagBitsKHR") {
        external = true;
        cppName = "VkSwapchainCreateFlagBitsKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSwapchainCreateFlagBitsKHR >::type >::type;
        VkSwapchainCreateFlagBitsKHR enumArray[] = {
            VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR,
            VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR,
            VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR,
            VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR",
            "VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR",
            "VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR",
            "VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSwapchainCreateFlagBitsKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSwapchainCreateFlagBitsKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkDeviceGroupPresentModeFlagBitsKHR > : cast_enum < VkDeviceGroupPresentModeFlagBitsKHR > {};
};

class EnumerationVkDeviceGroupPresentModeFlagBitsKHR : public das::Enumeration {
public:
    EnumerationVkDeviceGroupPresentModeFlagBitsKHR() : das::Enumeration("VkDeviceGroupPresentModeFlagBitsKHR") {
        external = true;
        cppName = "VkDeviceGroupPresentModeFlagBitsKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDeviceGroupPresentModeFlagBitsKHR >::type >::type;
        VkDeviceGroupPresentModeFlagBitsKHR enumArray[] = {
            VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR,
            VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR,
            VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR,
            VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR,
            VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR",
            "VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR",
            "VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR",
            "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR",
            "VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDeviceGroupPresentModeFlagBitsKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDeviceGroupPresentModeFlagBitsKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkDisplayPlaneAlphaFlagBitsKHR > : cast_enum < VkDisplayPlaneAlphaFlagBitsKHR > {};
};

class EnumerationVkDisplayPlaneAlphaFlagBitsKHR : public das::Enumeration {
public:
    EnumerationVkDisplayPlaneAlphaFlagBitsKHR() : das::Enumeration("VkDisplayPlaneAlphaFlagBitsKHR") {
        external = true;
        cppName = "VkDisplayPlaneAlphaFlagBitsKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDisplayPlaneAlphaFlagBitsKHR >::type >::type;
        VkDisplayPlaneAlphaFlagBitsKHR enumArray[] = {
            VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR,
            VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR,
            VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR,
            VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR,
            VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR",
            "VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR",
            "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR",
            "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR",
            "VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDisplayPlaneAlphaFlagBitsKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDisplayPlaneAlphaFlagBitsKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkPerformanceCounterUnitKHR > : cast_enum < VkPerformanceCounterUnitKHR > {};
};

class EnumerationVkPerformanceCounterUnitKHR : public das::Enumeration {
public:
    EnumerationVkPerformanceCounterUnitKHR() : das::Enumeration("VkPerformanceCounterUnitKHR") {
        external = true;
        cppName = "VkPerformanceCounterUnitKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPerformanceCounterUnitKHR >::type >::type;
        VkPerformanceCounterUnitKHR enumArray[] = {
            VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR,
            VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR,
            VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR,
            VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR,
            VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR,
            VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR,
            VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR,
            VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR,
            VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR,
            VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR,
            VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR,
            VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR",
            "VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR",
            "VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR",
            "VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR",
            "VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR",
            "VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR",
            "VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR",
            "VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR",
            "VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR",
            "VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR",
            "VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR",
            "VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 12; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPerformanceCounterUnitKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPerformanceCounterUnitKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkPerformanceCounterScopeKHR > : cast_enum < VkPerformanceCounterScopeKHR > {};
};

class EnumerationVkPerformanceCounterScopeKHR : public das::Enumeration {
public:
    EnumerationVkPerformanceCounterScopeKHR() : das::Enumeration("VkPerformanceCounterScopeKHR") {
        external = true;
        cppName = "VkPerformanceCounterScopeKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPerformanceCounterScopeKHR >::type >::type;
        VkPerformanceCounterScopeKHR enumArray[] = {
            VkPerformanceCounterScopeKHR::VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,
            VkPerformanceCounterScopeKHR::VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR,
            VkPerformanceCounterScopeKHR::VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,
            VkPerformanceCounterScopeKHR::VK_QUERY_SCOPE_COMMAND_BUFFER_KHR,
            VkPerformanceCounterScopeKHR::VK_QUERY_SCOPE_RENDER_PASS_KHR,
            VkPerformanceCounterScopeKHR::VK_QUERY_SCOPE_COMMAND_KHR,
            VkPerformanceCounterScopeKHR::VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR",
            "VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR",
            "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR",
            "VK_QUERY_SCOPE_COMMAND_BUFFER_KHR",
            "VK_QUERY_SCOPE_RENDER_PASS_KHR",
            "VK_QUERY_SCOPE_COMMAND_KHR",
            "VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 7; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPerformanceCounterScopeKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPerformanceCounterScopeKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkPerformanceCounterStorageKHR > : cast_enum < VkPerformanceCounterStorageKHR > {};
};

class EnumerationVkPerformanceCounterStorageKHR : public das::Enumeration {
public:
    EnumerationVkPerformanceCounterStorageKHR() : das::Enumeration("VkPerformanceCounterStorageKHR") {
        external = true;
        cppName = "VkPerformanceCounterStorageKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPerformanceCounterStorageKHR >::type >::type;
        VkPerformanceCounterStorageKHR enumArray[] = {
            VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR,
            VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR,
            VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR,
            VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR,
            VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR,
            VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR,
            VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR",
            "VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR",
            "VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR",
            "VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR",
            "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR",
            "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR",
            "VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 7; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPerformanceCounterStorageKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPerformanceCounterStorageKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkPerformanceCounterDescriptionFlagBitsKHR > : cast_enum < VkPerformanceCounterDescriptionFlagBitsKHR > {};
};

class EnumerationVkPerformanceCounterDescriptionFlagBitsKHR : public das::Enumeration {
public:
    EnumerationVkPerformanceCounterDescriptionFlagBitsKHR() : das::Enumeration("VkPerformanceCounterDescriptionFlagBitsKHR") {
        external = true;
        cppName = "VkPerformanceCounterDescriptionFlagBitsKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPerformanceCounterDescriptionFlagBitsKHR >::type >::type;
        VkPerformanceCounterDescriptionFlagBitsKHR enumArray[] = {
            VkPerformanceCounterDescriptionFlagBitsKHR::VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR,
            VkPerformanceCounterDescriptionFlagBitsKHR::VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR,
            VkPerformanceCounterDescriptionFlagBitsKHR::VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR,
            VkPerformanceCounterDescriptionFlagBitsKHR::VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR,
            VkPerformanceCounterDescriptionFlagBitsKHR::VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR",
            "VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR",
            "VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR",
            "VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR",
            "VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPerformanceCounterDescriptionFlagBitsKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPerformanceCounterDescriptionFlagBitsKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkAcquireProfilingLockFlagBitsKHR > : cast_enum < VkAcquireProfilingLockFlagBitsKHR > {};
};

class EnumerationVkAcquireProfilingLockFlagBitsKHR : public das::Enumeration {
public:
    EnumerationVkAcquireProfilingLockFlagBitsKHR() : das::Enumeration("VkAcquireProfilingLockFlagBitsKHR") {
        external = true;
        cppName = "VkAcquireProfilingLockFlagBitsKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkAcquireProfilingLockFlagBitsKHR >::type >::type;
        VkAcquireProfilingLockFlagBitsKHR enumArray[] = {
            VkAcquireProfilingLockFlagBitsKHR::VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 1; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkAcquireProfilingLockFlagBitsKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkAcquireProfilingLockFlagBitsKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkFragmentShadingRateCombinerOpKHR > : cast_enum < VkFragmentShadingRateCombinerOpKHR > {};
};

class EnumerationVkFragmentShadingRateCombinerOpKHR : public das::Enumeration {
public:
    EnumerationVkFragmentShadingRateCombinerOpKHR() : das::Enumeration("VkFragmentShadingRateCombinerOpKHR") {
        external = true;
        cppName = "VkFragmentShadingRateCombinerOpKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkFragmentShadingRateCombinerOpKHR >::type >::type;
        VkFragmentShadingRateCombinerOpKHR enumArray[] = {
            VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR,
            VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR,
            VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR,
            VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR,
            VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR,
            VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR",
            "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR",
            "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR",
            "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR",
            "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR",
            "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 6; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkFragmentShadingRateCombinerOpKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkFragmentShadingRateCombinerOpKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkPipelineExecutableStatisticFormatKHR > : cast_enum < VkPipelineExecutableStatisticFormatKHR > {};
};

class EnumerationVkPipelineExecutableStatisticFormatKHR : public das::Enumeration {
public:
    EnumerationVkPipelineExecutableStatisticFormatKHR() : das::Enumeration("VkPipelineExecutableStatisticFormatKHR") {
        external = true;
        cppName = "VkPipelineExecutableStatisticFormatKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPipelineExecutableStatisticFormatKHR >::type >::type;
        VkPipelineExecutableStatisticFormatKHR enumArray[] = {
            VkPipelineExecutableStatisticFormatKHR::VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR,
            VkPipelineExecutableStatisticFormatKHR::VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR,
            VkPipelineExecutableStatisticFormatKHR::VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR,
            VkPipelineExecutableStatisticFormatKHR::VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR,
            VkPipelineExecutableStatisticFormatKHR::VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR",
            "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR",
            "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR",
            "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR",
            "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPipelineExecutableStatisticFormatKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPipelineExecutableStatisticFormatKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkDebugReportObjectTypeEXT > : cast_enum < VkDebugReportObjectTypeEXT > {};
};

class EnumerationVkDebugReportObjectTypeEXT : public das::Enumeration {
public:
    EnumerationVkDebugReportObjectTypeEXT() : das::Enumeration("VkDebugReportObjectTypeEXT") {
        external = true;
        cppName = "VkDebugReportObjectTypeEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDebugReportObjectTypeEXT >::type >::type;
        VkDebugReportObjectTypeEXT enumArray[] = {
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT,
            VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT",
            "VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 41; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDebugReportObjectTypeEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDebugReportObjectTypeEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkDebugReportFlagBitsEXT > : cast_enum < VkDebugReportFlagBitsEXT > {};
};

class EnumerationVkDebugReportFlagBitsEXT : public das::Enumeration {
public:
    EnumerationVkDebugReportFlagBitsEXT() : das::Enumeration("VkDebugReportFlagBitsEXT") {
        external = true;
        cppName = "VkDebugReportFlagBitsEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDebugReportFlagBitsEXT >::type >::type;
        VkDebugReportFlagBitsEXT enumArray[] = {
            VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_INFORMATION_BIT_EXT,
            VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_WARNING_BIT_EXT,
            VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT,
            VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_ERROR_BIT_EXT,
            VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_DEBUG_BIT_EXT,
            VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_DEBUG_REPORT_INFORMATION_BIT_EXT",
            "VK_DEBUG_REPORT_WARNING_BIT_EXT",
            "VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT",
            "VK_DEBUG_REPORT_ERROR_BIT_EXT",
            "VK_DEBUG_REPORT_DEBUG_BIT_EXT",
            "VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 6; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDebugReportFlagBitsEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDebugReportFlagBitsEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkRasterizationOrderAMD > : cast_enum < VkRasterizationOrderAMD > {};
};

class EnumerationVkRasterizationOrderAMD : public das::Enumeration {
public:
    EnumerationVkRasterizationOrderAMD() : das::Enumeration("VkRasterizationOrderAMD") {
        external = true;
        cppName = "VkRasterizationOrderAMD";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkRasterizationOrderAMD >::type >::type;
        VkRasterizationOrderAMD enumArray[] = {
            VkRasterizationOrderAMD::VK_RASTERIZATION_ORDER_STRICT_AMD,
            VkRasterizationOrderAMD::VK_RASTERIZATION_ORDER_RELAXED_AMD,
            VkRasterizationOrderAMD::VK_RASTERIZATION_ORDER_MAX_ENUM_AMD
        };
        static const char *enumArrayName[] = {
            "VK_RASTERIZATION_ORDER_STRICT_AMD",
            "VK_RASTERIZATION_ORDER_RELAXED_AMD",
            "VK_RASTERIZATION_ORDER_MAX_ENUM_AMD"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkRasterizationOrderAMD > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkRasterizationOrderAMD");
        }
    };
}
namespace das
{
    template <> struct cast < VkShaderInfoTypeAMD > : cast_enum < VkShaderInfoTypeAMD > {};
};

class EnumerationVkShaderInfoTypeAMD : public das::Enumeration {
public:
    EnumerationVkShaderInfoTypeAMD() : das::Enumeration("VkShaderInfoTypeAMD") {
        external = true;
        cppName = "VkShaderInfoTypeAMD";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkShaderInfoTypeAMD >::type >::type;
        VkShaderInfoTypeAMD enumArray[] = {
            VkShaderInfoTypeAMD::VK_SHADER_INFO_TYPE_STATISTICS_AMD,
            VkShaderInfoTypeAMD::VK_SHADER_INFO_TYPE_BINARY_AMD,
            VkShaderInfoTypeAMD::VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD,
            VkShaderInfoTypeAMD::VK_SHADER_INFO_TYPE_MAX_ENUM_AMD
        };
        static const char *enumArrayName[] = {
            "VK_SHADER_INFO_TYPE_STATISTICS_AMD",
            "VK_SHADER_INFO_TYPE_BINARY_AMD",
            "VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD",
            "VK_SHADER_INFO_TYPE_MAX_ENUM_AMD"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkShaderInfoTypeAMD > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkShaderInfoTypeAMD");
        }
    };
}
namespace das
{
    template <> struct cast < VkExternalMemoryHandleTypeFlagBitsNV > : cast_enum < VkExternalMemoryHandleTypeFlagBitsNV > {};
};

class EnumerationVkExternalMemoryHandleTypeFlagBitsNV : public das::Enumeration {
public:
    EnumerationVkExternalMemoryHandleTypeFlagBitsNV() : das::Enumeration("VkExternalMemoryHandleTypeFlagBitsNV") {
        external = true;
        cppName = "VkExternalMemoryHandleTypeFlagBitsNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkExternalMemoryHandleTypeFlagBitsNV >::type >::type;
        VkExternalMemoryHandleTypeFlagBitsNV enumArray[] = {
            VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV,
            VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV,
            VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV,
            VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV,
            VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV",
            "VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkExternalMemoryHandleTypeFlagBitsNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkExternalMemoryHandleTypeFlagBitsNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkExternalMemoryFeatureFlagBitsNV > : cast_enum < VkExternalMemoryFeatureFlagBitsNV > {};
};

class EnumerationVkExternalMemoryFeatureFlagBitsNV : public das::Enumeration {
public:
    EnumerationVkExternalMemoryFeatureFlagBitsNV() : das::Enumeration("VkExternalMemoryFeatureFlagBitsNV") {
        external = true;
        cppName = "VkExternalMemoryFeatureFlagBitsNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkExternalMemoryFeatureFlagBitsNV >::type >::type;
        VkExternalMemoryFeatureFlagBitsNV enumArray[] = {
            VkExternalMemoryFeatureFlagBitsNV::VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV,
            VkExternalMemoryFeatureFlagBitsNV::VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV,
            VkExternalMemoryFeatureFlagBitsNV::VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV,
            VkExternalMemoryFeatureFlagBitsNV::VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV",
            "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV",
            "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV",
            "VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkExternalMemoryFeatureFlagBitsNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkExternalMemoryFeatureFlagBitsNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkValidationCheckEXT > : cast_enum < VkValidationCheckEXT > {};
};

class EnumerationVkValidationCheckEXT : public das::Enumeration {
public:
    EnumerationVkValidationCheckEXT() : das::Enumeration("VkValidationCheckEXT") {
        external = true;
        cppName = "VkValidationCheckEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkValidationCheckEXT >::type >::type;
        VkValidationCheckEXT enumArray[] = {
            VkValidationCheckEXT::VK_VALIDATION_CHECK_ALL_EXT,
            VkValidationCheckEXT::VK_VALIDATION_CHECK_SHADERS_EXT,
            VkValidationCheckEXT::VK_VALIDATION_CHECK_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_VALIDATION_CHECK_ALL_EXT",
            "VK_VALIDATION_CHECK_SHADERS_EXT",
            "VK_VALIDATION_CHECK_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkValidationCheckEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkValidationCheckEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkConditionalRenderingFlagBitsEXT > : cast_enum < VkConditionalRenderingFlagBitsEXT > {};
};

class EnumerationVkConditionalRenderingFlagBitsEXT : public das::Enumeration {
public:
    EnumerationVkConditionalRenderingFlagBitsEXT() : das::Enumeration("VkConditionalRenderingFlagBitsEXT") {
        external = true;
        cppName = "VkConditionalRenderingFlagBitsEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkConditionalRenderingFlagBitsEXT >::type >::type;
        VkConditionalRenderingFlagBitsEXT enumArray[] = {
            VkConditionalRenderingFlagBitsEXT::VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT,
            VkConditionalRenderingFlagBitsEXT::VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT",
            "VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkConditionalRenderingFlagBitsEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkConditionalRenderingFlagBitsEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkSurfaceCounterFlagBitsEXT > : cast_enum < VkSurfaceCounterFlagBitsEXT > {};
};

class EnumerationVkSurfaceCounterFlagBitsEXT : public das::Enumeration {
public:
    EnumerationVkSurfaceCounterFlagBitsEXT() : das::Enumeration("VkSurfaceCounterFlagBitsEXT") {
        external = true;
        cppName = "VkSurfaceCounterFlagBitsEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkSurfaceCounterFlagBitsEXT >::type >::type;
        VkSurfaceCounterFlagBitsEXT enumArray[] = {
            VkSurfaceCounterFlagBitsEXT::VK_SURFACE_COUNTER_VBLANK_BIT_EXT,
            VkSurfaceCounterFlagBitsEXT::VK_SURFACE_COUNTER_VBLANK_EXT,
            VkSurfaceCounterFlagBitsEXT::VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_SURFACE_COUNTER_VBLANK_BIT_EXT",
            "VK_SURFACE_COUNTER_VBLANK_EXT",
            "VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkSurfaceCounterFlagBitsEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkSurfaceCounterFlagBitsEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkDisplayPowerStateEXT > : cast_enum < VkDisplayPowerStateEXT > {};
};

class EnumerationVkDisplayPowerStateEXT : public das::Enumeration {
public:
    EnumerationVkDisplayPowerStateEXT() : das::Enumeration("VkDisplayPowerStateEXT") {
        external = true;
        cppName = "VkDisplayPowerStateEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDisplayPowerStateEXT >::type >::type;
        VkDisplayPowerStateEXT enumArray[] = {
            VkDisplayPowerStateEXT::VK_DISPLAY_POWER_STATE_OFF_EXT,
            VkDisplayPowerStateEXT::VK_DISPLAY_POWER_STATE_SUSPEND_EXT,
            VkDisplayPowerStateEXT::VK_DISPLAY_POWER_STATE_ON_EXT,
            VkDisplayPowerStateEXT::VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_DISPLAY_POWER_STATE_OFF_EXT",
            "VK_DISPLAY_POWER_STATE_SUSPEND_EXT",
            "VK_DISPLAY_POWER_STATE_ON_EXT",
            "VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDisplayPowerStateEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDisplayPowerStateEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkDeviceEventTypeEXT > : cast_enum < VkDeviceEventTypeEXT > {};
};

class EnumerationVkDeviceEventTypeEXT : public das::Enumeration {
public:
    EnumerationVkDeviceEventTypeEXT() : das::Enumeration("VkDeviceEventTypeEXT") {
        external = true;
        cppName = "VkDeviceEventTypeEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDeviceEventTypeEXT >::type >::type;
        VkDeviceEventTypeEXT enumArray[] = {
            VkDeviceEventTypeEXT::VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT,
            VkDeviceEventTypeEXT::VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT",
            "VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDeviceEventTypeEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDeviceEventTypeEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkDisplayEventTypeEXT > : cast_enum < VkDisplayEventTypeEXT > {};
};

class EnumerationVkDisplayEventTypeEXT : public das::Enumeration {
public:
    EnumerationVkDisplayEventTypeEXT() : das::Enumeration("VkDisplayEventTypeEXT") {
        external = true;
        cppName = "VkDisplayEventTypeEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDisplayEventTypeEXT >::type >::type;
        VkDisplayEventTypeEXT enumArray[] = {
            VkDisplayEventTypeEXT::VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT,
            VkDisplayEventTypeEXT::VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT",
            "VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDisplayEventTypeEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDisplayEventTypeEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkViewportCoordinateSwizzleNV > : cast_enum < VkViewportCoordinateSwizzleNV > {};
};

class EnumerationVkViewportCoordinateSwizzleNV : public das::Enumeration {
public:
    EnumerationVkViewportCoordinateSwizzleNV() : das::Enumeration("VkViewportCoordinateSwizzleNV") {
        external = true;
        cppName = "VkViewportCoordinateSwizzleNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkViewportCoordinateSwizzleNV >::type >::type;
        VkViewportCoordinateSwizzleNV enumArray[] = {
            VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV,
            VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV,
            VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV,
            VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV,
            VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV,
            VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV,
            VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV,
            VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV,
            VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV",
            "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV",
            "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV",
            "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV",
            "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV",
            "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV",
            "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV",
            "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV",
            "VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 9; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkViewportCoordinateSwizzleNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkViewportCoordinateSwizzleNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkDiscardRectangleModeEXT > : cast_enum < VkDiscardRectangleModeEXT > {};
};

class EnumerationVkDiscardRectangleModeEXT : public das::Enumeration {
public:
    EnumerationVkDiscardRectangleModeEXT() : das::Enumeration("VkDiscardRectangleModeEXT") {
        external = true;
        cppName = "VkDiscardRectangleModeEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDiscardRectangleModeEXT >::type >::type;
        VkDiscardRectangleModeEXT enumArray[] = {
            VkDiscardRectangleModeEXT::VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT,
            VkDiscardRectangleModeEXT::VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT,
            VkDiscardRectangleModeEXT::VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT",
            "VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT",
            "VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDiscardRectangleModeEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDiscardRectangleModeEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkConservativeRasterizationModeEXT > : cast_enum < VkConservativeRasterizationModeEXT > {};
};

class EnumerationVkConservativeRasterizationModeEXT : public das::Enumeration {
public:
    EnumerationVkConservativeRasterizationModeEXT() : das::Enumeration("VkConservativeRasterizationModeEXT") {
        external = true;
        cppName = "VkConservativeRasterizationModeEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkConservativeRasterizationModeEXT >::type >::type;
        VkConservativeRasterizationModeEXT enumArray[] = {
            VkConservativeRasterizationModeEXT::VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT,
            VkConservativeRasterizationModeEXT::VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT,
            VkConservativeRasterizationModeEXT::VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT,
            VkConservativeRasterizationModeEXT::VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT",
            "VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT",
            "VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT",
            "VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkConservativeRasterizationModeEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkConservativeRasterizationModeEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkDebugUtilsMessageSeverityFlagBitsEXT > : cast_enum < VkDebugUtilsMessageSeverityFlagBitsEXT > {};
};

class EnumerationVkDebugUtilsMessageSeverityFlagBitsEXT : public das::Enumeration {
public:
    EnumerationVkDebugUtilsMessageSeverityFlagBitsEXT() : das::Enumeration("VkDebugUtilsMessageSeverityFlagBitsEXT") {
        external = true;
        cppName = "VkDebugUtilsMessageSeverityFlagBitsEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDebugUtilsMessageSeverityFlagBitsEXT >::type >::type;
        VkDebugUtilsMessageSeverityFlagBitsEXT enumArray[] = {
            VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT,
            VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT,
            VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT,
            VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT,
            VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT",
            "VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT",
            "VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT",
            "VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT",
            "VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDebugUtilsMessageSeverityFlagBitsEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDebugUtilsMessageSeverityFlagBitsEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkDebugUtilsMessageTypeFlagBitsEXT > : cast_enum < VkDebugUtilsMessageTypeFlagBitsEXT > {};
};

class EnumerationVkDebugUtilsMessageTypeFlagBitsEXT : public das::Enumeration {
public:
    EnumerationVkDebugUtilsMessageTypeFlagBitsEXT() : das::Enumeration("VkDebugUtilsMessageTypeFlagBitsEXT") {
        external = true;
        cppName = "VkDebugUtilsMessageTypeFlagBitsEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDebugUtilsMessageTypeFlagBitsEXT >::type >::type;
        VkDebugUtilsMessageTypeFlagBitsEXT enumArray[] = {
            VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT,
            VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT,
            VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT,
            VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT",
            "VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT",
            "VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT",
            "VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDebugUtilsMessageTypeFlagBitsEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDebugUtilsMessageTypeFlagBitsEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkBlendOverlapEXT > : cast_enum < VkBlendOverlapEXT > {};
};

class EnumerationVkBlendOverlapEXT : public das::Enumeration {
public:
    EnumerationVkBlendOverlapEXT() : das::Enumeration("VkBlendOverlapEXT") {
        external = true;
        cppName = "VkBlendOverlapEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkBlendOverlapEXT >::type >::type;
        VkBlendOverlapEXT enumArray[] = {
            VkBlendOverlapEXT::VK_BLEND_OVERLAP_UNCORRELATED_EXT,
            VkBlendOverlapEXT::VK_BLEND_OVERLAP_DISJOINT_EXT,
            VkBlendOverlapEXT::VK_BLEND_OVERLAP_CONJOINT_EXT,
            VkBlendOverlapEXT::VK_BLEND_OVERLAP_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_BLEND_OVERLAP_UNCORRELATED_EXT",
            "VK_BLEND_OVERLAP_DISJOINT_EXT",
            "VK_BLEND_OVERLAP_CONJOINT_EXT",
            "VK_BLEND_OVERLAP_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkBlendOverlapEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkBlendOverlapEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkCoverageModulationModeNV > : cast_enum < VkCoverageModulationModeNV > {};
};

class EnumerationVkCoverageModulationModeNV : public das::Enumeration {
public:
    EnumerationVkCoverageModulationModeNV() : das::Enumeration("VkCoverageModulationModeNV") {
        external = true;
        cppName = "VkCoverageModulationModeNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkCoverageModulationModeNV >::type >::type;
        VkCoverageModulationModeNV enumArray[] = {
            VkCoverageModulationModeNV::VK_COVERAGE_MODULATION_MODE_NONE_NV,
            VkCoverageModulationModeNV::VK_COVERAGE_MODULATION_MODE_RGB_NV,
            VkCoverageModulationModeNV::VK_COVERAGE_MODULATION_MODE_ALPHA_NV,
            VkCoverageModulationModeNV::VK_COVERAGE_MODULATION_MODE_RGBA_NV,
            VkCoverageModulationModeNV::VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_COVERAGE_MODULATION_MODE_NONE_NV",
            "VK_COVERAGE_MODULATION_MODE_RGB_NV",
            "VK_COVERAGE_MODULATION_MODE_ALPHA_NV",
            "VK_COVERAGE_MODULATION_MODE_RGBA_NV",
            "VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkCoverageModulationModeNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkCoverageModulationModeNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkValidationCacheHeaderVersionEXT > : cast_enum < VkValidationCacheHeaderVersionEXT > {};
};

class EnumerationVkValidationCacheHeaderVersionEXT : public das::Enumeration {
public:
    EnumerationVkValidationCacheHeaderVersionEXT() : das::Enumeration("VkValidationCacheHeaderVersionEXT") {
        external = true;
        cppName = "VkValidationCacheHeaderVersionEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkValidationCacheHeaderVersionEXT >::type >::type;
        VkValidationCacheHeaderVersionEXT enumArray[] = {
            VkValidationCacheHeaderVersionEXT::VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT,
            VkValidationCacheHeaderVersionEXT::VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT",
            "VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkValidationCacheHeaderVersionEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkValidationCacheHeaderVersionEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkShadingRatePaletteEntryNV > : cast_enum < VkShadingRatePaletteEntryNV > {};
};

class EnumerationVkShadingRatePaletteEntryNV : public das::Enumeration {
public:
    EnumerationVkShadingRatePaletteEntryNV() : das::Enumeration("VkShadingRatePaletteEntryNV") {
        external = true;
        cppName = "VkShadingRatePaletteEntryNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkShadingRatePaletteEntryNV >::type >::type;
        VkShadingRatePaletteEntryNV enumArray[] = {
            VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV,
            VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV,
            VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV,
            VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV,
            VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV,
            VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV,
            VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV,
            VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV,
            VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV,
            VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV,
            VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV,
            VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV,
            VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV",
            "VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV",
            "VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV",
            "VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV",
            "VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV",
            "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV",
            "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV",
            "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV",
            "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV",
            "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV",
            "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV",
            "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV",
            "VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 13; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkShadingRatePaletteEntryNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkShadingRatePaletteEntryNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkCoarseSampleOrderTypeNV > : cast_enum < VkCoarseSampleOrderTypeNV > {};
};

class EnumerationVkCoarseSampleOrderTypeNV : public das::Enumeration {
public:
    EnumerationVkCoarseSampleOrderTypeNV() : das::Enumeration("VkCoarseSampleOrderTypeNV") {
        external = true;
        cppName = "VkCoarseSampleOrderTypeNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkCoarseSampleOrderTypeNV >::type >::type;
        VkCoarseSampleOrderTypeNV enumArray[] = {
            VkCoarseSampleOrderTypeNV::VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV,
            VkCoarseSampleOrderTypeNV::VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV,
            VkCoarseSampleOrderTypeNV::VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV,
            VkCoarseSampleOrderTypeNV::VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV,
            VkCoarseSampleOrderTypeNV::VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV",
            "VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV",
            "VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV",
            "VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV",
            "VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkCoarseSampleOrderTypeNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkCoarseSampleOrderTypeNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkRayTracingShaderGroupTypeKHR > : cast_enum < VkRayTracingShaderGroupTypeKHR > {};
};

class EnumerationVkRayTracingShaderGroupTypeKHR : public das::Enumeration {
public:
    EnumerationVkRayTracingShaderGroupTypeKHR() : das::Enumeration("VkRayTracingShaderGroupTypeKHR") {
        external = true;
        cppName = "VkRayTracingShaderGroupTypeKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkRayTracingShaderGroupTypeKHR >::type >::type;
        VkRayTracingShaderGroupTypeKHR enumArray[] = {
            VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
            VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,
            VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,
            VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV,
            VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV,
            VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV,
            VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR",
            "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR",
            "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR",
            "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV",
            "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV",
            "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV",
            "VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 7; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkRayTracingShaderGroupTypeKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkRayTracingShaderGroupTypeKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkGeometryTypeKHR > : cast_enum < VkGeometryTypeKHR > {};
};

class EnumerationVkGeometryTypeKHR : public das::Enumeration {
public:
    EnumerationVkGeometryTypeKHR() : das::Enumeration("VkGeometryTypeKHR") {
        external = true;
        cppName = "VkGeometryTypeKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkGeometryTypeKHR >::type >::type;
        VkGeometryTypeKHR enumArray[] = {
            VkGeometryTypeKHR::VK_GEOMETRY_TYPE_TRIANGLES_KHR,
            VkGeometryTypeKHR::VK_GEOMETRY_TYPE_AABBS_KHR,
            VkGeometryTypeKHR::VK_GEOMETRY_TYPE_INSTANCES_KHR,
            VkGeometryTypeKHR::VK_GEOMETRY_TYPE_TRIANGLES_NV,
            VkGeometryTypeKHR::VK_GEOMETRY_TYPE_AABBS_NV,
            VkGeometryTypeKHR::VK_GEOMETRY_TYPE_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_GEOMETRY_TYPE_TRIANGLES_KHR",
            "VK_GEOMETRY_TYPE_AABBS_KHR",
            "VK_GEOMETRY_TYPE_INSTANCES_KHR",
            "VK_GEOMETRY_TYPE_TRIANGLES_NV",
            "VK_GEOMETRY_TYPE_AABBS_NV",
            "VK_GEOMETRY_TYPE_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 6; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkGeometryTypeKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkGeometryTypeKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkAccelerationStructureTypeKHR > : cast_enum < VkAccelerationStructureTypeKHR > {};
};

class EnumerationVkAccelerationStructureTypeKHR : public das::Enumeration {
public:
    EnumerationVkAccelerationStructureTypeKHR() : das::Enumeration("VkAccelerationStructureTypeKHR") {
        external = true;
        cppName = "VkAccelerationStructureTypeKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkAccelerationStructureTypeKHR >::type >::type;
        VkAccelerationStructureTypeKHR enumArray[] = {
            VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,
            VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
            VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR,
            VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV,
            VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV,
            VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR",
            "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR",
            "VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR",
            "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV",
            "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV",
            "VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 6; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkAccelerationStructureTypeKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkAccelerationStructureTypeKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkCopyAccelerationStructureModeKHR > : cast_enum < VkCopyAccelerationStructureModeKHR > {};
};

class EnumerationVkCopyAccelerationStructureModeKHR : public das::Enumeration {
public:
    EnumerationVkCopyAccelerationStructureModeKHR() : das::Enumeration("VkCopyAccelerationStructureModeKHR") {
        external = true;
        cppName = "VkCopyAccelerationStructureModeKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkCopyAccelerationStructureModeKHR >::type >::type;
        VkCopyAccelerationStructureModeKHR enumArray[] = {
            VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
            VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,
            VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR,
            VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR,
            VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV,
            VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV,
            VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR",
            "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR",
            "VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR",
            "VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR",
            "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV",
            "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV",
            "VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 7; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkCopyAccelerationStructureModeKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkCopyAccelerationStructureModeKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkAccelerationStructureMemoryRequirementsTypeNV > : cast_enum < VkAccelerationStructureMemoryRequirementsTypeNV > {};
};

class EnumerationVkAccelerationStructureMemoryRequirementsTypeNV : public das::Enumeration {
public:
    EnumerationVkAccelerationStructureMemoryRequirementsTypeNV() : das::Enumeration("VkAccelerationStructureMemoryRequirementsTypeNV") {
        external = true;
        cppName = "VkAccelerationStructureMemoryRequirementsTypeNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkAccelerationStructureMemoryRequirementsTypeNV >::type >::type;
        VkAccelerationStructureMemoryRequirementsTypeNV enumArray[] = {
            VkAccelerationStructureMemoryRequirementsTypeNV::VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV,
            VkAccelerationStructureMemoryRequirementsTypeNV::VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV,
            VkAccelerationStructureMemoryRequirementsTypeNV::VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV,
            VkAccelerationStructureMemoryRequirementsTypeNV::VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV",
            "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV",
            "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV",
            "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkAccelerationStructureMemoryRequirementsTypeNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkAccelerationStructureMemoryRequirementsTypeNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkGeometryFlagBitsKHR > : cast_enum < VkGeometryFlagBitsKHR > {};
};

class EnumerationVkGeometryFlagBitsKHR : public das::Enumeration {
public:
    EnumerationVkGeometryFlagBitsKHR() : das::Enumeration("VkGeometryFlagBitsKHR") {
        external = true;
        cppName = "VkGeometryFlagBitsKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkGeometryFlagBitsKHR >::type >::type;
        VkGeometryFlagBitsKHR enumArray[] = {
            VkGeometryFlagBitsKHR::VK_GEOMETRY_OPAQUE_BIT_KHR,
            VkGeometryFlagBitsKHR::VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,
            VkGeometryFlagBitsKHR::VK_GEOMETRY_OPAQUE_BIT_NV,
            VkGeometryFlagBitsKHR::VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV,
            VkGeometryFlagBitsKHR::VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_GEOMETRY_OPAQUE_BIT_KHR",
            "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR",
            "VK_GEOMETRY_OPAQUE_BIT_NV",
            "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV",
            "VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkGeometryFlagBitsKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkGeometryFlagBitsKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkGeometryInstanceFlagBitsKHR > : cast_enum < VkGeometryInstanceFlagBitsKHR > {};
};

class EnumerationVkGeometryInstanceFlagBitsKHR : public das::Enumeration {
public:
    EnumerationVkGeometryInstanceFlagBitsKHR() : das::Enumeration("VkGeometryInstanceFlagBitsKHR") {
        external = true;
        cppName = "VkGeometryInstanceFlagBitsKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkGeometryInstanceFlagBitsKHR >::type >::type;
        VkGeometryInstanceFlagBitsKHR enumArray[] = {
            VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,
            VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,
            VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,
            VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,
            VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV,
            VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV,
            VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV,
            VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV,
            VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR",
            "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR",
            "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR",
            "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR",
            "VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV",
            "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV",
            "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV",
            "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV",
            "VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 9; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkGeometryInstanceFlagBitsKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkGeometryInstanceFlagBitsKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkBuildAccelerationStructureFlagBitsKHR > : cast_enum < VkBuildAccelerationStructureFlagBitsKHR > {};
};

class EnumerationVkBuildAccelerationStructureFlagBitsKHR : public das::Enumeration {
public:
    EnumerationVkBuildAccelerationStructureFlagBitsKHR() : das::Enumeration("VkBuildAccelerationStructureFlagBitsKHR") {
        external = true;
        cppName = "VkBuildAccelerationStructureFlagBitsKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkBuildAccelerationStructureFlagBitsKHR >::type >::type;
        VkBuildAccelerationStructureFlagBitsKHR enumArray[] = {
            VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,
            VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,
            VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,
            VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,
            VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,
            VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV,
            VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV,
            VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV,
            VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV,
            VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV,
            VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR",
            "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR",
            "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR",
            "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR",
            "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR",
            "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV",
            "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV",
            "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV",
            "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV",
            "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV",
            "VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 11; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkBuildAccelerationStructureFlagBitsKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkBuildAccelerationStructureFlagBitsKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkQueueGlobalPriorityEXT > : cast_enum < VkQueueGlobalPriorityEXT > {};
};

class EnumerationVkQueueGlobalPriorityEXT : public das::Enumeration {
public:
    EnumerationVkQueueGlobalPriorityEXT() : das::Enumeration("VkQueueGlobalPriorityEXT") {
        external = true;
        cppName = "VkQueueGlobalPriorityEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkQueueGlobalPriorityEXT >::type >::type;
        VkQueueGlobalPriorityEXT enumArray[] = {
            VkQueueGlobalPriorityEXT::VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT,
            VkQueueGlobalPriorityEXT::VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT,
            VkQueueGlobalPriorityEXT::VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT,
            VkQueueGlobalPriorityEXT::VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT,
            VkQueueGlobalPriorityEXT::VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT",
            "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT",
            "VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT",
            "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT",
            "VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkQueueGlobalPriorityEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkQueueGlobalPriorityEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkPipelineCompilerControlFlagBitsAMD > : cast_enum < VkPipelineCompilerControlFlagBitsAMD > {};
};

class EnumerationVkPipelineCompilerControlFlagBitsAMD : public das::Enumeration {
public:
    EnumerationVkPipelineCompilerControlFlagBitsAMD() : das::Enumeration("VkPipelineCompilerControlFlagBitsAMD") {
        external = true;
        cppName = "VkPipelineCompilerControlFlagBitsAMD";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPipelineCompilerControlFlagBitsAMD >::type >::type;
        VkPipelineCompilerControlFlagBitsAMD enumArray[] = {
            VkPipelineCompilerControlFlagBitsAMD::VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD
        };
        static const char *enumArrayName[] = {
            "VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD"
        };
        for (uint32_t i = 0; i < 1; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPipelineCompilerControlFlagBitsAMD > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPipelineCompilerControlFlagBitsAMD");
        }
    };
}
namespace das
{
    template <> struct cast < VkTimeDomainEXT > : cast_enum < VkTimeDomainEXT > {};
};

class EnumerationVkTimeDomainEXT : public das::Enumeration {
public:
    EnumerationVkTimeDomainEXT() : das::Enumeration("VkTimeDomainEXT") {
        external = true;
        cppName = "VkTimeDomainEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkTimeDomainEXT >::type >::type;
        VkTimeDomainEXT enumArray[] = {
            VkTimeDomainEXT::VK_TIME_DOMAIN_DEVICE_EXT,
            VkTimeDomainEXT::VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT,
            VkTimeDomainEXT::VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT,
            VkTimeDomainEXT::VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT,
            VkTimeDomainEXT::VK_TIME_DOMAIN_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_TIME_DOMAIN_DEVICE_EXT",
            "VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT",
            "VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT",
            "VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT",
            "VK_TIME_DOMAIN_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkTimeDomainEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkTimeDomainEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkMemoryOverallocationBehaviorAMD > : cast_enum < VkMemoryOverallocationBehaviorAMD > {};
};

class EnumerationVkMemoryOverallocationBehaviorAMD : public das::Enumeration {
public:
    EnumerationVkMemoryOverallocationBehaviorAMD() : das::Enumeration("VkMemoryOverallocationBehaviorAMD") {
        external = true;
        cppName = "VkMemoryOverallocationBehaviorAMD";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkMemoryOverallocationBehaviorAMD >::type >::type;
        VkMemoryOverallocationBehaviorAMD enumArray[] = {
            VkMemoryOverallocationBehaviorAMD::VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD,
            VkMemoryOverallocationBehaviorAMD::VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD,
            VkMemoryOverallocationBehaviorAMD::VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD,
            VkMemoryOverallocationBehaviorAMD::VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD
        };
        static const char *enumArrayName[] = {
            "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD",
            "VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD",
            "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD",
            "VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkMemoryOverallocationBehaviorAMD > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkMemoryOverallocationBehaviorAMD");
        }
    };
}
namespace das
{
    template <> struct cast < VkPipelineCreationFeedbackFlagBitsEXT > : cast_enum < VkPipelineCreationFeedbackFlagBitsEXT > {};
};

class EnumerationVkPipelineCreationFeedbackFlagBitsEXT : public das::Enumeration {
public:
    EnumerationVkPipelineCreationFeedbackFlagBitsEXT() : das::Enumeration("VkPipelineCreationFeedbackFlagBitsEXT") {
        external = true;
        cppName = "VkPipelineCreationFeedbackFlagBitsEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPipelineCreationFeedbackFlagBitsEXT >::type >::type;
        VkPipelineCreationFeedbackFlagBitsEXT enumArray[] = {
            VkPipelineCreationFeedbackFlagBitsEXT::VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT,
            VkPipelineCreationFeedbackFlagBitsEXT::VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT,
            VkPipelineCreationFeedbackFlagBitsEXT::VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT,
            VkPipelineCreationFeedbackFlagBitsEXT::VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT",
            "VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT",
            "VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT",
            "VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPipelineCreationFeedbackFlagBitsEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPipelineCreationFeedbackFlagBitsEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkPerformanceConfigurationTypeINTEL > : cast_enum < VkPerformanceConfigurationTypeINTEL > {};
};

class EnumerationVkPerformanceConfigurationTypeINTEL : public das::Enumeration {
public:
    EnumerationVkPerformanceConfigurationTypeINTEL() : das::Enumeration("VkPerformanceConfigurationTypeINTEL") {
        external = true;
        cppName = "VkPerformanceConfigurationTypeINTEL";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPerformanceConfigurationTypeINTEL >::type >::type;
        VkPerformanceConfigurationTypeINTEL enumArray[] = {
            VkPerformanceConfigurationTypeINTEL::VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL,
            VkPerformanceConfigurationTypeINTEL::VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL
        };
        static const char *enumArrayName[] = {
            "VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL",
            "VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPerformanceConfigurationTypeINTEL > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPerformanceConfigurationTypeINTEL");
        }
    };
}
namespace das
{
    template <> struct cast < VkQueryPoolSamplingModeINTEL > : cast_enum < VkQueryPoolSamplingModeINTEL > {};
};

class EnumerationVkQueryPoolSamplingModeINTEL : public das::Enumeration {
public:
    EnumerationVkQueryPoolSamplingModeINTEL() : das::Enumeration("VkQueryPoolSamplingModeINTEL") {
        external = true;
        cppName = "VkQueryPoolSamplingModeINTEL";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkQueryPoolSamplingModeINTEL >::type >::type;
        VkQueryPoolSamplingModeINTEL enumArray[] = {
            VkQueryPoolSamplingModeINTEL::VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL,
            VkQueryPoolSamplingModeINTEL::VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL
        };
        static const char *enumArrayName[] = {
            "VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL",
            "VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkQueryPoolSamplingModeINTEL > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkQueryPoolSamplingModeINTEL");
        }
    };
}
namespace das
{
    template <> struct cast < VkPerformanceOverrideTypeINTEL > : cast_enum < VkPerformanceOverrideTypeINTEL > {};
};

class EnumerationVkPerformanceOverrideTypeINTEL : public das::Enumeration {
public:
    EnumerationVkPerformanceOverrideTypeINTEL() : das::Enumeration("VkPerformanceOverrideTypeINTEL") {
        external = true;
        cppName = "VkPerformanceOverrideTypeINTEL";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPerformanceOverrideTypeINTEL >::type >::type;
        VkPerformanceOverrideTypeINTEL enumArray[] = {
            VkPerformanceOverrideTypeINTEL::VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL,
            VkPerformanceOverrideTypeINTEL::VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL,
            VkPerformanceOverrideTypeINTEL::VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL
        };
        static const char *enumArrayName[] = {
            "VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL",
            "VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL",
            "VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPerformanceOverrideTypeINTEL > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPerformanceOverrideTypeINTEL");
        }
    };
}
namespace das
{
    template <> struct cast < VkPerformanceParameterTypeINTEL > : cast_enum < VkPerformanceParameterTypeINTEL > {};
};

class EnumerationVkPerformanceParameterTypeINTEL : public das::Enumeration {
public:
    EnumerationVkPerformanceParameterTypeINTEL() : das::Enumeration("VkPerformanceParameterTypeINTEL") {
        external = true;
        cppName = "VkPerformanceParameterTypeINTEL";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPerformanceParameterTypeINTEL >::type >::type;
        VkPerformanceParameterTypeINTEL enumArray[] = {
            VkPerformanceParameterTypeINTEL::VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL,
            VkPerformanceParameterTypeINTEL::VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL,
            VkPerformanceParameterTypeINTEL::VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL
        };
        static const char *enumArrayName[] = {
            "VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL",
            "VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL",
            "VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPerformanceParameterTypeINTEL > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPerformanceParameterTypeINTEL");
        }
    };
}
namespace das
{
    template <> struct cast < VkPerformanceValueTypeINTEL > : cast_enum < VkPerformanceValueTypeINTEL > {};
};

class EnumerationVkPerformanceValueTypeINTEL : public das::Enumeration {
public:
    EnumerationVkPerformanceValueTypeINTEL() : das::Enumeration("VkPerformanceValueTypeINTEL") {
        external = true;
        cppName = "VkPerformanceValueTypeINTEL";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPerformanceValueTypeINTEL >::type >::type;
        VkPerformanceValueTypeINTEL enumArray[] = {
            VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL,
            VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL,
            VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL,
            VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL,
            VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL,
            VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL
        };
        static const char *enumArrayName[] = {
            "VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL",
            "VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL",
            "VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL",
            "VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL",
            "VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL",
            "VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL"
        };
        for (uint32_t i = 0; i < 6; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPerformanceValueTypeINTEL > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPerformanceValueTypeINTEL");
        }
    };
}
namespace das
{
    template <> struct cast < VkShaderCorePropertiesFlagBitsAMD > : cast_enum < VkShaderCorePropertiesFlagBitsAMD > {};
};

class EnumerationVkShaderCorePropertiesFlagBitsAMD : public das::Enumeration {
public:
    EnumerationVkShaderCorePropertiesFlagBitsAMD() : das::Enumeration("VkShaderCorePropertiesFlagBitsAMD") {
        external = true;
        cppName = "VkShaderCorePropertiesFlagBitsAMD";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkShaderCorePropertiesFlagBitsAMD >::type >::type;
        VkShaderCorePropertiesFlagBitsAMD enumArray[] = {
            VkShaderCorePropertiesFlagBitsAMD::VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD
        };
        static const char *enumArrayName[] = {
            "VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD"
        };
        for (uint32_t i = 0; i < 1; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkShaderCorePropertiesFlagBitsAMD > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkShaderCorePropertiesFlagBitsAMD");
        }
    };
}
namespace das
{
    template <> struct cast < VkToolPurposeFlagBitsEXT > : cast_enum < VkToolPurposeFlagBitsEXT > {};
};

class EnumerationVkToolPurposeFlagBitsEXT : public das::Enumeration {
public:
    EnumerationVkToolPurposeFlagBitsEXT() : das::Enumeration("VkToolPurposeFlagBitsEXT") {
        external = true;
        cppName = "VkToolPurposeFlagBitsEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkToolPurposeFlagBitsEXT >::type >::type;
        VkToolPurposeFlagBitsEXT enumArray[] = {
            VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_VALIDATION_BIT_EXT,
            VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_PROFILING_BIT_EXT,
            VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_TRACING_BIT_EXT,
            VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT,
            VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT,
            VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT,
            VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT,
            VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_TOOL_PURPOSE_VALIDATION_BIT_EXT",
            "VK_TOOL_PURPOSE_PROFILING_BIT_EXT",
            "VK_TOOL_PURPOSE_TRACING_BIT_EXT",
            "VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT",
            "VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT",
            "VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT",
            "VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT",
            "VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 8; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkToolPurposeFlagBitsEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkToolPurposeFlagBitsEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkValidationFeatureEnableEXT > : cast_enum < VkValidationFeatureEnableEXT > {};
};

class EnumerationVkValidationFeatureEnableEXT : public das::Enumeration {
public:
    EnumerationVkValidationFeatureEnableEXT() : das::Enumeration("VkValidationFeatureEnableEXT") {
        external = true;
        cppName = "VkValidationFeatureEnableEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkValidationFeatureEnableEXT >::type >::type;
        VkValidationFeatureEnableEXT enumArray[] = {
            VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT,
            VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT,
            VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT,
            VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT,
            VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT,
            VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT",
            "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT",
            "VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT",
            "VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT",
            "VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT",
            "VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 6; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkValidationFeatureEnableEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkValidationFeatureEnableEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkValidationFeatureDisableEXT > : cast_enum < VkValidationFeatureDisableEXT > {};
};

class EnumerationVkValidationFeatureDisableEXT : public das::Enumeration {
public:
    EnumerationVkValidationFeatureDisableEXT() : das::Enumeration("VkValidationFeatureDisableEXT") {
        external = true;
        cppName = "VkValidationFeatureDisableEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkValidationFeatureDisableEXT >::type >::type;
        VkValidationFeatureDisableEXT enumArray[] = {
            VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_ALL_EXT,
            VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT,
            VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT,
            VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT,
            VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT,
            VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT,
            VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT,
            VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_VALIDATION_FEATURE_DISABLE_ALL_EXT",
            "VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT",
            "VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT",
            "VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT",
            "VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT",
            "VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT",
            "VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT",
            "VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 8; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkValidationFeatureDisableEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkValidationFeatureDisableEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkComponentTypeNV > : cast_enum < VkComponentTypeNV > {};
};

class EnumerationVkComponentTypeNV : public das::Enumeration {
public:
    EnumerationVkComponentTypeNV() : das::Enumeration("VkComponentTypeNV") {
        external = true;
        cppName = "VkComponentTypeNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkComponentTypeNV >::type >::type;
        VkComponentTypeNV enumArray[] = {
            VkComponentTypeNV::VK_COMPONENT_TYPE_FLOAT16_NV,
            VkComponentTypeNV::VK_COMPONENT_TYPE_FLOAT32_NV,
            VkComponentTypeNV::VK_COMPONENT_TYPE_FLOAT64_NV,
            VkComponentTypeNV::VK_COMPONENT_TYPE_SINT8_NV,
            VkComponentTypeNV::VK_COMPONENT_TYPE_SINT16_NV,
            VkComponentTypeNV::VK_COMPONENT_TYPE_SINT32_NV,
            VkComponentTypeNV::VK_COMPONENT_TYPE_SINT64_NV,
            VkComponentTypeNV::VK_COMPONENT_TYPE_UINT8_NV,
            VkComponentTypeNV::VK_COMPONENT_TYPE_UINT16_NV,
            VkComponentTypeNV::VK_COMPONENT_TYPE_UINT32_NV,
            VkComponentTypeNV::VK_COMPONENT_TYPE_UINT64_NV,
            VkComponentTypeNV::VK_COMPONENT_TYPE_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_COMPONENT_TYPE_FLOAT16_NV",
            "VK_COMPONENT_TYPE_FLOAT32_NV",
            "VK_COMPONENT_TYPE_FLOAT64_NV",
            "VK_COMPONENT_TYPE_SINT8_NV",
            "VK_COMPONENT_TYPE_SINT16_NV",
            "VK_COMPONENT_TYPE_SINT32_NV",
            "VK_COMPONENT_TYPE_SINT64_NV",
            "VK_COMPONENT_TYPE_UINT8_NV",
            "VK_COMPONENT_TYPE_UINT16_NV",
            "VK_COMPONENT_TYPE_UINT32_NV",
            "VK_COMPONENT_TYPE_UINT64_NV",
            "VK_COMPONENT_TYPE_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 12; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkComponentTypeNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkComponentTypeNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkScopeNV > : cast_enum < VkScopeNV > {};
};

class EnumerationVkScopeNV : public das::Enumeration {
public:
    EnumerationVkScopeNV() : das::Enumeration("VkScopeNV") {
        external = true;
        cppName = "VkScopeNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkScopeNV >::type >::type;
        VkScopeNV enumArray[] = {
            VkScopeNV::VK_SCOPE_DEVICE_NV,
            VkScopeNV::VK_SCOPE_WORKGROUP_NV,
            VkScopeNV::VK_SCOPE_SUBGROUP_NV,
            VkScopeNV::VK_SCOPE_QUEUE_FAMILY_NV,
            VkScopeNV::VK_SCOPE_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_SCOPE_DEVICE_NV",
            "VK_SCOPE_WORKGROUP_NV",
            "VK_SCOPE_SUBGROUP_NV",
            "VK_SCOPE_QUEUE_FAMILY_NV",
            "VK_SCOPE_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkScopeNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkScopeNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkCoverageReductionModeNV > : cast_enum < VkCoverageReductionModeNV > {};
};

class EnumerationVkCoverageReductionModeNV : public das::Enumeration {
public:
    EnumerationVkCoverageReductionModeNV() : das::Enumeration("VkCoverageReductionModeNV") {
        external = true;
        cppName = "VkCoverageReductionModeNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkCoverageReductionModeNV >::type >::type;
        VkCoverageReductionModeNV enumArray[] = {
            VkCoverageReductionModeNV::VK_COVERAGE_REDUCTION_MODE_MERGE_NV,
            VkCoverageReductionModeNV::VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV,
            VkCoverageReductionModeNV::VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_COVERAGE_REDUCTION_MODE_MERGE_NV",
            "VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV",
            "VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkCoverageReductionModeNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkCoverageReductionModeNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkLineRasterizationModeEXT > : cast_enum < VkLineRasterizationModeEXT > {};
};

class EnumerationVkLineRasterizationModeEXT : public das::Enumeration {
public:
    EnumerationVkLineRasterizationModeEXT() : das::Enumeration("VkLineRasterizationModeEXT") {
        external = true;
        cppName = "VkLineRasterizationModeEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkLineRasterizationModeEXT >::type >::type;
        VkLineRasterizationModeEXT enumArray[] = {
            VkLineRasterizationModeEXT::VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT,
            VkLineRasterizationModeEXT::VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT,
            VkLineRasterizationModeEXT::VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT,
            VkLineRasterizationModeEXT::VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT,
            VkLineRasterizationModeEXT::VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT",
            "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT",
            "VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT",
            "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT",
            "VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkLineRasterizationModeEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkLineRasterizationModeEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkIndirectCommandsTokenTypeNV > : cast_enum < VkIndirectCommandsTokenTypeNV > {};
};

class EnumerationVkIndirectCommandsTokenTypeNV : public das::Enumeration {
public:
    EnumerationVkIndirectCommandsTokenTypeNV() : das::Enumeration("VkIndirectCommandsTokenTypeNV") {
        external = true;
        cppName = "VkIndirectCommandsTokenTypeNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkIndirectCommandsTokenTypeNV >::type >::type;
        VkIndirectCommandsTokenTypeNV enumArray[] = {
            VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV,
            VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV,
            VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV,
            VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV,
            VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV,
            VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV,
            VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV,
            VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV,
            VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV",
            "VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV",
            "VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV",
            "VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV",
            "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV",
            "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV",
            "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV",
            "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV",
            "VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 9; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkIndirectCommandsTokenTypeNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkIndirectCommandsTokenTypeNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkIndirectStateFlagBitsNV > : cast_enum < VkIndirectStateFlagBitsNV > {};
};

class EnumerationVkIndirectStateFlagBitsNV : public das::Enumeration {
public:
    EnumerationVkIndirectStateFlagBitsNV() : das::Enumeration("VkIndirectStateFlagBitsNV") {
        external = true;
        cppName = "VkIndirectStateFlagBitsNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkIndirectStateFlagBitsNV >::type >::type;
        VkIndirectStateFlagBitsNV enumArray[] = {
            VkIndirectStateFlagBitsNV::VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV,
            VkIndirectStateFlagBitsNV::VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV",
            "VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkIndirectStateFlagBitsNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkIndirectStateFlagBitsNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkIndirectCommandsLayoutUsageFlagBitsNV > : cast_enum < VkIndirectCommandsLayoutUsageFlagBitsNV > {};
};

class EnumerationVkIndirectCommandsLayoutUsageFlagBitsNV : public das::Enumeration {
public:
    EnumerationVkIndirectCommandsLayoutUsageFlagBitsNV() : das::Enumeration("VkIndirectCommandsLayoutUsageFlagBitsNV") {
        external = true;
        cppName = "VkIndirectCommandsLayoutUsageFlagBitsNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkIndirectCommandsLayoutUsageFlagBitsNV >::type >::type;
        VkIndirectCommandsLayoutUsageFlagBitsNV enumArray[] = {
            VkIndirectCommandsLayoutUsageFlagBitsNV::VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV,
            VkIndirectCommandsLayoutUsageFlagBitsNV::VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV,
            VkIndirectCommandsLayoutUsageFlagBitsNV::VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV,
            VkIndirectCommandsLayoutUsageFlagBitsNV::VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV",
            "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV",
            "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV",
            "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkIndirectCommandsLayoutUsageFlagBitsNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkIndirectCommandsLayoutUsageFlagBitsNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkDeviceMemoryReportEventTypeEXT > : cast_enum < VkDeviceMemoryReportEventTypeEXT > {};
};

class EnumerationVkDeviceMemoryReportEventTypeEXT : public das::Enumeration {
public:
    EnumerationVkDeviceMemoryReportEventTypeEXT() : das::Enumeration("VkDeviceMemoryReportEventTypeEXT") {
        external = true;
        cppName = "VkDeviceMemoryReportEventTypeEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDeviceMemoryReportEventTypeEXT >::type >::type;
        VkDeviceMemoryReportEventTypeEXT enumArray[] = {
            VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT,
            VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT,
            VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT,
            VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT,
            VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT,
            VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT",
            "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT",
            "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT",
            "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT",
            "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT",
            "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 6; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDeviceMemoryReportEventTypeEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDeviceMemoryReportEventTypeEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkPrivateDataSlotCreateFlagBitsEXT > : cast_enum < VkPrivateDataSlotCreateFlagBitsEXT > {};
};

class EnumerationVkPrivateDataSlotCreateFlagBitsEXT : public das::Enumeration {
public:
    EnumerationVkPrivateDataSlotCreateFlagBitsEXT() : das::Enumeration("VkPrivateDataSlotCreateFlagBitsEXT") {
        external = true;
        cppName = "VkPrivateDataSlotCreateFlagBitsEXT";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkPrivateDataSlotCreateFlagBitsEXT >::type >::type;
        VkPrivateDataSlotCreateFlagBitsEXT enumArray[] = {
            VkPrivateDataSlotCreateFlagBitsEXT::VK_PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT
        };
        static const char *enumArrayName[] = {
            "VK_PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT"
        };
        for (uint32_t i = 0; i < 1; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkPrivateDataSlotCreateFlagBitsEXT > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkPrivateDataSlotCreateFlagBitsEXT");
        }
    };
}
namespace das
{
    template <> struct cast < VkDeviceDiagnosticsConfigFlagBitsNV > : cast_enum < VkDeviceDiagnosticsConfigFlagBitsNV > {};
};

class EnumerationVkDeviceDiagnosticsConfigFlagBitsNV : public das::Enumeration {
public:
    EnumerationVkDeviceDiagnosticsConfigFlagBitsNV() : das::Enumeration("VkDeviceDiagnosticsConfigFlagBitsNV") {
        external = true;
        cppName = "VkDeviceDiagnosticsConfigFlagBitsNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkDeviceDiagnosticsConfigFlagBitsNV >::type >::type;
        VkDeviceDiagnosticsConfigFlagBitsNV enumArray[] = {
            VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV,
            VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV,
            VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV,
            VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV",
            "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV",
            "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV",
            "VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkDeviceDiagnosticsConfigFlagBitsNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkDeviceDiagnosticsConfigFlagBitsNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkFragmentShadingRateTypeNV > : cast_enum < VkFragmentShadingRateTypeNV > {};
};

class EnumerationVkFragmentShadingRateTypeNV : public das::Enumeration {
public:
    EnumerationVkFragmentShadingRateTypeNV() : das::Enumeration("VkFragmentShadingRateTypeNV") {
        external = true;
        cppName = "VkFragmentShadingRateTypeNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkFragmentShadingRateTypeNV >::type >::type;
        VkFragmentShadingRateTypeNV enumArray[] = {
            VkFragmentShadingRateTypeNV::VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV,
            VkFragmentShadingRateTypeNV::VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV,
            VkFragmentShadingRateTypeNV::VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV",
            "VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV",
            "VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkFragmentShadingRateTypeNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkFragmentShadingRateTypeNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkFragmentShadingRateNV > : cast_enum < VkFragmentShadingRateNV > {};
};

class EnumerationVkFragmentShadingRateNV : public das::Enumeration {
public:
    EnumerationVkFragmentShadingRateNV() : das::Enumeration("VkFragmentShadingRateNV") {
        external = true;
        cppName = "VkFragmentShadingRateNV";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkFragmentShadingRateNV >::type >::type;
        VkFragmentShadingRateNV enumArray[] = {
            VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV,
            VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV,
            VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV,
            VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV,
            VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV,
            VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV,
            VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV,
            VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV,
            VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV,
            VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV,
            VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV,
            VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV,
            VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV
        };
        static const char *enumArrayName[] = {
            "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV",
            "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV",
            "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV",
            "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV",
            "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV",
            "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV",
            "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV",
            "VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV",
            "VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV",
            "VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV",
            "VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV",
            "VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV",
            "VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV"
        };
        for (uint32_t i = 0; i < 13; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkFragmentShadingRateNV > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkFragmentShadingRateNV");
        }
    };
}
namespace das
{
    template <> struct cast < VkBuildAccelerationStructureModeKHR > : cast_enum < VkBuildAccelerationStructureModeKHR > {};
};

class EnumerationVkBuildAccelerationStructureModeKHR : public das::Enumeration {
public:
    EnumerationVkBuildAccelerationStructureModeKHR() : das::Enumeration("VkBuildAccelerationStructureModeKHR") {
        external = true;
        cppName = "VkBuildAccelerationStructureModeKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkBuildAccelerationStructureModeKHR >::type >::type;
        VkBuildAccelerationStructureModeKHR enumArray[] = {
            VkBuildAccelerationStructureModeKHR::VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR,
            VkBuildAccelerationStructureModeKHR::VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR,
            VkBuildAccelerationStructureModeKHR::VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR",
            "VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR",
            "VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkBuildAccelerationStructureModeKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkBuildAccelerationStructureModeKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkAccelerationStructureBuildTypeKHR > : cast_enum < VkAccelerationStructureBuildTypeKHR > {};
};

class EnumerationVkAccelerationStructureBuildTypeKHR : public das::Enumeration {
public:
    EnumerationVkAccelerationStructureBuildTypeKHR() : das::Enumeration("VkAccelerationStructureBuildTypeKHR") {
        external = true;
        cppName = "VkAccelerationStructureBuildTypeKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkAccelerationStructureBuildTypeKHR >::type >::type;
        VkAccelerationStructureBuildTypeKHR enumArray[] = {
            VkAccelerationStructureBuildTypeKHR::VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR,
            VkAccelerationStructureBuildTypeKHR::VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR,
            VkAccelerationStructureBuildTypeKHR::VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR,
            VkAccelerationStructureBuildTypeKHR::VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR",
            "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR",
            "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR",
            "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 4; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkAccelerationStructureBuildTypeKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkAccelerationStructureBuildTypeKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkAccelerationStructureCompatibilityKHR > : cast_enum < VkAccelerationStructureCompatibilityKHR > {};
};

class EnumerationVkAccelerationStructureCompatibilityKHR : public das::Enumeration {
public:
    EnumerationVkAccelerationStructureCompatibilityKHR() : das::Enumeration("VkAccelerationStructureCompatibilityKHR") {
        external = true;
        cppName = "VkAccelerationStructureCompatibilityKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkAccelerationStructureCompatibilityKHR >::type >::type;
        VkAccelerationStructureCompatibilityKHR enumArray[] = {
            VkAccelerationStructureCompatibilityKHR::VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR,
            VkAccelerationStructureCompatibilityKHR::VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR,
            VkAccelerationStructureCompatibilityKHR::VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR",
            "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR",
            "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 3; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkAccelerationStructureCompatibilityKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkAccelerationStructureCompatibilityKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkAccelerationStructureCreateFlagBitsKHR > : cast_enum < VkAccelerationStructureCreateFlagBitsKHR > {};
};

class EnumerationVkAccelerationStructureCreateFlagBitsKHR : public das::Enumeration {
public:
    EnumerationVkAccelerationStructureCreateFlagBitsKHR() : das::Enumeration("VkAccelerationStructureCreateFlagBitsKHR") {
        external = true;
        cppName = "VkAccelerationStructureCreateFlagBitsKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkAccelerationStructureCreateFlagBitsKHR >::type >::type;
        VkAccelerationStructureCreateFlagBitsKHR enumArray[] = {
            VkAccelerationStructureCreateFlagBitsKHR::VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR,
            VkAccelerationStructureCreateFlagBitsKHR::VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR",
            "VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 2; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkAccelerationStructureCreateFlagBitsKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkAccelerationStructureCreateFlagBitsKHR");
        }
    };
}
namespace das
{
    template <> struct cast < VkShaderGroupShaderKHR > : cast_enum < VkShaderGroupShaderKHR > {};
};

class EnumerationVkShaderGroupShaderKHR : public das::Enumeration {
public:
    EnumerationVkShaderGroupShaderKHR() : das::Enumeration("VkShaderGroupShaderKHR") {
        external = true;
        cppName = "VkShaderGroupShaderKHR";
        baseType = (das::Type) das::ToBasicType< das::underlying_type< VkShaderGroupShaderKHR >::type >::type;
        VkShaderGroupShaderKHR enumArray[] = {
            VkShaderGroupShaderKHR::VK_SHADER_GROUP_SHADER_GENERAL_KHR,
            VkShaderGroupShaderKHR::VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR,
            VkShaderGroupShaderKHR::VK_SHADER_GROUP_SHADER_ANY_HIT_KHR,
            VkShaderGroupShaderKHR::VK_SHADER_GROUP_SHADER_INTERSECTION_KHR,
            VkShaderGroupShaderKHR::VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR
        };
        static const char *enumArrayName[] = {
            "VK_SHADER_GROUP_SHADER_GENERAL_KHR",
            "VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR",
            "VK_SHADER_GROUP_SHADER_ANY_HIT_KHR",
            "VK_SHADER_GROUP_SHADER_INTERSECTION_KHR",
            "VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR"
        };
        for (uint32_t i = 0; i < 5; ++i)
            addI(enumArrayName[i], int64_t(enumArray[i]), das::LineInfo());
    }
};

namespace das
{
    template <>
    struct typeFactory< VkShaderGroupShaderKHR > {
        static TypeDeclPtr make(const ModuleLibrary & library){
            return library.makeEnumType("VkShaderGroupShaderKHR");
        }
    };
}

//
// opaque structs
//

MAKE_EXTERNAL_TYPE_FACTORY(VkBuffer, VkBuffer)
MAKE_EXTERNAL_TYPE_FACTORY(VkImage, VkImage)
MAKE_EXTERNAL_TYPE_FACTORY(VkInstance, VkInstance)
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDevice, VkPhysicalDevice)
MAKE_EXTERNAL_TYPE_FACTORY(VkDevice, VkDevice)
MAKE_EXTERNAL_TYPE_FACTORY(VkQueue, VkQueue)
MAKE_EXTERNAL_TYPE_FACTORY(VkSemaphore, VkSemaphore)
MAKE_EXTERNAL_TYPE_FACTORY(VkCommandBuffer, VkCommandBuffer)
MAKE_EXTERNAL_TYPE_FACTORY(VkFence, VkFence)
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceMemory, VkDeviceMemory)
MAKE_EXTERNAL_TYPE_FACTORY(VkEvent, VkEvent)
MAKE_EXTERNAL_TYPE_FACTORY(VkQueryPool, VkQueryPool)
MAKE_EXTERNAL_TYPE_FACTORY(VkBufferView, VkBufferView)
MAKE_EXTERNAL_TYPE_FACTORY(VkImageView, VkImageView)
MAKE_EXTERNAL_TYPE_FACTORY(VkShaderModule, VkShaderModule)
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineCache, VkPipelineCache)
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineLayout, VkPipelineLayout)
MAKE_EXTERNAL_TYPE_FACTORY(VkPipeline, VkPipeline)
MAKE_EXTERNAL_TYPE_FACTORY(VkRenderPass, VkRenderPass)
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorSetLayout, VkDescriptorSetLayout)
MAKE_EXTERNAL_TYPE_FACTORY(VkSampler, VkSampler)
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorSet, VkDescriptorSet)
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorPool, VkDescriptorPool)
MAKE_EXTERNAL_TYPE_FACTORY(VkFramebuffer, VkFramebuffer)
MAKE_EXTERNAL_TYPE_FACTORY(VkCommandPool, VkCommandPool)
MAKE_EXTERNAL_TYPE_FACTORY(VkSamplerYcbcrConversion, VkSamplerYcbcrConversion)
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorUpdateTemplate, VkDescriptorUpdateTemplate)
MAKE_EXTERNAL_TYPE_FACTORY(VkSurfaceKHR, VkSurfaceKHR)
MAKE_EXTERNAL_TYPE_FACTORY(VkSwapchainKHR, VkSwapchainKHR)
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayKHR, VkDisplayKHR)
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayModeKHR, VkDisplayModeKHR)
MAKE_EXTERNAL_TYPE_FACTORY(VkDeferredOperationKHR, VkDeferredOperationKHR)
MAKE_EXTERNAL_TYPE_FACTORY(VkDebugReportCallbackEXT, VkDebugReportCallbackEXT)
MAKE_EXTERNAL_TYPE_FACTORY(VkDebugUtilsMessengerEXT, VkDebugUtilsMessengerEXT)
MAKE_EXTERNAL_TYPE_FACTORY(VkValidationCacheEXT, VkValidationCacheEXT)
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureNV, VkAccelerationStructureNV)
MAKE_EXTERNAL_TYPE_FACTORY(VkPerformanceConfigurationINTEL, VkPerformanceConfigurationINTEL)
MAKE_EXTERNAL_TYPE_FACTORY(VkIndirectCommandsLayoutNV, VkIndirectCommandsLayoutNV)
MAKE_EXTERNAL_TYPE_FACTORY(VkPrivateDataSlotEXT, VkPrivateDataSlotEXT)
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureKHR, VkAccelerationStructureKHR)

//
// structs
//

MAKE_EXTERNAL_TYPE_FACTORY(VkExtent2D, VkExtent2D);
MAKE_EXTERNAL_TYPE_FACTORY(VkExtent3D, VkExtent3D);
MAKE_EXTERNAL_TYPE_FACTORY(VkOffset2D, VkOffset2D);
MAKE_EXTERNAL_TYPE_FACTORY(VkOffset3D, VkOffset3D);
MAKE_EXTERNAL_TYPE_FACTORY(VkRect2D, VkRect2D);
MAKE_EXTERNAL_TYPE_FACTORY(VkBaseInStructure, VkBaseInStructure);
MAKE_EXTERNAL_TYPE_FACTORY(VkBaseOutStructure, VkBaseOutStructure);
MAKE_EXTERNAL_TYPE_FACTORY(VkBufferMemoryBarrier, VkBufferMemoryBarrier);
MAKE_EXTERNAL_TYPE_FACTORY(VkDispatchIndirectCommand, VkDispatchIndirectCommand);
MAKE_EXTERNAL_TYPE_FACTORY(VkDrawIndexedIndirectCommand, VkDrawIndexedIndirectCommand);
MAKE_EXTERNAL_TYPE_FACTORY(VkDrawIndirectCommand, VkDrawIndirectCommand);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageSubresourceRange, VkImageSubresourceRange);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageMemoryBarrier, VkImageMemoryBarrier);
MAKE_EXTERNAL_TYPE_FACTORY(VkMemoryBarrier, VkMemoryBarrier);
MAKE_EXTERNAL_TYPE_FACTORY(VkAllocationCallbacks, VkAllocationCallbacks);
MAKE_EXTERNAL_TYPE_FACTORY(VkApplicationInfo, VkApplicationInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkFormatProperties, VkFormatProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageFormatProperties, VkImageFormatProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkInstanceCreateInfo, VkInstanceCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkMemoryHeap, VkMemoryHeap);
MAKE_EXTERNAL_TYPE_FACTORY(VkMemoryType, VkMemoryType);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFeatures, VkPhysicalDeviceFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceLimits, VkPhysicalDeviceLimits);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceMemoryProperties, VkPhysicalDeviceMemoryProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceSparseProperties, VkPhysicalDeviceSparseProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceProperties, VkPhysicalDeviceProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkQueueFamilyProperties, VkQueueFamilyProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceQueueCreateInfo, VkDeviceQueueCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceCreateInfo, VkDeviceCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkExtensionProperties, VkExtensionProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkLayerProperties, VkLayerProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkSubmitInfo, VkSubmitInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkMappedMemoryRange, VkMappedMemoryRange);
MAKE_EXTERNAL_TYPE_FACTORY(VkMemoryAllocateInfo, VkMemoryAllocateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkMemoryRequirements, VkMemoryRequirements);
MAKE_EXTERNAL_TYPE_FACTORY(VkSparseMemoryBind, VkSparseMemoryBind);
MAKE_EXTERNAL_TYPE_FACTORY(VkSparseBufferMemoryBindInfo, VkSparseBufferMemoryBindInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkSparseImageOpaqueMemoryBindInfo, VkSparseImageOpaqueMemoryBindInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageSubresource, VkImageSubresource);
MAKE_EXTERNAL_TYPE_FACTORY(VkSparseImageMemoryBind, VkSparseImageMemoryBind);
MAKE_EXTERNAL_TYPE_FACTORY(VkSparseImageMemoryBindInfo, VkSparseImageMemoryBindInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkBindSparseInfo, VkBindSparseInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkSparseImageFormatProperties, VkSparseImageFormatProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkSparseImageMemoryRequirements, VkSparseImageMemoryRequirements);
MAKE_EXTERNAL_TYPE_FACTORY(VkFenceCreateInfo, VkFenceCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkSemaphoreCreateInfo, VkSemaphoreCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkEventCreateInfo, VkEventCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkQueryPoolCreateInfo, VkQueryPoolCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkBufferCreateInfo, VkBufferCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkBufferViewCreateInfo, VkBufferViewCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageCreateInfo, VkImageCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkSubresourceLayout, VkSubresourceLayout);
MAKE_EXTERNAL_TYPE_FACTORY(VkComponentMapping, VkComponentMapping);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageViewCreateInfo, VkImageViewCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkShaderModuleCreateInfo, VkShaderModuleCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineCacheCreateInfo, VkPipelineCacheCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkSpecializationMapEntry, VkSpecializationMapEntry);
MAKE_EXTERNAL_TYPE_FACTORY(VkSpecializationInfo, VkSpecializationInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineShaderStageCreateInfo, VkPipelineShaderStageCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkComputePipelineCreateInfo, VkComputePipelineCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkVertexInputBindingDescription, VkVertexInputBindingDescription);
MAKE_EXTERNAL_TYPE_FACTORY(VkVertexInputAttributeDescription, VkVertexInputAttributeDescription);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineVertexInputStateCreateInfo, VkPipelineVertexInputStateCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineInputAssemblyStateCreateInfo, VkPipelineInputAssemblyStateCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineTessellationStateCreateInfo, VkPipelineTessellationStateCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkViewport, VkViewport);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineViewportStateCreateInfo, VkPipelineViewportStateCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineRasterizationStateCreateInfo, VkPipelineRasterizationStateCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineMultisampleStateCreateInfo, VkPipelineMultisampleStateCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkStencilOpState, VkStencilOpState);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineDepthStencilStateCreateInfo, VkPipelineDepthStencilStateCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineColorBlendAttachmentState, VkPipelineColorBlendAttachmentState);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineColorBlendStateCreateInfo, VkPipelineColorBlendStateCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineDynamicStateCreateInfo, VkPipelineDynamicStateCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkGraphicsPipelineCreateInfo, VkGraphicsPipelineCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPushConstantRange, VkPushConstantRange);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineLayoutCreateInfo, VkPipelineLayoutCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkSamplerCreateInfo, VkSamplerCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkCopyDescriptorSet, VkCopyDescriptorSet);
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorBufferInfo, VkDescriptorBufferInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorImageInfo, VkDescriptorImageInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorPoolSize, VkDescriptorPoolSize);
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorPoolCreateInfo, VkDescriptorPoolCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorSetAllocateInfo, VkDescriptorSetAllocateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorSetLayoutBinding, VkDescriptorSetLayoutBinding);
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorSetLayoutCreateInfo, VkDescriptorSetLayoutCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkWriteDescriptorSet, VkWriteDescriptorSet);
MAKE_EXTERNAL_TYPE_FACTORY(VkAttachmentDescription, VkAttachmentDescription);
MAKE_EXTERNAL_TYPE_FACTORY(VkAttachmentReference, VkAttachmentReference);
MAKE_EXTERNAL_TYPE_FACTORY(VkFramebufferCreateInfo, VkFramebufferCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkSubpassDescription, VkSubpassDescription);
MAKE_EXTERNAL_TYPE_FACTORY(VkSubpassDependency, VkSubpassDependency);
MAKE_EXTERNAL_TYPE_FACTORY(VkRenderPassCreateInfo, VkRenderPassCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkCommandPoolCreateInfo, VkCommandPoolCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkCommandBufferAllocateInfo, VkCommandBufferAllocateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkCommandBufferInheritanceInfo, VkCommandBufferInheritanceInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkCommandBufferBeginInfo, VkCommandBufferBeginInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkBufferCopy, VkBufferCopy);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageSubresourceLayers, VkImageSubresourceLayers);
MAKE_EXTERNAL_TYPE_FACTORY(VkBufferImageCopy, VkBufferImageCopy);
MAKE_EXTERNAL_TYPE_FACTORY(VkClearColorValue, VkClearColorValue);
MAKE_EXTERNAL_TYPE_FACTORY(VkClearDepthStencilValue, VkClearDepthStencilValue);
MAKE_EXTERNAL_TYPE_FACTORY(VkClearValue, VkClearValue);
MAKE_EXTERNAL_TYPE_FACTORY(VkClearAttachment, VkClearAttachment);
MAKE_EXTERNAL_TYPE_FACTORY(VkClearRect, VkClearRect);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageBlit, VkImageBlit);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageCopy, VkImageCopy);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageResolve, VkImageResolve);
MAKE_EXTERNAL_TYPE_FACTORY(VkRenderPassBeginInfo, VkRenderPassBeginInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceSubgroupProperties, VkPhysicalDeviceSubgroupProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkBindBufferMemoryInfo, VkBindBufferMemoryInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkBindImageMemoryInfo, VkBindImageMemoryInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDevice16BitStorageFeatures, VkPhysicalDevice16BitStorageFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkMemoryDedicatedRequirements, VkMemoryDedicatedRequirements);
MAKE_EXTERNAL_TYPE_FACTORY(VkMemoryDedicatedAllocateInfo, VkMemoryDedicatedAllocateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkMemoryAllocateFlagsInfo, VkMemoryAllocateFlagsInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceGroupRenderPassBeginInfo, VkDeviceGroupRenderPassBeginInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceGroupCommandBufferBeginInfo, VkDeviceGroupCommandBufferBeginInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceGroupSubmitInfo, VkDeviceGroupSubmitInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceGroupBindSparseInfo, VkDeviceGroupBindSparseInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkBindBufferMemoryDeviceGroupInfo, VkBindBufferMemoryDeviceGroupInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkBindImageMemoryDeviceGroupInfo, VkBindImageMemoryDeviceGroupInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceGroupProperties, VkPhysicalDeviceGroupProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceGroupDeviceCreateInfo, VkDeviceGroupDeviceCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkBufferMemoryRequirementsInfo2, VkBufferMemoryRequirementsInfo2);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageMemoryRequirementsInfo2, VkImageMemoryRequirementsInfo2);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageSparseMemoryRequirementsInfo2, VkImageSparseMemoryRequirementsInfo2);
MAKE_EXTERNAL_TYPE_FACTORY(VkMemoryRequirements2, VkMemoryRequirements2);
MAKE_EXTERNAL_TYPE_FACTORY(VkSparseImageMemoryRequirements2, VkSparseImageMemoryRequirements2);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFeatures2, VkPhysicalDeviceFeatures2);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceProperties2, VkPhysicalDeviceProperties2);
MAKE_EXTERNAL_TYPE_FACTORY(VkFormatProperties2, VkFormatProperties2);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageFormatProperties2, VkImageFormatProperties2);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceImageFormatInfo2, VkPhysicalDeviceImageFormatInfo2);
MAKE_EXTERNAL_TYPE_FACTORY(VkQueueFamilyProperties2, VkQueueFamilyProperties2);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceMemoryProperties2, VkPhysicalDeviceMemoryProperties2);
MAKE_EXTERNAL_TYPE_FACTORY(VkSparseImageFormatProperties2, VkSparseImageFormatProperties2);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceSparseImageFormatInfo2, VkPhysicalDeviceSparseImageFormatInfo2);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePointClippingProperties, VkPhysicalDevicePointClippingProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkInputAttachmentAspectReference, VkInputAttachmentAspectReference);
MAKE_EXTERNAL_TYPE_FACTORY(VkRenderPassInputAttachmentAspectCreateInfo, VkRenderPassInputAttachmentAspectCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageViewUsageCreateInfo, VkImageViewUsageCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineTessellationDomainOriginStateCreateInfo, VkPipelineTessellationDomainOriginStateCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkRenderPassMultiviewCreateInfo, VkRenderPassMultiviewCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceMultiviewFeatures, VkPhysicalDeviceMultiviewFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceMultiviewProperties, VkPhysicalDeviceMultiviewProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceVariablePointersFeatures, VkPhysicalDeviceVariablePointersFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceProtectedMemoryFeatures, VkPhysicalDeviceProtectedMemoryFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceProtectedMemoryProperties, VkPhysicalDeviceProtectedMemoryProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceQueueInfo2, VkDeviceQueueInfo2);
MAKE_EXTERNAL_TYPE_FACTORY(VkProtectedSubmitInfo, VkProtectedSubmitInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkSamplerYcbcrConversionCreateInfo, VkSamplerYcbcrConversionCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkSamplerYcbcrConversionInfo, VkSamplerYcbcrConversionInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkBindImagePlaneMemoryInfo, VkBindImagePlaneMemoryInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkImagePlaneMemoryRequirementsInfo, VkImagePlaneMemoryRequirementsInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceSamplerYcbcrConversionFeatures, VkPhysicalDeviceSamplerYcbcrConversionFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkSamplerYcbcrConversionImageFormatProperties, VkSamplerYcbcrConversionImageFormatProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorUpdateTemplateEntry, VkDescriptorUpdateTemplateEntry);
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorUpdateTemplateCreateInfo, VkDescriptorUpdateTemplateCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkExternalMemoryProperties, VkExternalMemoryProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceExternalImageFormatInfo, VkPhysicalDeviceExternalImageFormatInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkExternalImageFormatProperties, VkExternalImageFormatProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceExternalBufferInfo, VkPhysicalDeviceExternalBufferInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkExternalBufferProperties, VkExternalBufferProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceIDProperties, VkPhysicalDeviceIDProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkExternalMemoryImageCreateInfo, VkExternalMemoryImageCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkExternalMemoryBufferCreateInfo, VkExternalMemoryBufferCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkExportMemoryAllocateInfo, VkExportMemoryAllocateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceExternalFenceInfo, VkPhysicalDeviceExternalFenceInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkExternalFenceProperties, VkExternalFenceProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkExportFenceCreateInfo, VkExportFenceCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkExportSemaphoreCreateInfo, VkExportSemaphoreCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceExternalSemaphoreInfo, VkPhysicalDeviceExternalSemaphoreInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkExternalSemaphoreProperties, VkExternalSemaphoreProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceMaintenance3Properties, VkPhysicalDeviceMaintenance3Properties);
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorSetLayoutSupport, VkDescriptorSetLayoutSupport);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderDrawParametersFeatures, VkPhysicalDeviceShaderDrawParametersFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceVulkan11Features, VkPhysicalDeviceVulkan11Features);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceVulkan11Properties, VkPhysicalDeviceVulkan11Properties);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceVulkan12Features, VkPhysicalDeviceVulkan12Features);
MAKE_EXTERNAL_TYPE_FACTORY(VkConformanceVersion, VkConformanceVersion);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceVulkan12Properties, VkPhysicalDeviceVulkan12Properties);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageFormatListCreateInfo, VkImageFormatListCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkAttachmentDescription2, VkAttachmentDescription2);
MAKE_EXTERNAL_TYPE_FACTORY(VkAttachmentReference2, VkAttachmentReference2);
MAKE_EXTERNAL_TYPE_FACTORY(VkSubpassDescription2, VkSubpassDescription2);
MAKE_EXTERNAL_TYPE_FACTORY(VkSubpassDependency2, VkSubpassDependency2);
MAKE_EXTERNAL_TYPE_FACTORY(VkRenderPassCreateInfo2, VkRenderPassCreateInfo2);
MAKE_EXTERNAL_TYPE_FACTORY(VkSubpassBeginInfo, VkSubpassBeginInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkSubpassEndInfo, VkSubpassEndInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDevice8BitStorageFeatures, VkPhysicalDevice8BitStorageFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceDriverProperties, VkPhysicalDeviceDriverProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderAtomicInt64Features, VkPhysicalDeviceShaderAtomicInt64Features);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderFloat16Int8Features, VkPhysicalDeviceShaderFloat16Int8Features);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFloatControlsProperties, VkPhysicalDeviceFloatControlsProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorSetLayoutBindingFlagsCreateInfo, VkDescriptorSetLayoutBindingFlagsCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceDescriptorIndexingFeatures, VkPhysicalDeviceDescriptorIndexingFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceDescriptorIndexingProperties, VkPhysicalDeviceDescriptorIndexingProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorSetVariableDescriptorCountAllocateInfo, VkDescriptorSetVariableDescriptorCountAllocateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorSetVariableDescriptorCountLayoutSupport, VkDescriptorSetVariableDescriptorCountLayoutSupport);
MAKE_EXTERNAL_TYPE_FACTORY(VkSubpassDescriptionDepthStencilResolve, VkSubpassDescriptionDepthStencilResolve);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceDepthStencilResolveProperties, VkPhysicalDeviceDepthStencilResolveProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceScalarBlockLayoutFeatures, VkPhysicalDeviceScalarBlockLayoutFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageStencilUsageCreateInfo, VkImageStencilUsageCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkSamplerReductionModeCreateInfo, VkSamplerReductionModeCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceSamplerFilterMinmaxProperties, VkPhysicalDeviceSamplerFilterMinmaxProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceVulkanMemoryModelFeatures, VkPhysicalDeviceVulkanMemoryModelFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceImagelessFramebufferFeatures, VkPhysicalDeviceImagelessFramebufferFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkFramebufferAttachmentImageInfo, VkFramebufferAttachmentImageInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkFramebufferAttachmentsCreateInfo, VkFramebufferAttachmentsCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkRenderPassAttachmentBeginInfo, VkRenderPassAttachmentBeginInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceUniformBufferStandardLayoutFeatures, VkPhysicalDeviceUniformBufferStandardLayoutFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkAttachmentReferenceStencilLayout, VkAttachmentReferenceStencilLayout);
MAKE_EXTERNAL_TYPE_FACTORY(VkAttachmentDescriptionStencilLayout, VkAttachmentDescriptionStencilLayout);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceHostQueryResetFeatures, VkPhysicalDeviceHostQueryResetFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceTimelineSemaphoreFeatures, VkPhysicalDeviceTimelineSemaphoreFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceTimelineSemaphoreProperties, VkPhysicalDeviceTimelineSemaphoreProperties);
MAKE_EXTERNAL_TYPE_FACTORY(VkSemaphoreTypeCreateInfo, VkSemaphoreTypeCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkTimelineSemaphoreSubmitInfo, VkTimelineSemaphoreSubmitInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkSemaphoreWaitInfo, VkSemaphoreWaitInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkSemaphoreSignalInfo, VkSemaphoreSignalInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceBufferDeviceAddressFeatures, VkPhysicalDeviceBufferDeviceAddressFeatures);
MAKE_EXTERNAL_TYPE_FACTORY(VkBufferDeviceAddressInfo, VkBufferDeviceAddressInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkBufferOpaqueCaptureAddressCreateInfo, VkBufferOpaqueCaptureAddressCreateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkMemoryOpaqueCaptureAddressAllocateInfo, VkMemoryOpaqueCaptureAddressAllocateInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceMemoryOpaqueCaptureAddressInfo, VkDeviceMemoryOpaqueCaptureAddressInfo);
MAKE_EXTERNAL_TYPE_FACTORY(VkSurfaceCapabilitiesKHR, VkSurfaceCapabilitiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkSurfaceFormatKHR, VkSurfaceFormatKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkSwapchainCreateInfoKHR, VkSwapchainCreateInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPresentInfoKHR, VkPresentInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageSwapchainCreateInfoKHR, VkImageSwapchainCreateInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkBindImageMemorySwapchainInfoKHR, VkBindImageMemorySwapchainInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAcquireNextImageInfoKHR, VkAcquireNextImageInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceGroupPresentCapabilitiesKHR, VkDeviceGroupPresentCapabilitiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceGroupPresentInfoKHR, VkDeviceGroupPresentInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceGroupSwapchainCreateInfoKHR, VkDeviceGroupSwapchainCreateInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayModeParametersKHR, VkDisplayModeParametersKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayModeCreateInfoKHR, VkDisplayModeCreateInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayModePropertiesKHR, VkDisplayModePropertiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayPlaneCapabilitiesKHR, VkDisplayPlaneCapabilitiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayPlanePropertiesKHR, VkDisplayPlanePropertiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayPropertiesKHR, VkDisplayPropertiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplaySurfaceCreateInfoKHR, VkDisplaySurfaceCreateInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayPresentInfoKHR, VkDisplayPresentInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkImportMemoryFdInfoKHR, VkImportMemoryFdInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkMemoryFdPropertiesKHR, VkMemoryFdPropertiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkMemoryGetFdInfoKHR, VkMemoryGetFdInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkImportSemaphoreFdInfoKHR, VkImportSemaphoreFdInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkSemaphoreGetFdInfoKHR, VkSemaphoreGetFdInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePushDescriptorPropertiesKHR, VkPhysicalDevicePushDescriptorPropertiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkRectLayerKHR, VkRectLayerKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPresentRegionKHR, VkPresentRegionKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPresentRegionsKHR, VkPresentRegionsKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkSharedPresentSurfaceCapabilitiesKHR, VkSharedPresentSurfaceCapabilitiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkImportFenceFdInfoKHR, VkImportFenceFdInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkFenceGetFdInfoKHR, VkFenceGetFdInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePerformanceQueryFeaturesKHR, VkPhysicalDevicePerformanceQueryFeaturesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePerformanceQueryPropertiesKHR, VkPhysicalDevicePerformanceQueryPropertiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPerformanceCounterKHR, VkPerformanceCounterKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPerformanceCounterDescriptionKHR, VkPerformanceCounterDescriptionKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkQueryPoolPerformanceCreateInfoKHR, VkQueryPoolPerformanceCreateInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPerformanceCounterResultKHR, VkPerformanceCounterResultKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAcquireProfilingLockInfoKHR, VkAcquireProfilingLockInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPerformanceQuerySubmitInfoKHR, VkPerformanceQuerySubmitInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceSurfaceInfo2KHR, VkPhysicalDeviceSurfaceInfo2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkSurfaceCapabilities2KHR, VkSurfaceCapabilities2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkSurfaceFormat2KHR, VkSurfaceFormat2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayProperties2KHR, VkDisplayProperties2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayPlaneProperties2KHR, VkDisplayPlaneProperties2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayModeProperties2KHR, VkDisplayModeProperties2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayPlaneInfo2KHR, VkDisplayPlaneInfo2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayPlaneCapabilities2KHR, VkDisplayPlaneCapabilities2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderClockFeaturesKHR, VkPhysicalDeviceShaderClockFeaturesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR, VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkFragmentShadingRateAttachmentInfoKHR, VkFragmentShadingRateAttachmentInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineFragmentShadingRateStateCreateInfoKHR, VkPipelineFragmentShadingRateStateCreateInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, VkPhysicalDeviceFragmentShadingRateFeaturesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, VkPhysicalDeviceFragmentShadingRatePropertiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFragmentShadingRateKHR, VkPhysicalDeviceFragmentShadingRateKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkSurfaceProtectedCapabilitiesKHR, VkSurfaceProtectedCapabilitiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR, VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineInfoKHR, VkPipelineInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineExecutablePropertiesKHR, VkPipelineExecutablePropertiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineExecutableInfoKHR, VkPipelineExecutableInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineExecutableStatisticValueKHR, VkPipelineExecutableStatisticValueKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineExecutableStatisticKHR, VkPipelineExecutableStatisticKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineExecutableInternalRepresentationKHR, VkPipelineExecutableInternalRepresentationKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineLibraryCreateInfoKHR, VkPipelineLibraryCreateInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkBufferCopy2KHR, VkBufferCopy2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkCopyBufferInfo2KHR, VkCopyBufferInfo2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageCopy2KHR, VkImageCopy2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkCopyImageInfo2KHR, VkCopyImageInfo2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkBufferImageCopy2KHR, VkBufferImageCopy2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkCopyBufferToImageInfo2KHR, VkCopyBufferToImageInfo2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkCopyImageToBufferInfo2KHR, VkCopyImageToBufferInfo2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageBlit2KHR, VkImageBlit2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkBlitImageInfo2KHR, VkBlitImageInfo2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageResolve2KHR, VkImageResolve2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkResolveImageInfo2KHR, VkResolveImageInfo2KHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDebugReportCallbackCreateInfoEXT, VkDebugReportCallbackCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineRasterizationStateRasterizationOrderAMD, VkPipelineRasterizationStateRasterizationOrderAMD);
MAKE_EXTERNAL_TYPE_FACTORY(VkDebugMarkerObjectNameInfoEXT, VkDebugMarkerObjectNameInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDebugMarkerObjectTagInfoEXT, VkDebugMarkerObjectTagInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDebugMarkerMarkerInfoEXT, VkDebugMarkerMarkerInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDedicatedAllocationImageCreateInfoNV, VkDedicatedAllocationImageCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkDedicatedAllocationBufferCreateInfoNV, VkDedicatedAllocationBufferCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkDedicatedAllocationMemoryAllocateInfoNV, VkDedicatedAllocationMemoryAllocateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceTransformFeedbackFeaturesEXT, VkPhysicalDeviceTransformFeedbackFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceTransformFeedbackPropertiesEXT, VkPhysicalDeviceTransformFeedbackPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineRasterizationStateStreamCreateInfoEXT, VkPipelineRasterizationStateStreamCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageViewHandleInfoNVX, VkImageViewHandleInfoNVX);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageViewAddressPropertiesNVX, VkImageViewAddressPropertiesNVX);
MAKE_EXTERNAL_TYPE_FACTORY(VkTextureLODGatherFormatPropertiesAMD, VkTextureLODGatherFormatPropertiesAMD);
MAKE_EXTERNAL_TYPE_FACTORY(VkShaderResourceUsageAMD, VkShaderResourceUsageAMD);
MAKE_EXTERNAL_TYPE_FACTORY(VkShaderStatisticsInfoAMD, VkShaderStatisticsInfoAMD);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceCornerSampledImageFeaturesNV, VkPhysicalDeviceCornerSampledImageFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkExternalImageFormatPropertiesNV, VkExternalImageFormatPropertiesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkExternalMemoryImageCreateInfoNV, VkExternalMemoryImageCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkExportMemoryAllocateInfoNV, VkExportMemoryAllocateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkValidationFlagsEXT, VkValidationFlagsEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT, VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageViewASTCDecodeModeEXT, VkImageViewASTCDecodeModeEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceASTCDecodeFeaturesEXT, VkPhysicalDeviceASTCDecodeFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkConditionalRenderingBeginInfoEXT, VkConditionalRenderingBeginInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceConditionalRenderingFeaturesEXT, VkPhysicalDeviceConditionalRenderingFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkCommandBufferInheritanceConditionalRenderingInfoEXT, VkCommandBufferInheritanceConditionalRenderingInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkViewportWScalingNV, VkViewportWScalingNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineViewportWScalingStateCreateInfoNV, VkPipelineViewportWScalingStateCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkSurfaceCapabilities2EXT, VkSurfaceCapabilities2EXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayPowerInfoEXT, VkDisplayPowerInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceEventInfoEXT, VkDeviceEventInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayEventInfoEXT, VkDisplayEventInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkSwapchainCounterCreateInfoEXT, VkSwapchainCounterCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkRefreshCycleDurationGOOGLE, VkRefreshCycleDurationGOOGLE);
MAKE_EXTERNAL_TYPE_FACTORY(VkPastPresentationTimingGOOGLE, VkPastPresentationTimingGOOGLE);
MAKE_EXTERNAL_TYPE_FACTORY(VkPresentTimeGOOGLE, VkPresentTimeGOOGLE);
MAKE_EXTERNAL_TYPE_FACTORY(VkPresentTimesInfoGOOGLE, VkPresentTimesInfoGOOGLE);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX);
MAKE_EXTERNAL_TYPE_FACTORY(VkViewportSwizzleNV, VkViewportSwizzleNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineViewportSwizzleStateCreateInfoNV, VkPipelineViewportSwizzleStateCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceDiscardRectanglePropertiesEXT, VkPhysicalDeviceDiscardRectanglePropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineDiscardRectangleStateCreateInfoEXT, VkPipelineDiscardRectangleStateCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceConservativeRasterizationPropertiesEXT, VkPhysicalDeviceConservativeRasterizationPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineRasterizationConservativeStateCreateInfoEXT, VkPipelineRasterizationConservativeStateCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceDepthClipEnableFeaturesEXT, VkPhysicalDeviceDepthClipEnableFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineRasterizationDepthClipStateCreateInfoEXT, VkPipelineRasterizationDepthClipStateCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkXYColorEXT, VkXYColorEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkHdrMetadataEXT, VkHdrMetadataEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDebugUtilsLabelEXT, VkDebugUtilsLabelEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDebugUtilsObjectNameInfoEXT, VkDebugUtilsObjectNameInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDebugUtilsMessengerCallbackDataEXT, VkDebugUtilsMessengerCallbackDataEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDebugUtilsMessengerCreateInfoEXT, VkDebugUtilsMessengerCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDebugUtilsObjectTagInfoEXT, VkDebugUtilsObjectTagInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceInlineUniformBlockFeaturesEXT, VkPhysicalDeviceInlineUniformBlockFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceInlineUniformBlockPropertiesEXT, VkPhysicalDeviceInlineUniformBlockPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkWriteDescriptorSetInlineUniformBlockEXT, VkWriteDescriptorSetInlineUniformBlockEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDescriptorPoolInlineUniformBlockCreateInfoEXT, VkDescriptorPoolInlineUniformBlockCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkSampleLocationEXT, VkSampleLocationEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkSampleLocationsInfoEXT, VkSampleLocationsInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkAttachmentSampleLocationsEXT, VkAttachmentSampleLocationsEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkSubpassSampleLocationsEXT, VkSubpassSampleLocationsEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkRenderPassSampleLocationsBeginInfoEXT, VkRenderPassSampleLocationsBeginInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineSampleLocationsStateCreateInfoEXT, VkPipelineSampleLocationsStateCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceSampleLocationsPropertiesEXT, VkPhysicalDeviceSampleLocationsPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkMultisamplePropertiesEXT, VkMultisamplePropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT, VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineColorBlendAdvancedStateCreateInfoEXT, VkPipelineColorBlendAdvancedStateCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineCoverageToColorStateCreateInfoNV, VkPipelineCoverageToColorStateCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineCoverageModulationStateCreateInfoNV, VkPipelineCoverageModulationStateCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV, VkPhysicalDeviceShaderSMBuiltinsPropertiesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV, VkPhysicalDeviceShaderSMBuiltinsFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkDrmFormatModifierPropertiesEXT, VkDrmFormatModifierPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDrmFormatModifierPropertiesListEXT, VkDrmFormatModifierPropertiesListEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, VkPhysicalDeviceImageDrmFormatModifierInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageDrmFormatModifierListCreateInfoEXT, VkImageDrmFormatModifierListCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageDrmFormatModifierExplicitCreateInfoEXT, VkImageDrmFormatModifierExplicitCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkImageDrmFormatModifierPropertiesEXT, VkImageDrmFormatModifierPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkValidationCacheCreateInfoEXT, VkValidationCacheCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkShaderModuleValidationCacheCreateInfoEXT, VkShaderModuleValidationCacheCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkShadingRatePaletteNV, VkShadingRatePaletteNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineViewportShadingRateImageStateCreateInfoNV, VkPipelineViewportShadingRateImageStateCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShadingRateImageFeaturesNV, VkPhysicalDeviceShadingRateImageFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShadingRateImagePropertiesNV, VkPhysicalDeviceShadingRateImagePropertiesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkCoarseSampleLocationNV, VkCoarseSampleLocationNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkCoarseSampleOrderCustomNV, VkCoarseSampleOrderCustomNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV, VkPipelineViewportCoarseSampleOrderStateCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkRayTracingShaderGroupCreateInfoNV, VkRayTracingShaderGroupCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkRayTracingPipelineCreateInfoNV, VkRayTracingPipelineCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkGeometryTrianglesNV, VkGeometryTrianglesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkGeometryAABBNV, VkGeometryAABBNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkGeometryDataNV, VkGeometryDataNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkGeometryNV, VkGeometryNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureInfoNV, VkAccelerationStructureInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureCreateInfoNV, VkAccelerationStructureCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkBindAccelerationStructureMemoryInfoNV, VkBindAccelerationStructureMemoryInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkWriteDescriptorSetAccelerationStructureNV, VkWriteDescriptorSetAccelerationStructureNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureMemoryRequirementsInfoNV, VkAccelerationStructureMemoryRequirementsInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceRayTracingPropertiesNV, VkPhysicalDeviceRayTracingPropertiesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkTransformMatrixKHR, VkTransformMatrixKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAabbPositionsKHR, VkAabbPositionsKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureInstanceKHR, VkAccelerationStructureInstanceKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV, VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineRepresentativeFragmentTestStateCreateInfoNV, VkPipelineRepresentativeFragmentTestStateCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceImageViewImageFormatInfoEXT, VkPhysicalDeviceImageViewImageFormatInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkFilterCubicImageViewImageFormatPropertiesEXT, VkFilterCubicImageViewImageFormatPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceQueueGlobalPriorityCreateInfoEXT, VkDeviceQueueGlobalPriorityCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkImportMemoryHostPointerInfoEXT, VkImportMemoryHostPointerInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkMemoryHostPointerPropertiesEXT, VkMemoryHostPointerPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, VkPhysicalDeviceExternalMemoryHostPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineCompilerControlCreateInfoAMD, VkPipelineCompilerControlCreateInfoAMD);
MAKE_EXTERNAL_TYPE_FACTORY(VkCalibratedTimestampInfoEXT, VkCalibratedTimestampInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderCorePropertiesAMD, VkPhysicalDeviceShaderCorePropertiesAMD);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceMemoryOverallocationCreateInfoAMD, VkDeviceMemoryOverallocationCreateInfoAMD);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkVertexInputBindingDivisorDescriptionEXT, VkVertexInputBindingDivisorDescriptionEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineVertexInputDivisorStateCreateInfoEXT, VkPipelineVertexInputDivisorStateCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineCreationFeedbackEXT, VkPipelineCreationFeedbackEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineCreationFeedbackCreateInfoEXT, VkPipelineCreationFeedbackCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV, VkPhysicalDeviceComputeShaderDerivativesFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceMeshShaderFeaturesNV, VkPhysicalDeviceMeshShaderFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceMeshShaderPropertiesNV, VkPhysicalDeviceMeshShaderPropertiesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkDrawMeshTasksIndirectCommandNV, VkDrawMeshTasksIndirectCommandNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV, VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderImageFootprintFeaturesNV, VkPhysicalDeviceShaderImageFootprintFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineViewportExclusiveScissorStateCreateInfoNV, VkPipelineViewportExclusiveScissorStateCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceExclusiveScissorFeaturesNV, VkPhysicalDeviceExclusiveScissorFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkQueueFamilyCheckpointPropertiesNV, VkQueueFamilyCheckpointPropertiesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkCheckpointDataNV, VkCheckpointDataNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL, VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL);
MAKE_EXTERNAL_TYPE_FACTORY(VkPerformanceValueDataINTEL, VkPerformanceValueDataINTEL);
MAKE_EXTERNAL_TYPE_FACTORY(VkPerformanceValueINTEL, VkPerformanceValueINTEL);
MAKE_EXTERNAL_TYPE_FACTORY(VkInitializePerformanceApiInfoINTEL, VkInitializePerformanceApiInfoINTEL);
MAKE_EXTERNAL_TYPE_FACTORY(VkQueryPoolPerformanceQueryCreateInfoINTEL, VkQueryPoolPerformanceQueryCreateInfoINTEL);
MAKE_EXTERNAL_TYPE_FACTORY(VkPerformanceMarkerInfoINTEL, VkPerformanceMarkerInfoINTEL);
MAKE_EXTERNAL_TYPE_FACTORY(VkPerformanceStreamMarkerInfoINTEL, VkPerformanceStreamMarkerInfoINTEL);
MAKE_EXTERNAL_TYPE_FACTORY(VkPerformanceOverrideInfoINTEL, VkPerformanceOverrideInfoINTEL);
MAKE_EXTERNAL_TYPE_FACTORY(VkPerformanceConfigurationAcquireInfoINTEL, VkPerformanceConfigurationAcquireInfoINTEL);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePCIBusInfoPropertiesEXT, VkPhysicalDevicePCIBusInfoPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDisplayNativeHdrSurfaceCapabilitiesAMD, VkDisplayNativeHdrSurfaceCapabilitiesAMD);
MAKE_EXTERNAL_TYPE_FACTORY(VkSwapchainDisplayNativeHdrCreateInfoAMD, VkSwapchainDisplayNativeHdrCreateInfoAMD);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, VkPhysicalDeviceFragmentDensityMapFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, VkPhysicalDeviceFragmentDensityMapPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkRenderPassFragmentDensityMapCreateInfoEXT, VkRenderPassFragmentDensityMapCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT, VkPhysicalDeviceSubgroupSizeControlFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT, VkPhysicalDeviceSubgroupSizeControlPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT, VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderCoreProperties2AMD, VkPhysicalDeviceShaderCoreProperties2AMD);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceCoherentMemoryFeaturesAMD, VkPhysicalDeviceCoherentMemoryFeaturesAMD);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceMemoryBudgetPropertiesEXT, VkPhysicalDeviceMemoryBudgetPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceMemoryPriorityFeaturesEXT, VkPhysicalDeviceMemoryPriorityFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkMemoryPriorityAllocateInfoEXT, VkMemoryPriorityAllocateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV, VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, VkPhysicalDeviceBufferDeviceAddressFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkBufferDeviceAddressCreateInfoEXT, VkBufferDeviceAddressCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceToolPropertiesEXT, VkPhysicalDeviceToolPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkValidationFeaturesEXT, VkValidationFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkCooperativeMatrixPropertiesNV, VkCooperativeMatrixPropertiesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceCooperativeMatrixFeaturesNV, VkPhysicalDeviceCooperativeMatrixFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceCooperativeMatrixPropertiesNV, VkPhysicalDeviceCooperativeMatrixPropertiesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceCoverageReductionModeFeaturesNV, VkPhysicalDeviceCoverageReductionModeFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineCoverageReductionStateCreateInfoNV, VkPipelineCoverageReductionStateCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkFramebufferMixedSamplesCombinationNV, VkFramebufferMixedSamplesCombinationNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT, VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, VkPhysicalDeviceYcbcrImageArraysFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkHeadlessSurfaceCreateInfoEXT, VkHeadlessSurfaceCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceLineRasterizationFeaturesEXT, VkPhysicalDeviceLineRasterizationFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceLineRasterizationPropertiesEXT, VkPhysicalDeviceLineRasterizationPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineRasterizationLineStateCreateInfoEXT, VkPipelineRasterizationLineStateCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, VkPhysicalDeviceShaderAtomicFloatFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceIndexTypeUint8FeaturesEXT, VkPhysicalDeviceIndexTypeUint8FeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT, VkPhysicalDeviceExtendedDynamicStateFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT, VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV, VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV, VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkGraphicsShaderGroupCreateInfoNV, VkGraphicsShaderGroupCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkGraphicsPipelineShaderGroupsCreateInfoNV, VkGraphicsPipelineShaderGroupsCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkBindShaderGroupIndirectCommandNV, VkBindShaderGroupIndirectCommandNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkBindIndexBufferIndirectCommandNV, VkBindIndexBufferIndirectCommandNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkBindVertexBufferIndirectCommandNV, VkBindVertexBufferIndirectCommandNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkSetStateFlagsIndirectCommandNV, VkSetStateFlagsIndirectCommandNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkIndirectCommandsStreamNV, VkIndirectCommandsStreamNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkIndirectCommandsLayoutTokenNV, VkIndirectCommandsLayoutTokenNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkIndirectCommandsLayoutCreateInfoNV, VkIndirectCommandsLayoutCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkGeneratedCommandsInfoNV, VkGeneratedCommandsInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkGeneratedCommandsMemoryRequirementsInfoNV, VkGeneratedCommandsMemoryRequirementsInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT, VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkRenderPassTransformBeginInfoQCOM, VkRenderPassTransformBeginInfoQCOM);
MAKE_EXTERNAL_TYPE_FACTORY(VkCommandBufferInheritanceRenderPassTransformInfoQCOM, VkCommandBufferInheritanceRenderPassTransformInfoQCOM);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT, VkPhysicalDeviceDeviceMemoryReportFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceMemoryReportCallbackDataEXT, VkDeviceMemoryReportCallbackDataEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceDeviceMemoryReportCreateInfoEXT, VkDeviceDeviceMemoryReportCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceRobustness2FeaturesEXT, VkPhysicalDeviceRobustness2FeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceRobustness2PropertiesEXT, VkPhysicalDeviceRobustness2PropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkSamplerCustomBorderColorCreateInfoEXT, VkSamplerCustomBorderColorCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceCustomBorderColorPropertiesEXT, VkPhysicalDeviceCustomBorderColorPropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceCustomBorderColorFeaturesEXT, VkPhysicalDeviceCustomBorderColorFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePrivateDataFeaturesEXT, VkPhysicalDevicePrivateDataFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDevicePrivateDataCreateInfoEXT, VkDevicePrivateDataCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPrivateDataSlotCreateInfoEXT, VkPrivateDataSlotCreateInfoEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT, VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceDiagnosticsConfigFeaturesNV, VkPhysicalDeviceDiagnosticsConfigFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceDiagnosticsConfigCreateInfoNV, VkDeviceDiagnosticsConfigCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV, VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV, VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPipelineFragmentShadingRateEnumStateCreateInfoNV, VkPipelineFragmentShadingRateEnumStateCreateInfoNV);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, VkPhysicalDeviceFragmentDensityMap2FeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, VkPhysicalDeviceFragmentDensityMap2PropertiesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkCopyCommandTransformInfoQCOM, VkCopyCommandTransformInfoQCOM);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceImageRobustnessFeaturesEXT, VkPhysicalDeviceImageRobustnessFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDevice4444FormatsFeaturesEXT, VkPhysicalDevice4444FormatsFeaturesEXT);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceOrHostAddressKHR, VkDeviceOrHostAddressKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkDeviceOrHostAddressConstKHR, VkDeviceOrHostAddressConstKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureBuildRangeInfoKHR, VkAccelerationStructureBuildRangeInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureGeometryTrianglesDataKHR, VkAccelerationStructureGeometryTrianglesDataKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureGeometryAabbsDataKHR, VkAccelerationStructureGeometryAabbsDataKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureGeometryInstancesDataKHR, VkAccelerationStructureGeometryInstancesDataKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureGeometryDataKHR, VkAccelerationStructureGeometryDataKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureGeometryKHR, VkAccelerationStructureGeometryKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureBuildGeometryInfoKHR, VkAccelerationStructureBuildGeometryInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureCreateInfoKHR, VkAccelerationStructureCreateInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkWriteDescriptorSetAccelerationStructureKHR, VkWriteDescriptorSetAccelerationStructureKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceAccelerationStructureFeaturesKHR, VkPhysicalDeviceAccelerationStructureFeaturesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceAccelerationStructurePropertiesKHR, VkPhysicalDeviceAccelerationStructurePropertiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureDeviceAddressInfoKHR, VkAccelerationStructureDeviceAddressInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureVersionInfoKHR, VkAccelerationStructureVersionInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkCopyAccelerationStructureToMemoryInfoKHR, VkCopyAccelerationStructureToMemoryInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkCopyMemoryToAccelerationStructureInfoKHR, VkCopyMemoryToAccelerationStructureInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkCopyAccelerationStructureInfoKHR, VkCopyAccelerationStructureInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkAccelerationStructureBuildSizesInfoKHR, VkAccelerationStructureBuildSizesInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkRayTracingShaderGroupCreateInfoKHR, VkRayTracingShaderGroupCreateInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkRayTracingPipelineInterfaceCreateInfoKHR, VkRayTracingPipelineInterfaceCreateInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkRayTracingPipelineCreateInfoKHR, VkRayTracingPipelineCreateInfoKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, VkPhysicalDeviceRayTracingPipelineFeaturesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, VkPhysicalDeviceRayTracingPipelinePropertiesKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkStridedDeviceAddressRegionKHR, VkStridedDeviceAddressRegionKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkTraceRaysIndirectCommandKHR, VkTraceRaysIndirectCommandKHR);
MAKE_EXTERNAL_TYPE_FACTORY(VkPhysicalDeviceRayQueryFeaturesKHR, VkPhysicalDeviceRayQueryFeaturesKHR);
